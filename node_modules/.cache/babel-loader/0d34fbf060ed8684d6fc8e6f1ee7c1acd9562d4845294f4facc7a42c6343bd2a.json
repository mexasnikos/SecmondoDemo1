{"ast":null,"code":"var _TerracottaService;\n/**\n * Terracotta Insurance Quote Integration Service\n * \n * This service handles all communication with the Terracotta Integrated Quote web service\n * using SOAP protocol. It provides methods for:\n * - Requesting quotes (ProvideQuotation)\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\n * - Getting screening questions (ScreeningQuestions)\n * - Saving policy details (SavePolicyDetails)\n */\n\n// Import xmldom for Node.js XML parsing\nlet DOMParser;\n\n// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL = 'https://www.asuaonline.com/ws/integratedquote.asmx';\nconst PROXY_BASE_URL = 'http://localhost:3001/api/terracotta';\nconst TERRACOTTA_USER_ID = '4072';\nconst TERRACOTTA_USER_CODE = '111427';\n\n// TypeScript interfaces for Terracotta API data structures\n\n/**\n * Helper function to decode HTML entities and format currency\n */\nfunction formatCurrencyLimit(htmlString) {\n  if (!htmlString) return '';\n\n  // Decode HTML entities\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = htmlString;\n  let decoded = textarea.value;\n\n  // Additional manual replacements for common entities\n  decoded = decoded.replace(/&euro;/gi, '€').replace(/&pound;/gi, '£').replace(/&dollar;/gi, '$').replace(/&amp;/gi, '&').replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&quot;/gi, '\"').replace(/&#39;/gi, \"'\");\n\n  // Format numbers with thousand separators\n  // Match patterns like €32000 or euro32000 and add commas\n  decoded = decoded.replace(/([€£$]|euro|pound|dollar)?\\s*(\\d{4,})/gi, (match, currency, number) => {\n    const formattedNumber = parseInt(number).toLocaleString('en-US');\n    return currency ? `${currency}${formattedNumber}` : formattedNumber;\n  });\n\n  // Fix spacing: \"Up to€32,000\" -> \"Up to €32,000\"\n  decoded = decoded.replace(/(\\w)([€£$])/g, '$1 $2');\n  return decoded;\n}\n\n/**\n * SOAP XML Builder utility functions\n */\nclass SOAPBuilder {\n  static createEnvelope(body) {\n    return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    ${body}\n  </soap:Body>\n</soap:Envelope>`;\n  }\n  static buildTravelerXML(traveler) {\n    return `\n      <Traveller>\n        <TravellerNumber>${traveler.TravellerNumber}</TravellerNumber>\n        <Title>${traveler.Title}</Title>\n        <FirstName>${traveler.FirstName}</FirstName>\n        <LastName>${traveler.LastName}</LastName>\n        <DateOfBirth>${traveler.DateOfBirth}</DateOfBirth>\n        <Age>${traveler.Age}</Age>\n        <AgebandID>${traveler.AgebandID || 0}</AgebandID>\n        <TitleID>${traveler.TitleID || 0}</TitleID>\n        <minAge>${traveler.minAge || traveler.Age}</minAge>\n        <maxAge>${traveler.maxAge || traveler.Age}</maxAge>\n        <AlterationID>${traveler.AlterationID || ''}</AlterationID>\n        <msPrice>${traveler.msPrice || 0}</msPrice>\n        <msPriceExcIPT>${traveler.msPriceExcIPT || 0}</msPriceExcIPT>\n        <msConditions>${traveler.msConditions || ''}</msConditions>\n        <ScreeningInformation xsi:nil=\"true\" />\n      </Traveller>`;\n  }\n  static buildContactDetailsXML(contact) {\n    return `\n      <ContactDetails>\n        <Address>${contact.Address}</Address>\n        <Postcode>${contact.Postcode}</Postcode>\n        <Email>${contact.Email}</Email>\n        <Telephone>${contact.Telephone}</Telephone>\n        ${contact.VehicleMakeModel ? `<VehicleMakeModel>${contact.VehicleMakeModel}</VehicleMakeModel>` : ''}\n        ${contact.VehicleLicensePlate ? `<VehicleLicensePlate>${contact.VehicleLicensePlate}</VehicleLicensePlate>` : ''}\n        ${contact.VehicleYearManufacture ? `<VehicleYearManufacture>${contact.VehicleYearManufacture}</VehicleYearManufacture>` : ''}\n      </ContactDetails>`;\n  }\n  static buildQuoteDetailsXML(details) {\n    const travelersXML = details.Travellers.map(traveler => this.buildTravelerXML(traveler)).join('');\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    return `\n      <quoteDetails>\n        <ResidenceID>${parseInt(details.ResidenceID) || 1}</ResidenceID>\n        <TypePolicyID>${details.TypePolicyID}</TypePolicyID>\n        <TypePackageID>${parseInt(details.TypePackageID) || 1}</TypePackageID>\n        <Destination>${details.Destination}</Destination>\n        <StartDate>${details.StartDate}</StartDate>\n        <EndDate>${details.EndDate}</EndDate>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${details.includeAnnualQuotes !== undefined ? `<includeAnnualQuotes>${details.includeAnnualQuotes}</includeAnnualQuotes>` : ''}\n        ${details.includeUpsell !== undefined ? `<includeUpsell>${details.includeUpsell}</includeUpsell>` : ''}\n        ${details.currencyID ? `<currencyID>${details.currencyID}</currencyID>` : ''}\n        ${details.schemaIDFilter ? `<schemaIDFilter>${details.schemaIDFilter}</schemaIDFilter>` : ''}\n      </quoteDetails>`;\n  }\n  static buildScreeningAnswersXML(answers) {\n    return '<screeningQuestionAnswers>' + answers.map(answer => `\n        <screeningQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </screeningQuestionAnswer>`).join('') + '</screeningQuestionAnswers>';\n  }\n  static buildEligibilityAnswersXML(answers) {\n    return '<EligibilityQuestionAnswers>' + answers.map(answer => `\n        <eligibilityQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </eligibilityQuestionAnswer>`).join('') + '</EligibilityQuestionAnswers>';\n  }\n  static buildDynamicDetailsXML(details) {\n    return '<DynamicDetails>' + details.map(detail => `\n        <DynamicDetail_SavedValue>\n          <Position>${detail.Position}</Position>\n          <FieldName>${detail.FieldName}</FieldName>\n          <FieldValue>${detail.FieldValue}</FieldValue>\n          <FieldSize>${detail.FieldSize}</FieldSize>\n        </DynamicDetail_SavedValue>`).join('') + '</DynamicDetails>';\n  }\n  static buildSpecificQuoteDetailsXML(details) {\n    const travelersXML = details.Travellers.map(traveler => this.buildTravelerXML(traveler)).join('');\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    const dynamicDetailsXML = details.DynamicDetails ? this.buildDynamicDetailsXML(details.DynamicDetails) : '';\n    const screeningAnswersXML = details.screeningQuestionAnswers ? this.buildScreeningAnswersXML(details.screeningQuestionAnswers) : '';\n    const eligibilityAnswersXML = details.EligibilityQuestionAnswers ? this.buildEligibilityAnswersXML(details.EligibilityQuestionAnswers) : '';\n    return `\n      <specificQuoteDetails>\n        <AlterationID>${details.AlterationID}</AlterationID>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${dynamicDetailsXML}\n        ${screeningAnswersXML}\n        ${eligibilityAnswersXML}\n      </specificQuoteDetails>`;\n  }\n}\n\n/**\n * XML Parser utility functions\n */\nclass XMLParser {\n  static async getXMLParser() {\n    if (typeof window !== 'undefined') {\n      // Browser environment\n      return new window.DOMParser();\n    } else {\n      // Node.js environment - use dynamic import\n      const {\n        DOMParser: XMDOMParser\n      } = await import('xmldom');\n      return new XMDOMParser();\n    }\n  }\n  static async parseQuoteResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector;\n      // Use a simple XML parser for Node.js environment\n      const parser = await this.getXMLParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n\n      // Check for parsing errors\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector === void 0 ? void 0 : _xmlDoc$querySelector.textContent) || '';\n      const quoteResults = [];\n\n      // Select only child quoteResults, not the parent container\n      const quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationResult > quoteResults > quoteResults');\n      quoteResultNodes.forEach(node => {\n        var _node$querySelector, _node$querySelector2, _node$querySelector3, _node$querySelector4, _node$querySelector5, _node$querySelector6, _node$querySelector7, _node$querySelector8, _node$querySelector9, _node$querySelector0, _node$querySelector1, _node$querySelector10, _node$querySelector11, _node$querySelector12, _node$querySelector13, _node$querySelector14, _node$querySelector15, _node$querySelector16, _node$querySelector17, _node$querySelector18, _node$querySelector19, _node$querySelector20, _node$querySelector21, _node$querySelector22, _node$querySelector23, _node$querySelector24, _node$querySelector25, _node$querySelector26, _node$querySelector27, _node$querySelector28, _node$querySelector29, _node$querySelector30, _node$querySelector31, _node$querySelector32, _node$querySelector33, _node$querySelector34, _node$querySelector35, _node$querySelector36, _node$querySelector37, _node$querySelector38, _node$querySelector39, _node$querySelector40, _node$querySelector41, _node$querySelector42, _node$querySelector43, _node$querySelector44;\n        // Only process nodes that have QuoteID (skip empty parent nodes)\n        const quoteID = ((_node$querySelector = node.querySelector('QuoteID')) === null || _node$querySelector === void 0 ? void 0 : _node$querySelector.textContent) || '';\n        if (!quoteID) return; // Skip empty nodes\n\n        const result = {\n          QuoteID: quoteID,\n          schemaName: ((_node$querySelector2 = node.querySelector('schemaName')) === null || _node$querySelector2 === void 0 ? void 0 : _node$querySelector2.textContent) || '',\n          policytypeName: ((_node$querySelector3 = node.querySelector('policytypeName')) === null || _node$querySelector3 === void 0 ? void 0 : _node$querySelector3.textContent) || '',\n          residenceName: ((_node$querySelector4 = node.querySelector('residenceName')) === null || _node$querySelector4 === void 0 ? void 0 : _node$querySelector4.textContent) || '',\n          destinationName: ((_node$querySelector5 = node.querySelector('destinationName')) === null || _node$querySelector5 === void 0 ? void 0 : _node$querySelector5.textContent) || '',\n          startDate: ((_node$querySelector6 = node.querySelector('startDate')) === null || _node$querySelector6 === void 0 ? void 0 : _node$querySelector6.textContent) || '',\n          endDate: ((_node$querySelector7 = node.querySelector('endDate')) === null || _node$querySelector7 === void 0 ? void 0 : _node$querySelector7.textContent) || '',\n          SI: ((_node$querySelector8 = node.querySelector('SI')) === null || _node$querySelector8 === void 0 ? void 0 : _node$querySelector8.textContent) || '',\n          PW: ((_node$querySelector9 = node.querySelector('PW')) === null || _node$querySelector9 === void 0 ? void 0 : _node$querySelector9.textContent) || '',\n          KF: ((_node$querySelector0 = node.querySelector('KF')) === null || _node$querySelector0 === void 0 ? void 0 : _node$querySelector0.textContent) || '',\n          HelpFile: ((_node$querySelector1 = node.querySelector('HelpFile')) === null || _node$querySelector1 === void 0 ? void 0 : _node$querySelector1.textContent) || '',\n          currency: ((_node$querySelector10 = node.querySelector('currency')) === null || _node$querySelector10 === void 0 ? void 0 : _node$querySelector10.textContent) || '',\n          IPT: parseFloat(((_node$querySelector11 = node.querySelector('IPT')) === null || _node$querySelector11 === void 0 ? void 0 : _node$querySelector11.textContent) || '0'),\n          IPTRate: parseFloat(((_node$querySelector12 = node.querySelector('IPTRate')) === null || _node$querySelector12 === void 0 ? void 0 : _node$querySelector12.textContent) || '0'),\n          GrossPrice: parseFloat(((_node$querySelector13 = node.querySelector('GrossPrice')) === null || _node$querySelector13 === void 0 ? void 0 : _node$querySelector13.textContent) || '0'),\n          screeningPremium: parseFloat(((_node$querySelector14 = node.querySelector('screeningPremium')) === null || _node$querySelector14 === void 0 ? void 0 : _node$querySelector14.textContent) || '0'),\n          IconURL: ((_node$querySelector15 = node.querySelector('IconURL')) === null || _node$querySelector15 === void 0 ? void 0 : _node$querySelector15.textContent) || '',\n          SchemaID: parseInt(((_node$querySelector16 = node.querySelector('SchemaID')) === null || _node$querySelector16 === void 0 ? void 0 : _node$querySelector16.textContent) || '0'),\n          PolicyTypeID: parseInt(((_node$querySelector17 = node.querySelector('PolicyTypeID')) === null || _node$querySelector17 === void 0 ? void 0 : _node$querySelector17.textContent) || '0'),\n          DestinationID: parseInt(((_node$querySelector18 = node.querySelector('DestinationID')) === null || _node$querySelector18 === void 0 ? void 0 : _node$querySelector18.textContent) || '0'),\n          PackageID: parseInt(((_node$querySelector19 = node.querySelector('PackageID')) === null || _node$querySelector19 === void 0 ? void 0 : _node$querySelector19.textContent) || '0'),\n          MaxAgeAgebandID: parseInt(((_node$querySelector20 = node.querySelector('MaxAgeAgebandID')) === null || _node$querySelector20 === void 0 ? void 0 : _node$querySelector20.textContent) || '0'),\n          ScreeningID: parseInt(((_node$querySelector21 = node.querySelector('ScreeningID')) === null || _node$querySelector21 === void 0 ? void 0 : _node$querySelector21.textContent) || '0'),\n          groupPerProduct: ((_node$querySelector22 = node.querySelector('groupPerProduct')) === null || _node$querySelector22 === void 0 ? void 0 : _node$querySelector22.textContent) === 'true',\n          priceOrder: parseInt(((_node$querySelector23 = node.querySelector('priceOrder')) === null || _node$querySelector23 === void 0 ? void 0 : _node$querySelector23.textContent) || '0'),\n          IPID: ((_node$querySelector24 = node.querySelector('IPID')) === null || _node$querySelector24 === void 0 ? void 0 : _node$querySelector24.textContent) || '',\n          typePolicyName: ((_node$querySelector25 = node.querySelector('typePolicyName')) === null || _node$querySelector25 === void 0 ? void 0 : _node$querySelector25.textContent) || '',\n          typePackageName: ((_node$querySelector26 = node.querySelector('typePackageName')) === null || _node$querySelector26 === void 0 ? void 0 : _node$querySelector26.textContent) || '',\n          currencyHTMLEncoded: ((_node$querySelector27 = node.querySelector('currencyHTMLEncoded')) === null || _node$querySelector27 === void 0 ? void 0 : _node$querySelector27.textContent) || '',\n          AlterationID: ((_node$querySelector28 = node.querySelector('AlterationID')) === null || _node$querySelector28 === void 0 ? void 0 : _node$querySelector28.textContent) || '',\n          packageName: ((_node$querySelector29 = node.querySelector('packageName')) === null || _node$querySelector29 === void 0 ? void 0 : _node$querySelector29.textContent) || '',\n          isAnnual: parseInt(((_node$querySelector30 = node.querySelector('isAnnual')) === null || _node$querySelector30 === void 0 ? void 0 : _node$querySelector30.textContent) || '0'),\n          isBestBuy: parseInt(((_node$querySelector31 = node.querySelector('isBestBuy')) === null || _node$querySelector31 === void 0 ? void 0 : _node$querySelector31.textContent) || '0'),\n          maxDaysPerTrip: parseInt(((_node$querySelector32 = node.querySelector('maxDaysPerTrip')) === null || _node$querySelector32 === void 0 ? void 0 : _node$querySelector32.textContent) || '0'),\n          isBestBuyText: ((_node$querySelector33 = node.querySelector('isBestBuyText')) === null || _node$querySelector33 === void 0 ? void 0 : _node$querySelector33.textContent) || '',\n          isBestBuyLocation: parseInt(((_node$querySelector34 = node.querySelector('isBestBuyLocation')) === null || _node$querySelector34 === void 0 ? void 0 : _node$querySelector34.textContent) || '0'),\n          numberToSort: parseFloat(((_node$querySelector35 = node.querySelector('numberToSort')) === null || _node$querySelector35 === void 0 ? void 0 : _node$querySelector35.textContent) || '0'),\n          coverLevel: parseInt(((_node$querySelector36 = node.querySelector('coverLevel')) === null || _node$querySelector36 === void 0 ? void 0 : _node$querySelector36.textContent) || '0'),\n          Discount: parseFloat(((_node$querySelector37 = node.querySelector('Discount')) === null || _node$querySelector37 === void 0 ? void 0 : _node$querySelector37.textContent) || '0'),\n          netUW: parseFloat(((_node$querySelector38 = node.querySelector('netUW')) === null || _node$querySelector38 === void 0 ? void 0 : _node$querySelector38.textContent) || '0'),\n          wbComm: parseFloat(((_node$querySelector39 = node.querySelector('wbComm')) === null || _node$querySelector39 === void 0 ? void 0 : _node$querySelector39.textContent) || '0'),\n          agentComm: parseFloat(((_node$querySelector40 = node.querySelector('agentComm')) === null || _node$querySelector40 === void 0 ? void 0 : _node$querySelector40.textContent) || '0'),\n          screeningPremiumPerPersonCSV: ((_node$querySelector41 = node.querySelector('screeningPremiumPerPersonCSV')) === null || _node$querySelector41 === void 0 ? void 0 : _node$querySelector41.textContent) || '',\n          screeningPremiumExcIPTPerPersonCSV: ((_node$querySelector42 = node.querySelector('screeningPremiumExcIPTPerPersonCSV')) === null || _node$querySelector42 === void 0 ? void 0 : _node$querySelector42.textContent) || '',\n          isNotCoveredPerPersonCSV: ((_node$querySelector43 = node.querySelector('isNotCoveredPerPersonCSV')) === null || _node$querySelector43 === void 0 ? void 0 : _node$querySelector43.textContent) || '',\n          policytypeShortName: ((_node$querySelector44 = node.querySelector('policytypeShortName')) === null || _node$querySelector44 === void 0 ? void 0 : _node$querySelector44.textContent) || '',\n          SummaryCovers: []\n        };\n\n        // Parse SummaryCovers\n        const summaryCoversNode = node.querySelector('SummaryCovers');\n        if (summaryCoversNode) {\n          const summaryCoverNodes = summaryCoversNode.querySelectorAll('summaryCover');\n          const summaryCovers = [];\n          summaryCoverNodes.forEach(coverNode => {\n            var _coverNode$querySelec, _coverNode$querySelec2, _coverNode$querySelec3, _coverNode$querySelec4;\n            const rawLimit = ((_coverNode$querySelec = coverNode.querySelector('Limit')) === null || _coverNode$querySelec === void 0 ? void 0 : _coverNode$querySelec.textContent) || '';\n            const rawExcess = ((_coverNode$querySelec2 = coverNode.querySelector('Excess')) === null || _coverNode$querySelec2 === void 0 ? void 0 : _coverNode$querySelec2.textContent) || '';\n            summaryCovers.push({\n              name: ((_coverNode$querySelec3 = coverNode.querySelector('name')) === null || _coverNode$querySelec3 === void 0 ? void 0 : _coverNode$querySelec3.textContent) || '',\n              Limit: formatCurrencyLimit(rawLimit),\n              Excess: formatCurrencyLimit(rawExcess),\n              position: parseInt(((_coverNode$querySelec4 = coverNode.querySelector('position')) === null || _coverNode$querySelec4 === void 0 ? void 0 : _coverNode$querySelec4.textContent) || '0')\n            });\n          });\n          result.SummaryCovers = summaryCovers;\n        }\n        quoteResults.push(result);\n      });\n      return {\n        Message: message,\n        quoteResults\n      };\n    } catch (error) {\n      console.error('Error parsing quote response:', error);\n      throw new Error(`Failed to parse quote response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseScreeningQuestionsResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector2;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector2 = xmlDoc.querySelector('Message')) === null || _xmlDoc$querySelector2 === void 0 ? void 0 : _xmlDoc$querySelector2.textContent) || '';\n      const screeningQuestions = [];\n      const questionNodes = xmlDoc.querySelectorAll('screeningQuestion');\n      questionNodes.forEach(node => {\n        var _node$querySelector45, _node$querySelector46, _node$querySelector47, _node$querySelector48, _node$querySelector49, _node$querySelector50, _node$querySelector51, _node$querySelector52;\n        const question = {\n          questionNumber: parseInt(((_node$querySelector45 = node.querySelector('questionNumber')) === null || _node$querySelector45 === void 0 ? void 0 : _node$querySelector45.textContent) || '0'),\n          question: ((_node$querySelector46 = node.querySelector('question')) === null || _node$querySelector46 === void 0 ? void 0 : _node$querySelector46.textContent) || '',\n          yesMessage: ((_node$querySelector47 = node.querySelector('yesMessage')) === null || _node$querySelector47 === void 0 ? void 0 : _node$querySelector47.textContent) || '',\n          noMessage: ((_node$querySelector48 = node.querySelector('noMessage')) === null || _node$querySelector48 === void 0 ? void 0 : _node$querySelector48.textContent) || '',\n          yesAction: ((_node$querySelector49 = node.querySelector('yesAction')) === null || _node$querySelector49 === void 0 ? void 0 : _node$querySelector49.textContent) || '',\n          noAction: ((_node$querySelector50 = node.querySelector('noAction')) === null || _node$querySelector50 === void 0 ? void 0 : _node$querySelector50.textContent) || '',\n          yesActionText: ((_node$querySelector51 = node.querySelector('yesActionText')) === null || _node$querySelector51 === void 0 ? void 0 : _node$querySelector51.textContent) || '',\n          noActionText: ((_node$querySelector52 = node.querySelector('noActionText')) === null || _node$querySelector52 === void 0 ? void 0 : _node$querySelector52.textContent) || ''\n        };\n        screeningQuestions.push(question);\n      });\n      return {\n        Message: message,\n        screeningQuestions\n      };\n    } catch (error) {\n      console.error('Error parsing screening questions response:', error);\n      throw new Error(`Failed to parse screening questions response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseSavePolicyResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector3, _xmlDoc$querySelector4, _xmlDoc$querySelector5, _xmlDoc$querySelector6, _xmlDoc$querySelector7, _xmlDoc$querySelector8;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      return {\n        Message: ((_xmlDoc$querySelector3 = xmlDoc.querySelector('Message')) === null || _xmlDoc$querySelector3 === void 0 ? void 0 : _xmlDoc$querySelector3.textContent) || '',\n        policySaved: ((_xmlDoc$querySelector4 = xmlDoc.querySelector('policySaved')) === null || _xmlDoc$querySelector4 === void 0 ? void 0 : _xmlDoc$querySelector4.textContent) || 'No',\n        policyID: ((_xmlDoc$querySelector5 = xmlDoc.querySelector('policyID')) === null || _xmlDoc$querySelector5 === void 0 ? void 0 : _xmlDoc$querySelector5.textContent) || '',\n        certificate: ((_xmlDoc$querySelector6 = xmlDoc.querySelector('certificate')) === null || _xmlDoc$querySelector6 === void 0 ? void 0 : _xmlDoc$querySelector6.textContent) || '',\n        PW: ((_xmlDoc$querySelector7 = xmlDoc.querySelector('PW')) === null || _xmlDoc$querySelector7 === void 0 ? void 0 : _xmlDoc$querySelector7.textContent) || '',\n        SI: ((_xmlDoc$querySelector8 = xmlDoc.querySelector('SI')) === null || _xmlDoc$querySelector8 === void 0 ? void 0 : _xmlDoc$querySelector8.textContent) || ''\n      };\n    } catch (error) {\n      console.error('Error parsing save policy response:', error);\n      throw new Error(`Failed to parse save policy response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseProductListResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector9, _xmlDoc$querySelector0;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector9 = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector9 === void 0 ? void 0 : _xmlDoc$querySelector9.textContent) || '';\n      const resultID = parseInt(((_xmlDoc$querySelector0 = xmlDoc.querySelector('errorID')) === null || _xmlDoc$querySelector0 === void 0 ? void 0 : _xmlDoc$querySelector0.textContent) || '0');\n      const schemas = [];\n      const schemaNodes = xmlDoc.querySelectorAll('Schema');\n      schemaNodes.forEach(node => {\n        var _node$querySelector53, _node$querySelector54;\n        const schema = {\n          SchemaID: parseInt(((_node$querySelector53 = node.querySelector('SchemaID')) === null || _node$querySelector53 === void 0 ? void 0 : _node$querySelector53.textContent) || '0'),\n          SchemaName: ((_node$querySelector54 = node.querySelector('SchemaName')) === null || _node$querySelector54 === void 0 ? void 0 : _node$querySelector54.textContent) || ''\n        };\n        schemas.push(schema);\n      });\n      return {\n        Message: message,\n        ResultID: resultID,\n        Schemas: schemas\n      };\n    } catch (error) {\n      console.error('Error parsing product list response:', error);\n      throw new Error(`Failed to parse product list response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parsePolicyTypeResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector1, _xmlDoc$querySelector10;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector1 = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector1 === void 0 ? void 0 : _xmlDoc$querySelector1.textContent) || '';\n      const resultID = parseInt(((_xmlDoc$querySelector10 = xmlDoc.querySelector('errorID')) === null || _xmlDoc$querySelector10 === void 0 ? void 0 : _xmlDoc$querySelector10.textContent) || '0');\n      const policyTypes = [];\n      const policyTypeNodes = xmlDoc.querySelectorAll('TypePolicy');\n      policyTypeNodes.forEach(node => {\n        var _node$querySelector55, _node$querySelector56, _node$querySelector57;\n        const policyType = {\n          TypePolicyID: ((_node$querySelector55 = node.querySelector('TypePolicyID')) === null || _node$querySelector55 === void 0 ? void 0 : _node$querySelector55.textContent) || '',\n          TypePolicyName: ((_node$querySelector56 = node.querySelector('Name')) === null || _node$querySelector56 === void 0 ? void 0 : _node$querySelector56.textContent) || '',\n          // Changed from TypePolicyName to Name\n          Description: ((_node$querySelector57 = node.querySelector('IsAnnual')) === null || _node$querySelector57 === void 0 ? void 0 : _node$querySelector57.textContent) === '1' ? 'Annual Policy' : 'Single Trip Policy'\n        };\n        policyTypes.push(policyType);\n      });\n      return {\n        Message: message,\n        ResultID: resultID,\n        PolicyTypes: policyTypes\n      };\n    } catch (error) {\n      console.error('Error parsing policy type response:', error);\n      throw new Error(`Failed to parse policy type response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parsePolicyTypeDestinationResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector11, _xmlDoc$querySelector12;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector11 = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector11 === void 0 ? void 0 : _xmlDoc$querySelector11.textContent) || '';\n      const resultID = parseInt(((_xmlDoc$querySelector12 = xmlDoc.querySelector('errorID')) === null || _xmlDoc$querySelector12 === void 0 ? void 0 : _xmlDoc$querySelector12.textContent) || '0');\n      const policyTypeDestinations = [];\n      const destinationNodes = xmlDoc.querySelectorAll('PolicyTypeDestination');\n      destinationNodes.forEach(node => {\n        var _node$querySelector58, _node$querySelector59, _node$querySelector60;\n        const destination = {\n          TypePolicyDestinationID: ((_node$querySelector58 = node.querySelector('TypePolicyDestinationID')) === null || _node$querySelector58 === void 0 ? void 0 : _node$querySelector58.textContent) || '',\n          Name: ((_node$querySelector59 = node.querySelector('Name')) === null || _node$querySelector59 === void 0 ? void 0 : _node$querySelector59.textContent) || '',\n          PolicyTypeID: ((_node$querySelector60 = node.querySelector('PolicyTypeID')) === null || _node$querySelector60 === void 0 ? void 0 : _node$querySelector60.textContent) || ''\n        };\n        policyTypeDestinations.push(destination);\n      });\n      return {\n        Message: message,\n        ResultID: resultID,\n        PolicyTypeDestinations: policyTypeDestinations\n      };\n    } catch (error) {\n      console.error('Error parsing policy type destination response:', error);\n      throw new Error(`Failed to parse policy type destination response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Main Terracotta Service Class\n */\nexport class TerracottaService {\n  constructor(userID = TERRACOTTA_USER_ID, userCode = TERRACOTTA_USER_CODE) {\n    this.userID = void 0;\n    this.userCode = void 0;\n    this.userID = userID;\n    this.userCode = userCode;\n  }\n  static getInstance(userID, userCode) {\n    if (!TerracottaService.instance) {\n      TerracottaService.instance = new TerracottaService(userID || TERRACOTTA_USER_ID, userCode || TERRACOTTA_USER_CODE);\n    }\n    return TerracottaService.instance;\n  }\n\n  /**\n   * Generic SOAP request method\n   */\n  async makeSOAPRequest(method, requestBody) {\n    const soapEnvelope = SOAPBuilder.createEnvelope(requestBody);\n    console.log('Making SOAP request via proxy to:', `${PROXY_BASE_URL}/${method}`);\n    console.log('SOAP Envelope:', soapEnvelope);\n    try {\n      const response = await fetch(`${PROXY_BASE_URL}/${method}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/xml; charset=utf-8'\n        },\n        body: soapEnvelope\n      });\n      console.log('SOAP Response Status:', response.status, response.statusText);\n      const responseText = await response.text();\n      console.log('SOAP Response Body:', responseText);\n      if (!response.ok) {\n        throw new Error(`SOAP request failed: ${response.status} ${response.statusText}`);\n      }\n      return responseText;\n    } catch (error) {\n      console.error('Proxy request failed:', error);\n      throw new Error(`Failed to connect to Terracotta API via proxy: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Test connection with HelloWorld method\n   */\n  async testConnection() {\n    try {\n      const soapBody = `\n        <HelloWorld xmlns=\"WS-IntegratedQuote\">\n        </HelloWorld>`;\n      const responseText = await this.makeSOAPRequest('HelloWorld', soapBody);\n      console.log('Connection test successful:', responseText);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get available policy types for a specific schema\n   */\n  async getUserProductTypePolicy(schemaId) {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      console.log('getUserProductTypePolicy - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      const soapBody = `\n        <GetUserProductTypePolicy xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductTypePolicy>`;\n      const responseText = await this.makeSOAPRequest('GetUserProductTypePolicy', soapBody);\n      return XMLParser.parsePolicyTypeResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductTypePolicy:', error);\n      throw new Error(`Failed to get policy types: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available destinations for a specific schema\n   */\n  async getUserProductDestination(schemaId) {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      console.log('getUserProductDestination - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      const soapBody = `\n        <GetUserProductDestination xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductDestination>`;\n      const responseText = await this.makeSOAPRequest('GetUserProductDestination', soapBody);\n      return XMLParser.parsePolicyTypeDestinationResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductDestination:', error);\n      throw new Error(`Failed to get policy type destinations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available products for the user\n   */\n  async getUserProductList() {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      console.log('getUserProductList - userID:', userID, 'userCode:', userCode);\n      console.log('getUserProductList - this.userID:', this.userID, 'this.userCode:', this.userCode);\n      const soapBody = `\n        <GetUserProductList xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n        </GetUserProductList>`;\n      const responseText = await this.makeSOAPRequest('GetUserProductList', soapBody);\n      return XMLParser.parseProductListResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductList:', error);\n      throw new Error(`Failed to get user product list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 1. Request for quotations\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\n   */\n  async provideQuotation(request) {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotation...');\n      console.log('📦 Request object:', request);\n      const quoteDetailsXML = SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);\n      console.log('📄 Quote Details XML:', quoteDetailsXML);\n      const soapBody = `\n        <ProvideQuotation xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          ${quoteDetailsXML}\n        </ProvideQuotation>`;\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotation`);\n      const responseText = await this.makeSOAPRequest('ProvideQuotation', soapBody);\n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      const parsedResponse = await XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotation:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Obtain Screening Questions\n   * Calls ScreeningQuestions to get screening questions for the selected quote\n   */\n  async getScreeningQuestions(quoteID) {\n    try {\n      const soapBody = `\n        <ScreeningQuestions xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID)}</userID>\n          <userCode>${parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE)}</userCode>\n          <quoteID>${quoteID}</quoteID>\n        </ScreeningQuestions>`;\n      const responseText = await this.makeSOAPRequest('ScreeningQuestions', soapBody);\n      return XMLParser.parseScreeningQuestionsResponse(responseText);\n    } catch (error) {\n      console.error('Error in getScreeningQuestions:', error);\n      throw new Error(`Failed to get screening questions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 2. Update quotes with additional covers\n   * Calls ProvideQuotationWithAlterations to get quotes with specific alterations/add-ons\n   * This method can only be called AFTER obtaining a quote reference from ProvideQuotation\n   */\n  async provideQuotationWithAlterations(request) {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotationWithAlterations...');\n      console.log('📦 Request object:', request);\n      const specificQuoteDetailsXML = SOAPBuilder.buildSpecificQuoteDetailsXML(request.specificQuoteDetails);\n      console.log('📄 Specific Quote Details XML:', specificQuoteDetailsXML);\n      const soapBody = `\n        <ProvideQuotationWithAlterations xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${specificQuoteDetailsXML}\n        </ProvideQuotationWithAlterations>`;\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotationWithAlterations`);\n      const responseText = await this.makeSOAPRequest('ProvideQuotationWithAlterations', soapBody);\n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      const parsedResponse = await XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotationWithAlterations:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes with alterations from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Save a quote as a Live policy\n   * Calls SavePolicyDetails to convert the quote into a live policy\n   */\n  async savePolicyDetails(request) {\n    try {\n      const screeningAnswersXML = SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);\n      const soapBody = `\n        <SavePolicyDetails xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${screeningAnswersXML}\n          ${request.medicalScreeningReference ? `<medicalScreeningReference>${request.medicalScreeningReference}</medicalScreeningReference>` : ''}\n        </SavePolicyDetails>`;\n      const responseText = await this.makeSOAPRequest('SavePolicyDetails', soapBody);\n      return XMLParser.parseSavePolicyResponse(responseText);\n    } catch (error) {\n      console.error('Error in savePolicyDetails:', error);\n      throw new Error(`Failed to save policy details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Utility method to convert frontend data to Terracotta format\n   */\n  static convertToTerracottaFormat(formData) {\n    var _formData$billingAddr, _formData$contactAddr, _formData$billingAddr2, _formData$contactAddr2, _formData$travelers$, _formData$travelers$2;\n    console.log('Converting form data to Terracotta format:', formData);\n\n    // Convert travelers to Terracotta format using actual user data\n    const travelers = formData.travelers.map((traveler, index) => {\n      // Prioritize date of birth over age for accuracy\n      const dateOfBirth = traveler.dateOfBirth || calculateDateOfBirth(parseInt(traveler.age));\n      const calculatedAge = traveler.dateOfBirth ? calculateAgeFromDateOfBirth(traveler.dateOfBirth) : parseInt(traveler.age);\n      console.log(`Traveler ${index + 1}: DOB=${dateOfBirth}, Age=${calculatedAge}`);\n      return {\n        TravellerNumber: index + 1,\n        Title: traveler.title || 'Mr',\n        // Use actual title from form\n        FirstName: traveler.firstName,\n        LastName: traveler.lastName,\n        DateOfBirth: formatDateForTerracotta(dateOfBirth),\n        Age: calculatedAge,\n        AgebandID: getAgebandID(calculatedAge),\n        TitleID: getTitleID(traveler.title || 'Mr'),\n        minAge: calculatedAge,\n        maxAge: calculatedAge,\n        ScreeningInformation: null\n      };\n    });\n\n    // Convert contact details using actual user data\n    const contactDetails = {\n      Address: ((_formData$billingAddr = formData.billingAddress) === null || _formData$billingAddr === void 0 ? void 0 : _formData$billingAddr.street) || ((_formData$contactAddr = formData.contactAddress) === null || _formData$contactAddr === void 0 ? void 0 : _formData$contactAddr.street) || '123 Main Street',\n      Postcode: ((_formData$billingAddr2 = formData.billingAddress) === null || _formData$billingAddr2 === void 0 ? void 0 : _formData$billingAddr2.postalCode) || ((_formData$contactAddr2 = formData.contactAddress) === null || _formData$contactAddr2 === void 0 ? void 0 : _formData$contactAddr2.postalCode) || '12345',\n      Email: ((_formData$travelers$ = formData.travelers[0]) === null || _formData$travelers$ === void 0 ? void 0 : _formData$travelers$.email) || formData.contactEmail || 'test@example.com',\n      Telephone: ((_formData$travelers$2 = formData.travelers[0]) === null || _formData$travelers$2 === void 0 ? void 0 : _formData$travelers$2.phone) || formData.contactPhone || '+30123456789',\n      VehicleMakeModel: formData.vehicleMakeModel,\n      VehicleLicensePlate: formData.vehicleLicensePlate,\n      VehicleYearManufacture: formData.vehicleYearManufacture\n    };\n\n    // Convert trip details using actual user data\n    const quoteDetails = {\n      ResidenceID: getResidenceID(formData.countryOfResidence),\n      TypePolicyID: getTypePolicyID(formData.tripType),\n      TypePackageID: '1',\n      // Fixed value as requested (string)\n      Destination: formData.destination || 'Europe',\n      StartDate: formatDateForTerracotta(formData.startDate),\n      EndDate: formatDateForTerracotta(formData.endDate),\n      Travellers: travelers,\n      ContactDetails: contactDetails,\n      includeAnnualQuotes: formData.tripType === 'annual' ? 1 : 0,\n      includeUpsell: 0,\n      // Simplified for now\n      currencyID: 1,\n      // EUR\n      schemaIDFilter: '717' // Use schema 717\n    };\n    console.log('Converted Terracotta request:', quoteDetails);\n\n    // Use fixed values as requested\n    return {\n      userID: '4072',\n      userCode: '111427',\n      quoteDetails\n    };\n  }\n}\n\n/**\n * Utility functions for data conversion\n */\n_TerracottaService = TerracottaService;\nTerracottaService.instance = void 0;\nfunction formatDateForTerracotta(dateString) {\n  if (!dateString) return '';\n\n  // Handle different date formats\n  if (dateString.includes('/')) {\n    // Handle DD/MM/YYYY format\n    const parts = dateString.split('/');\n    if (parts.length === 3) {\n      const [day, month, year] = parts;\n      return `${year}/${month}/${day}`;\n    }\n  }\n\n  // Handle YYYY-MM-DD format\n  if (dateString.includes('-')) {\n    return dateString.replace(/-/g, '/');\n  }\n  return dateString;\n}\nfunction calculateDateOfBirth(age) {\n  const currentYear = new Date().getFullYear();\n  const birthYear = currentYear - age;\n  // Use January 1st as default date\n  return `${birthYear}/01/01`;\n}\nfunction calculateAgeFromDateOfBirth(dateOfBirth) {\n  const birthDate = new Date(dateOfBirth);\n  const today = new Date();\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n    age--;\n  }\n  return Math.max(0, age);\n}\nfunction getResidenceID(country) {\n  // Map countries to Terracotta Residence IDs\n  // Based on Terracotta API - Greece is ResidenceID 24\n  const residenceMap = {\n    'Greece': '24',\n    // Correct ResidenceID for Greece\n    'Austria': '4',\n    'Belgium': '6',\n    'Bulgaria': '10',\n    'Croatia (Hrvatska)': '14',\n    'Czech Republic': '16',\n    'Denmark': '17',\n    'Estonia': '20',\n    'Finland': '21',\n    'France': '22',\n    'Germany': '23',\n    'Hungary': '27',\n    'Iceland': '28',\n    'Italy': '33',\n    'Latvia': '38',\n    'Liechtenstein': '40',\n    'Lithuania': '41',\n    'Luxembourg': '42',\n    'Malta': '93',\n    'Netherlands': '47',\n    'Norway': '49',\n    'Poland': '53',\n    'Portugal': '54',\n    'Republic of Cyprus': '283',\n    'Republic of Ireland': '19',\n    'Romania': '55',\n    'Slovak Republic': '59',\n    'Slovenia': '60',\n    'Spain': '62',\n    'Sweden': '63'\n  };\n  return residenceMap[country] || '24'; // Default to Greece\n}\nfunction getTypePolicyID(tripType) {\n  // Use the correct TypePolicyIDs from your account\n  // Schema 683: TypePolicyID 2 (Single Trip)\n  // Schema 717: TypePolicyID 2 (Single Trip), 23 (Annual Multi-Trip), 3 (Longstay)\n  const policyMap = {\n    'single': '2',\n    // Single Trip TypePolicyID\n    'annual': '23',\n    // Annual Multi-Trip TypePolicyID\n    'longstay': '3',\n    // Longstay TypePolicyID\n    'comprehensive': '2' // Use Single Trip as default\n  };\n  return policyMap[tripType] || '2'; // Default to Single Trip TypePolicyID\n}\nfunction getTypePackageID(tripType) {\n  // Use correct Package IDs (not SchemaIDs)\n  // Package IDs are typically 1, 2, 3, etc. for different coverage levels\n  const packageMap = {\n    'single': '1',\n    // Basic package for single trip\n    'annual': '1',\n    // Basic package for annual\n    'comprehensive': '2' // Higher coverage package\n  };\n  return packageMap[tripType] || '1'; // Default to basic package\n}\nfunction getAgebandID(age) {\n  // Map age to Terracotta Ageband ID\n  if (age <= 17) return 1;\n  if (age <= 30) return 2;\n  if (age <= 40) return 3;\n  if (age <= 50) return 4;\n  if (age <= 60) return 5;\n  if (age <= 70) return 6;\n  return 7; // 70+\n}\nfunction getTitleID(title) {\n  // Map title to Terracotta Title ID\n  const titleMap = {\n    'Mr': 1,\n    'Mrs': 2,\n    'Miss': 3,\n    'Ms': 4,\n    'Dr': 5,\n    'Prof': 6\n  };\n  return titleMap[title] || 1; // Default to Mr\n}\nfunction getCurrencyID(currency) {\n  // Map currency to Terracotta Currency ID\n  const currencyMap = {\n    'EUR': 1,\n    'USD': 2,\n    'GBP': 3,\n    'CHF': 4\n  };\n  return currencyMap[currency] || 1; // Default to EUR\n}\nexport default TerracottaService;","map":{"version":3,"names":["DOMParser","TERRACOTTA_BASE_URL","PROXY_BASE_URL","TERRACOTTA_USER_ID","TERRACOTTA_USER_CODE","formatCurrencyLimit","htmlString","textarea","document","createElement","innerHTML","decoded","value","replace","match","currency","number","formattedNumber","parseInt","toLocaleString","SOAPBuilder","createEnvelope","body","buildTravelerXML","traveler","TravellerNumber","Title","FirstName","LastName","DateOfBirth","Age","AgebandID","TitleID","minAge","maxAge","AlterationID","msPrice","msPriceExcIPT","msConditions","buildContactDetailsXML","contact","Address","Postcode","Email","Telephone","VehicleMakeModel","VehicleLicensePlate","VehicleYearManufacture","buildQuoteDetailsXML","details","travelersXML","Travellers","map","join","contactXML","ContactDetails","ResidenceID","TypePolicyID","TypePackageID","Destination","StartDate","EndDate","includeAnnualQuotes","undefined","includeUpsell","currencyID","schemaIDFilter","buildScreeningAnswersXML","answers","answer","questionNumber","buildEligibilityAnswersXML","buildDynamicDetailsXML","detail","Position","FieldName","FieldValue","FieldSize","buildSpecificQuoteDetailsXML","dynamicDetailsXML","DynamicDetails","screeningAnswersXML","screeningQuestionAnswers","eligibilityAnswersXML","EligibilityQuestionAnswers","XMLParser","getXMLParser","window","XMDOMParser","parseQuoteResponse","xmlText","_xmlDoc$querySelector","parser","xmlDoc","parseFromString","parseError","querySelector","Error","textContent","message","quoteResults","quoteResultNodes","querySelectorAll","forEach","node","_node$querySelector","_node$querySelector2","_node$querySelector3","_node$querySelector4","_node$querySelector5","_node$querySelector6","_node$querySelector7","_node$querySelector8","_node$querySelector9","_node$querySelector0","_node$querySelector1","_node$querySelector10","_node$querySelector11","_node$querySelector12","_node$querySelector13","_node$querySelector14","_node$querySelector15","_node$querySelector16","_node$querySelector17","_node$querySelector18","_node$querySelector19","_node$querySelector20","_node$querySelector21","_node$querySelector22","_node$querySelector23","_node$querySelector24","_node$querySelector25","_node$querySelector26","_node$querySelector27","_node$querySelector28","_node$querySelector29","_node$querySelector30","_node$querySelector31","_node$querySelector32","_node$querySelector33","_node$querySelector34","_node$querySelector35","_node$querySelector36","_node$querySelector37","_node$querySelector38","_node$querySelector39","_node$querySelector40","_node$querySelector41","_node$querySelector42","_node$querySelector43","_node$querySelector44","quoteID","result","QuoteID","schemaName","policytypeName","residenceName","destinationName","startDate","endDate","SI","PW","KF","HelpFile","IPT","parseFloat","IPTRate","GrossPrice","screeningPremium","IconURL","SchemaID","PolicyTypeID","DestinationID","PackageID","MaxAgeAgebandID","ScreeningID","groupPerProduct","priceOrder","IPID","typePolicyName","typePackageName","currencyHTMLEncoded","packageName","isAnnual","isBestBuy","maxDaysPerTrip","isBestBuyText","isBestBuyLocation","numberToSort","coverLevel","Discount","netUW","wbComm","agentComm","screeningPremiumPerPersonCSV","screeningPremiumExcIPTPerPersonCSV","isNotCoveredPerPersonCSV","policytypeShortName","SummaryCovers","summaryCoversNode","summaryCoverNodes","summaryCovers","coverNode","_coverNode$querySelec","_coverNode$querySelec2","_coverNode$querySelec3","_coverNode$querySelec4","rawLimit","rawExcess","push","name","Limit","Excess","position","Message","error","console","parseScreeningQuestionsResponse","_xmlDoc$querySelector2","screeningQuestions","questionNodes","_node$querySelector45","_node$querySelector46","_node$querySelector47","_node$querySelector48","_node$querySelector49","_node$querySelector50","_node$querySelector51","_node$querySelector52","question","yesMessage","noMessage","yesAction","noAction","yesActionText","noActionText","parseSavePolicyResponse","_xmlDoc$querySelector3","_xmlDoc$querySelector4","_xmlDoc$querySelector5","_xmlDoc$querySelector6","_xmlDoc$querySelector7","_xmlDoc$querySelector8","policySaved","policyID","certificate","parseProductListResponse","_xmlDoc$querySelector9","_xmlDoc$querySelector0","resultID","schemas","schemaNodes","_node$querySelector53","_node$querySelector54","schema","SchemaName","ResultID","Schemas","parsePolicyTypeResponse","_xmlDoc$querySelector1","_xmlDoc$querySelector10","policyTypes","policyTypeNodes","_node$querySelector55","_node$querySelector56","_node$querySelector57","policyType","TypePolicyName","Description","PolicyTypes","parsePolicyTypeDestinationResponse","_xmlDoc$querySelector11","_xmlDoc$querySelector12","policyTypeDestinations","destinationNodes","_node$querySelector58","_node$querySelector59","_node$querySelector60","destination","TypePolicyDestinationID","Name","PolicyTypeDestinations","TerracottaService","constructor","userID","userCode","getInstance","instance","makeSOAPRequest","method","requestBody","soapEnvelope","log","response","fetch","headers","status","statusText","responseText","text","ok","testConnection","soapBody","getUserProductTypePolicy","schemaId","getUserProductDestination","getUserProductList","provideQuotation","request","quoteDetailsXML","quoteDetails","length","substring","parsedResponse","String","getScreeningQuestions","provideQuotationWithAlterations","specificQuoteDetailsXML","specificQuoteDetails","savePolicyDetails","medicalScreeningReference","convertToTerracottaFormat","formData","_formData$billingAddr","_formData$contactAddr","_formData$billingAddr2","_formData$contactAddr2","_formData$travelers$","_formData$travelers$2","travelers","index","dateOfBirth","calculateDateOfBirth","age","calculatedAge","calculateAgeFromDateOfBirth","title","firstName","lastName","formatDateForTerracotta","getAgebandID","getTitleID","ScreeningInformation","contactDetails","billingAddress","street","contactAddress","postalCode","email","contactEmail","phone","contactPhone","vehicleMakeModel","vehicleLicensePlate","vehicleYearManufacture","getResidenceID","countryOfResidence","getTypePolicyID","tripType","_TerracottaService","dateString","includes","parts","split","day","month","year","currentYear","Date","getFullYear","birthYear","birthDate","today","monthDiff","getMonth","getDate","Math","max","country","residenceMap","policyMap","getTypePackageID","packageMap","titleMap","getCurrencyID","currencyMap"],"sources":["C:/Users/laptop-123/TravelInsurance_Demo_2/src/services/terracottaService.ts"],"sourcesContent":["/**\n * Terracotta Insurance Quote Integration Service\n * \n * This service handles all communication with the Terracotta Integrated Quote web service\n * using SOAP protocol. It provides methods for:\n * - Requesting quotes (ProvideQuotation)\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\n * - Getting screening questions (ScreeningQuestions)\n * - Saving policy details (SavePolicyDetails)\n */\n\n// Import xmldom for Node.js XML parsing\nlet DOMParser: any;\n\n// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL = 'https://www.asuaonline.com/ws/integratedquote.asmx';\nconst PROXY_BASE_URL = 'http://localhost:3001/api/terracotta';\nconst TERRACOTTA_USER_ID = '4072';\nconst TERRACOTTA_USER_CODE = '111427';\n\n// TypeScript interfaces for Terracotta API data structures\n\nexport interface TerracottaPolicyType {\n  TypePolicyID: string;\n  TypePolicyName: string;\n  Description?: string;\n}\n\nexport interface TerracottaPolicyTypeDestination {\n  TypePolicyDestinationID: string;\n  Name: string;\n  PolicyTypeID?: string;\n}\n\nexport interface TerracottaPolicyTypeDestinationResponse {\n  Message: string;\n  ResultID: number;\n  PolicyTypeDestinations: TerracottaPolicyTypeDestination[];\n}\n\nexport interface TerracottaPolicyTypeResponse {\n  Message: string;\n  ResultID: number;\n  PolicyTypes: TerracottaPolicyType[];\n}\n\nexport interface TerracottaTraveler {\n  TravellerNumber: number;\n  Title: string;\n  FirstName: string;\n  LastName: string;\n  DateOfBirth: string; // Format: YYYY/MM/DD\n  Age: number;\n  AgebandID?: number;\n  TitleID?: number;\n  minAge?: number;\n  maxAge?: number;\n  AlterationID?: string;\n  msPrice?: number;\n  msPriceExcIPT?: number;\n  msConditions?: string;\n  ScreeningInformation?: any;\n}\n\nexport interface TerracottaContactDetails {\n  Address: string;\n  Postcode: string;\n  Email: string;\n  Telephone: string;\n  VehicleMakeModel?: string;\n  VehicleLicensePlate?: string;\n  VehicleYearManufacture?: string;\n}\n\nexport interface TerracottaQuoteDetails {\n  ResidenceID: string;\n  TypePolicyID: string; // Comma-separated list of policy type IDs\n  TypePackageID: string;\n  Destination: string;\n  StartDate: string; // Format: YYYY/MM/DD\n  EndDate: string; // Format: YYYY/MM/DD\n  Travellers: TerracottaTraveler[];\n  ContactDetails: TerracottaContactDetails;\n  includeAnnualQuotes?: number;\n  includeUpsell?: number;\n  alterionGenericID?: string;\n  voucherCode?: string;\n  isCYTI?: boolean;\n  currencyID?: number;\n  groupPerProduct?: boolean;\n  priceOrder?: number;\n  schemaIDFilter?: string;\n  useCoverLevelUpsell?: boolean;\n  sellOnBehalfOf?: number;\n  customerUniqueID?: number;\n  quoteVisitAuditID?: number;\n}\n\nexport interface TerracottaQuoteRequest {\n  userID: string;\n  userCode: string;\n  quoteDetails: TerracottaQuoteDetails;\n}\n\nexport interface TerracottaDynamicDetail {\n  Position: number;\n  FieldName: string;\n  FieldValue: string;\n  FieldSize: number;\n}\n\nexport interface TerracottaEligibilityQuestionAnswer {\n  questionNumber: number;\n  answer: 'yes' | 'no';\n}\n\nexport interface TerracottaQuoteWithAlterationsRequest {\n  userID: string;\n  userCode: string;\n  quoteID: string; // Note: lowercase 'q' as per documentation\n  specificQuoteDetails: {\n    AlterationID: string; // Comma-separated list of alteration IDs\n    Travellers: TerracottaTraveler[];\n    ContactDetails: TerracottaContactDetails;\n    DynamicDetails?: TerracottaDynamicDetail[];\n    screeningQuestionAnswers?: TerracottaScreeningQuestionAnswer[];\n    EligibilityQuestionAnswers?: TerracottaEligibilityQuestionAnswer[];\n  };\n}\n\nexport interface SummaryCover {\n  name: string;\n  Limit: string;\n  Excess: string;\n  position?: number;\n}\n\nexport interface TerracottaQuoteResult {\n  QuoteID: string;\n  schemaName: string;\n  policytypeName: string;\n  residenceName: string;\n  destinationName: string;\n  startDate: string;\n  endDate: string;\n  SI: string; // Summary of cover PDF URL\n  PW: string; // Policy wording PDF URL\n  KF: string;\n  HelpFile: string;\n  currency: string;\n  IPT: number; // IPT amount\n  IPTRate: number;\n  GrossPrice: number; // Quote price\n  screeningPremium: number;\n  IconURL: string;\n  SchemaID: number;\n  PolicyTypeID: number;\n  DestinationID: number;\n  PackageID: number;\n  MaxAgeAgebandID: number;\n  ScreeningID: number;\n  groupPerProduct: boolean;\n  priceOrder: number;\n  IPID: string;\n  typePolicyName: string;\n  typePackageName: string;\n  currencyHTMLEncoded: string;\n  AlterationID: string;\n  packageName: string;\n  isAnnual: number;\n  isBestBuy: number;\n  maxDaysPerTrip: number;\n  isBestBuyText: string;\n  isBestBuyLocation: number;\n  numberToSort: number;\n  coverLevel: number;\n  Discount: number;\n  netUW: number;\n  wbComm: number;\n  agentComm: number;\n  screeningPremiumPerPersonCSV: string;\n  screeningPremiumExcIPTPerPersonCSV: string;\n  isNotCoveredPerPersonCSV: string;\n  policytypeShortName: string;\n  SummaryCovers?: SummaryCover[];\n}\n\nexport interface TerracottaQuoteResponse {\n  Message: string;\n  quoteResults: TerracottaQuoteResult[];\n}\n\nexport interface TerracottaScreeningQuestionAnswer {\n  questionNumber: number;\n  answer: 'yes' | 'no';\n}\n\nexport interface TerracottaSavePolicyRequest {\n  userID: string;\n  userCode: string;\n  quoteID: string;\n  screeningQuestionAnswers: TerracottaScreeningQuestionAnswer[];\n  medicalScreeningReference?: string;\n}\n\nexport interface TerracottaSavePolicyResponse {\n  Message: string;\n  policySaved: 'Yes' | 'No';\n  policyID: string;\n  certificate: string; // URL for policy certificate\n  PW: string; // Policy wording PDF URL\n  SI: string; // Summary of cover PDF URL\n}\n\nexport interface TerracottaScreeningQuestion {\n  questionNumber: number;\n  question: string;\n  yesMessage: string;\n  noMessage: string;\n  yesAction: string;\n  noAction: string;\n  yesActionText: string;\n  noActionText: string;\n}\n\nexport interface TerracottaScreeningQuestionsResponse {\n  Message: string;\n  screeningQuestions: TerracottaScreeningQuestion[];\n}\n\nexport interface TerracottaProduct {\n  SchemaID: number;\n  SchemaName: string;\n}\n\nexport interface TerracottaProductListResponse {\n  Message: string;\n  ResultID: number;\n  Schemas: TerracottaProduct[];\n}\n\n/**\n * Helper function to decode HTML entities and format currency\n */\nfunction formatCurrencyLimit(htmlString: string): string {\n  if (!htmlString) return '';\n  \n  // Decode HTML entities\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = htmlString;\n  let decoded = textarea.value;\n  \n  // Additional manual replacements for common entities\n  decoded = decoded\n    .replace(/&euro;/gi, '€')\n    .replace(/&pound;/gi, '£')\n    .replace(/&dollar;/gi, '$')\n    .replace(/&amp;/gi, '&')\n    .replace(/&lt;/gi, '<')\n    .replace(/&gt;/gi, '>')\n    .replace(/&quot;/gi, '\"')\n    .replace(/&#39;/gi, \"'\");\n  \n  // Format numbers with thousand separators\n  // Match patterns like €32000 or euro32000 and add commas\n  decoded = decoded.replace(/([€£$]|euro|pound|dollar)?\\s*(\\d{4,})/gi, (match, currency, number) => {\n    const formattedNumber = parseInt(number).toLocaleString('en-US');\n    return currency ? `${currency}${formattedNumber}` : formattedNumber;\n  });\n  \n  // Fix spacing: \"Up to€32,000\" -> \"Up to €32,000\"\n  decoded = decoded.replace(/(\\w)([€£$])/g, '$1 $2');\n  \n  return decoded;\n}\n\n/**\n * SOAP XML Builder utility functions\n */\nclass SOAPBuilder {\n  static createEnvelope(body: string): string {\n    return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    ${body}\n  </soap:Body>\n</soap:Envelope>`;\n  }\n\n  static buildTravelerXML(traveler: TerracottaTraveler): string {\n    return `\n      <Traveller>\n        <TravellerNumber>${traveler.TravellerNumber}</TravellerNumber>\n        <Title>${traveler.Title}</Title>\n        <FirstName>${traveler.FirstName}</FirstName>\n        <LastName>${traveler.LastName}</LastName>\n        <DateOfBirth>${traveler.DateOfBirth}</DateOfBirth>\n        <Age>${traveler.Age}</Age>\n        <AgebandID>${traveler.AgebandID || 0}</AgebandID>\n        <TitleID>${traveler.TitleID || 0}</TitleID>\n        <minAge>${traveler.minAge || traveler.Age}</minAge>\n        <maxAge>${traveler.maxAge || traveler.Age}</maxAge>\n        <AlterationID>${traveler.AlterationID || ''}</AlterationID>\n        <msPrice>${traveler.msPrice || 0}</msPrice>\n        <msPriceExcIPT>${traveler.msPriceExcIPT || 0}</msPriceExcIPT>\n        <msConditions>${traveler.msConditions || ''}</msConditions>\n        <ScreeningInformation xsi:nil=\"true\" />\n      </Traveller>`;\n  }\n\n  static buildContactDetailsXML(contact: TerracottaContactDetails): string {\n    return `\n      <ContactDetails>\n        <Address>${contact.Address}</Address>\n        <Postcode>${contact.Postcode}</Postcode>\n        <Email>${contact.Email}</Email>\n        <Telephone>${contact.Telephone}</Telephone>\n        ${contact.VehicleMakeModel ? `<VehicleMakeModel>${contact.VehicleMakeModel}</VehicleMakeModel>` : ''}\n        ${contact.VehicleLicensePlate ? `<VehicleLicensePlate>${contact.VehicleLicensePlate}</VehicleLicensePlate>` : ''}\n        ${contact.VehicleYearManufacture ? `<VehicleYearManufacture>${contact.VehicleYearManufacture}</VehicleYearManufacture>` : ''}\n      </ContactDetails>`;\n  }\n\n  static buildQuoteDetailsXML(details: TerracottaQuoteDetails): string {\n    const travelersXML = details.Travellers.map(traveler => \n      this.buildTravelerXML(traveler)\n    ).join('');\n\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n\n    return `\n      <quoteDetails>\n        <ResidenceID>${parseInt(details.ResidenceID) || 1}</ResidenceID>\n        <TypePolicyID>${details.TypePolicyID}</TypePolicyID>\n        <TypePackageID>${parseInt(details.TypePackageID) || 1}</TypePackageID>\n        <Destination>${details.Destination}</Destination>\n        <StartDate>${details.StartDate}</StartDate>\n        <EndDate>${details.EndDate}</EndDate>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${details.includeAnnualQuotes !== undefined ? `<includeAnnualQuotes>${details.includeAnnualQuotes}</includeAnnualQuotes>` : ''}\n        ${details.includeUpsell !== undefined ? `<includeUpsell>${details.includeUpsell}</includeUpsell>` : ''}\n        ${details.currencyID ? `<currencyID>${details.currencyID}</currencyID>` : ''}\n        ${details.schemaIDFilter ? `<schemaIDFilter>${details.schemaIDFilter}</schemaIDFilter>` : ''}\n      </quoteDetails>`;\n  }\n\n  static buildScreeningAnswersXML(answers: TerracottaScreeningQuestionAnswer[]): string {\n    return '<screeningQuestionAnswers>' + \n      answers.map(answer => `\n        <screeningQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </screeningQuestionAnswer>`\n      ).join('') + '</screeningQuestionAnswers>';\n  }\n\n  static buildEligibilityAnswersXML(answers: TerracottaEligibilityQuestionAnswer[]): string {\n    return '<EligibilityQuestionAnswers>' + \n      answers.map(answer => `\n        <eligibilityQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </eligibilityQuestionAnswer>`\n      ).join('') + '</EligibilityQuestionAnswers>';\n  }\n\n  static buildDynamicDetailsXML(details: TerracottaDynamicDetail[]): string {\n    return '<DynamicDetails>' + \n      details.map(detail => `\n        <DynamicDetail_SavedValue>\n          <Position>${detail.Position}</Position>\n          <FieldName>${detail.FieldName}</FieldName>\n          <FieldValue>${detail.FieldValue}</FieldValue>\n          <FieldSize>${detail.FieldSize}</FieldSize>\n        </DynamicDetail_SavedValue>`\n      ).join('') + '</DynamicDetails>';\n  }\n\n  static buildSpecificQuoteDetailsXML(details: any): string {\n    const travelersXML = details.Travellers.map((traveler: TerracottaTraveler) => \n      this.buildTravelerXML(traveler)\n    ).join('');\n\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    \n    const dynamicDetailsXML = details.DynamicDetails ? \n      this.buildDynamicDetailsXML(details.DynamicDetails) : '';\n    \n    const screeningAnswersXML = details.screeningQuestionAnswers ? \n      this.buildScreeningAnswersXML(details.screeningQuestionAnswers) : '';\n    \n    const eligibilityAnswersXML = details.EligibilityQuestionAnswers ? \n      this.buildEligibilityAnswersXML(details.EligibilityQuestionAnswers) : '';\n\n    return `\n      <specificQuoteDetails>\n        <AlterationID>${details.AlterationID}</AlterationID>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${dynamicDetailsXML}\n        ${screeningAnswersXML}\n        ${eligibilityAnswersXML}\n      </specificQuoteDetails>`;\n  }\n}\n\n/**\n * XML Parser utility functions\n */\nclass XMLParser {\n  static async getXMLParser(): Promise<any> {\n    if (typeof window !== 'undefined') {\n      // Browser environment\n      return new window.DOMParser();\n    } else {\n      // Node.js environment - use dynamic import\n      const { DOMParser: XMDOMParser } = await import('xmldom');\n      return new XMDOMParser();\n    }\n  }\n\n\n  static async parseQuoteResponse(xmlText: string): Promise<TerracottaQuoteResponse> {\n    try {\n      // Use a simple XML parser for Node.js environment\n      const parser = await this.getXMLParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      // Check for parsing errors\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const quoteResults: TerracottaQuoteResult[] = [];\n\n      // Select only child quoteResults, not the parent container\n      const quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationResult > quoteResults > quoteResults');\n      quoteResultNodes.forEach((node: any) => {\n        // Only process nodes that have QuoteID (skip empty parent nodes)\n        const quoteID = node.querySelector('QuoteID')?.textContent || '';\n        if (!quoteID) return; // Skip empty nodes\n        \n        const result: TerracottaQuoteResult = {\n          QuoteID: quoteID,\n          schemaName: node.querySelector('schemaName')?.textContent || '',\n          policytypeName: node.querySelector('policytypeName')?.textContent || '',\n          residenceName: node.querySelector('residenceName')?.textContent || '',\n          destinationName: node.querySelector('destinationName')?.textContent || '',\n          startDate: node.querySelector('startDate')?.textContent || '',\n          endDate: node.querySelector('endDate')?.textContent || '',\n          SI: node.querySelector('SI')?.textContent || '',\n          PW: node.querySelector('PW')?.textContent || '',\n          KF: node.querySelector('KF')?.textContent || '',\n          HelpFile: node.querySelector('HelpFile')?.textContent || '',\n          currency: node.querySelector('currency')?.textContent || '',\n          IPT: parseFloat(node.querySelector('IPT')?.textContent || '0'),\n          IPTRate: parseFloat(node.querySelector('IPTRate')?.textContent || '0'),\n          GrossPrice: parseFloat(node.querySelector('GrossPrice')?.textContent || '0'),\n          screeningPremium: parseFloat(node.querySelector('screeningPremium')?.textContent || '0'),\n          IconURL: node.querySelector('IconURL')?.textContent || '',\n          SchemaID: parseInt(node.querySelector('SchemaID')?.textContent || '0'),\n          PolicyTypeID: parseInt(node.querySelector('PolicyTypeID')?.textContent || '0'),\n          DestinationID: parseInt(node.querySelector('DestinationID')?.textContent || '0'),\n          PackageID: parseInt(node.querySelector('PackageID')?.textContent || '0'),\n          MaxAgeAgebandID: parseInt(node.querySelector('MaxAgeAgebandID')?.textContent || '0'),\n          ScreeningID: parseInt(node.querySelector('ScreeningID')?.textContent || '0'),\n          groupPerProduct: node.querySelector('groupPerProduct')?.textContent === 'true',\n          priceOrder: parseInt(node.querySelector('priceOrder')?.textContent || '0'),\n          IPID: node.querySelector('IPID')?.textContent || '',\n          typePolicyName: node.querySelector('typePolicyName')?.textContent || '',\n          typePackageName: node.querySelector('typePackageName')?.textContent || '',\n          currencyHTMLEncoded: node.querySelector('currencyHTMLEncoded')?.textContent || '',\n          AlterationID: node.querySelector('AlterationID')?.textContent || '',\n          packageName: node.querySelector('packageName')?.textContent || '',\n          isAnnual: parseInt(node.querySelector('isAnnual')?.textContent || '0'),\n          isBestBuy: parseInt(node.querySelector('isBestBuy')?.textContent || '0'),\n          maxDaysPerTrip: parseInt(node.querySelector('maxDaysPerTrip')?.textContent || '0'),\n          isBestBuyText: node.querySelector('isBestBuyText')?.textContent || '',\n          isBestBuyLocation: parseInt(node.querySelector('isBestBuyLocation')?.textContent || '0'),\n          numberToSort: parseFloat(node.querySelector('numberToSort')?.textContent || '0'),\n          coverLevel: parseInt(node.querySelector('coverLevel')?.textContent || '0'),\n          Discount: parseFloat(node.querySelector('Discount')?.textContent || '0'),\n          netUW: parseFloat(node.querySelector('netUW')?.textContent || '0'),\n          wbComm: parseFloat(node.querySelector('wbComm')?.textContent || '0'),\n          agentComm: parseFloat(node.querySelector('agentComm')?.textContent || '0'),\n          screeningPremiumPerPersonCSV: node.querySelector('screeningPremiumPerPersonCSV')?.textContent || '',\n          screeningPremiumExcIPTPerPersonCSV: node.querySelector('screeningPremiumExcIPTPerPersonCSV')?.textContent || '',\n          isNotCoveredPerPersonCSV: node.querySelector('isNotCoveredPerPersonCSV')?.textContent || '',\n          policytypeShortName: node.querySelector('policytypeShortName')?.textContent || '',\n          SummaryCovers: []\n        };\n        \n        // Parse SummaryCovers\n        const summaryCoversNode = node.querySelector('SummaryCovers');\n        if (summaryCoversNode) {\n          const summaryCoverNodes = summaryCoversNode.querySelectorAll('summaryCover');\n          const summaryCovers: SummaryCover[] = [];\n          summaryCoverNodes.forEach((coverNode: any) => {\n            const rawLimit = coverNode.querySelector('Limit')?.textContent || '';\n            const rawExcess = coverNode.querySelector('Excess')?.textContent || '';\n            \n            summaryCovers.push({\n              name: coverNode.querySelector('name')?.textContent || '',\n              Limit: formatCurrencyLimit(rawLimit),\n              Excess: formatCurrencyLimit(rawExcess),\n              position: parseInt(coverNode.querySelector('position')?.textContent || '0')\n            });\n          });\n          result.SummaryCovers = summaryCovers;\n        }\n        \n        quoteResults.push(result);\n      });\n\n      return { Message: message, quoteResults };\n    } catch (error) {\n      console.error('Error parsing quote response:', error);\n      throw new Error(`Failed to parse quote response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseScreeningQuestionsResponse(xmlText: string): TerracottaScreeningQuestionsResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('Message')?.textContent || '';\n      const screeningQuestions: TerracottaScreeningQuestion[] = [];\n\n      const questionNodes = xmlDoc.querySelectorAll('screeningQuestion');\n      questionNodes.forEach((node: any) => {\n        const question: TerracottaScreeningQuestion = {\n          questionNumber: parseInt(node.querySelector('questionNumber')?.textContent || '0'),\n          question: node.querySelector('question')?.textContent || '',\n          yesMessage: node.querySelector('yesMessage')?.textContent || '',\n          noMessage: node.querySelector('noMessage')?.textContent || '',\n          yesAction: node.querySelector('yesAction')?.textContent || '',\n          noAction: node.querySelector('noAction')?.textContent || '',\n          yesActionText: node.querySelector('yesActionText')?.textContent || '',\n          noActionText: node.querySelector('noActionText')?.textContent || ''\n        };\n        screeningQuestions.push(question);\n      });\n\n      return { Message: message, screeningQuestions };\n    } catch (error) {\n      console.error('Error parsing screening questions response:', error);\n      throw new Error(`Failed to parse screening questions response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseSavePolicyResponse(xmlText: string): TerracottaSavePolicyResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      return {\n        Message: xmlDoc.querySelector('Message')?.textContent || '',\n        policySaved: xmlDoc.querySelector('policySaved')?.textContent as 'Yes' | 'No' || 'No',\n        policyID: xmlDoc.querySelector('policyID')?.textContent || '',\n        certificate: xmlDoc.querySelector('certificate')?.textContent || '',\n        PW: xmlDoc.querySelector('PW')?.textContent || '',\n        SI: xmlDoc.querySelector('SI')?.textContent || ''\n      };\n    } catch (error) {\n      console.error('Error parsing save policy response:', error);\n      throw new Error(`Failed to parse save policy response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseProductListResponse(xmlText: string): TerracottaProductListResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const schemas: TerracottaProduct[] = [];\n\n      const schemaNodes = xmlDoc.querySelectorAll('Schema');\n      schemaNodes.forEach(node => {\n        const schema: TerracottaProduct = {\n          SchemaID: parseInt(node.querySelector('SchemaID')?.textContent || '0'),\n          SchemaName: node.querySelector('SchemaName')?.textContent || ''\n        };\n        schemas.push(schema);\n      });\n\n      return { Message: message, ResultID: resultID, Schemas: schemas };\n    } catch (error) {\n      console.error('Error parsing product list response:', error);\n      throw new Error(`Failed to parse product list response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parsePolicyTypeResponse(xmlText: string): TerracottaPolicyTypeResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const policyTypes: TerracottaPolicyType[] = [];\n\n      const policyTypeNodes = xmlDoc.querySelectorAll('TypePolicy');\n      policyTypeNodes.forEach(node => {\n        const policyType: TerracottaPolicyType = {\n          TypePolicyID: node.querySelector('TypePolicyID')?.textContent || '',\n          TypePolicyName: node.querySelector('Name')?.textContent || '', // Changed from TypePolicyName to Name\n          Description: node.querySelector('IsAnnual')?.textContent === '1' ? 'Annual Policy' : 'Single Trip Policy'\n        };\n        policyTypes.push(policyType);\n      });\n\n      return { Message: message, ResultID: resultID, PolicyTypes: policyTypes };\n    } catch (error) {\n      console.error('Error parsing policy type response:', error);\n      throw new Error(`Failed to parse policy type response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parsePolicyTypeDestinationResponse(xmlText: string): TerracottaPolicyTypeDestinationResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const policyTypeDestinations: TerracottaPolicyTypeDestination[] = [];\n\n      const destinationNodes = xmlDoc.querySelectorAll('PolicyTypeDestination');\n      destinationNodes.forEach(node => {\n        const destination: TerracottaPolicyTypeDestination = {\n          TypePolicyDestinationID: node.querySelector('TypePolicyDestinationID')?.textContent || '',\n          Name: node.querySelector('Name')?.textContent || '',\n          PolicyTypeID: node.querySelector('PolicyTypeID')?.textContent || ''\n        };\n        policyTypeDestinations.push(destination);\n      });\n\n      return { Message: message, ResultID: resultID, PolicyTypeDestinations: policyTypeDestinations };\n    } catch (error) {\n      console.error('Error parsing policy type destination response:', error);\n      throw new Error(`Failed to parse policy type destination response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Main Terracotta Service Class\n */\nexport class TerracottaService {\n  private static instance: TerracottaService;\n  private userID: string;\n  private userCode: string;\n\n  constructor(userID: string = TERRACOTTA_USER_ID, userCode: string = TERRACOTTA_USER_CODE) {\n    this.userID = userID;\n    this.userCode = userCode;\n  }\n\n  static getInstance(userID?: string, userCode?: string): TerracottaService {\n    if (!TerracottaService.instance) {\n      TerracottaService.instance = new TerracottaService(\n        userID || TERRACOTTA_USER_ID, \n        userCode || TERRACOTTA_USER_CODE\n      );\n    }\n    return TerracottaService.instance;\n  }\n\n  /**\n   * Generic SOAP request method\n   */\n  private async makeSOAPRequest(method: string, requestBody: string): Promise<string> {\n    const soapEnvelope = SOAPBuilder.createEnvelope(requestBody);\n    \n    console.log('Making SOAP request via proxy to:', `${PROXY_BASE_URL}/${method}`);\n    console.log('SOAP Envelope:', soapEnvelope);\n    \n    try {\n      const response = await fetch(`${PROXY_BASE_URL}/${method}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/xml; charset=utf-8'\n        },\n        body: soapEnvelope\n      });\n\n      console.log('SOAP Response Status:', response.status, response.statusText);\n      const responseText = await response.text();\n      console.log('SOAP Response Body:', responseText);\n\n      if (!response.ok) {\n        throw new Error(`SOAP request failed: ${response.status} ${response.statusText}`);\n      }\n\n      return responseText;\n    } catch (error) {\n      console.error('Proxy request failed:', error);\n      throw new Error(`Failed to connect to Terracotta API via proxy: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Test connection with HelloWorld method\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const soapBody = `\n        <HelloWorld xmlns=\"WS-IntegratedQuote\">\n        </HelloWorld>`;\n\n      const responseText = await this.makeSOAPRequest('HelloWorld', soapBody);\n      console.log('Connection test successful:', responseText);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get available policy types for a specific schema\n   */\n  async getUserProductTypePolicy(schemaId: string): Promise<TerracottaPolicyTypeResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductTypePolicy - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      \n      const soapBody = `\n        <GetUserProductTypePolicy xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductTypePolicy>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductTypePolicy', soapBody);\n      return XMLParser.parsePolicyTypeResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductTypePolicy:', error);\n      throw new Error(`Failed to get policy types: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available destinations for a specific schema\n   */\n  async getUserProductDestination(schemaId: string): Promise<TerracottaPolicyTypeDestinationResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductDestination - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      \n      const soapBody = `\n        <GetUserProductDestination xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductDestination>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductDestination', soapBody);\n      return XMLParser.parsePolicyTypeDestinationResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductDestination:', error);\n      throw new Error(`Failed to get policy type destinations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available products for the user\n   */\n  async getUserProductList(): Promise<TerracottaProductListResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductList - userID:', userID, 'userCode:', userCode);\n      console.log('getUserProductList - this.userID:', this.userID, 'this.userCode:', this.userCode);\n      \n      const soapBody = `\n        <GetUserProductList xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n        </GetUserProductList>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductList', soapBody);\n      return XMLParser.parseProductListResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductList:', error);\n      throw new Error(`Failed to get user product list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 1. Request for quotations\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\n   */\n  async provideQuotation(request: TerracottaQuoteRequest): Promise<TerracottaQuoteResponse> {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotation...');\n      console.log('📦 Request object:', request);\n      \n      const quoteDetailsXML = SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);\n      console.log('📄 Quote Details XML:', quoteDetailsXML);\n      \n      const soapBody = `\n        <ProvideQuotation xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          ${quoteDetailsXML}\n        </ProvideQuotation>`;\n\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotation`);\n      \n      const responseText = await this.makeSOAPRequest('ProvideQuotation', soapBody);\n      \n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      \n      const parsedResponse = await XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotation:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Obtain Screening Questions\n   * Calls ScreeningQuestions to get screening questions for the selected quote\n   */\n  async getScreeningQuestions(quoteID: string): Promise<TerracottaScreeningQuestionsResponse> {\n    try {\n      const soapBody = `\n        <ScreeningQuestions xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID)}</userID>\n          <userCode>${parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE)}</userCode>\n          <quoteID>${quoteID}</quoteID>\n        </ScreeningQuestions>`;\n\n      const responseText = await this.makeSOAPRequest('ScreeningQuestions', soapBody);\n      return XMLParser.parseScreeningQuestionsResponse(responseText);\n    } catch (error) {\n      console.error('Error in getScreeningQuestions:', error);\n      throw new Error(`Failed to get screening questions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 2. Update quotes with additional covers\n   * Calls ProvideQuotationWithAlterations to get quotes with specific alterations/add-ons\n   * This method can only be called AFTER obtaining a quote reference from ProvideQuotation\n   */\n  async provideQuotationWithAlterations(request: TerracottaQuoteWithAlterationsRequest): Promise<TerracottaQuoteResponse> {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotationWithAlterations...');\n      console.log('📦 Request object:', request);\n      \n      const specificQuoteDetailsXML = SOAPBuilder.buildSpecificQuoteDetailsXML(request.specificQuoteDetails);\n      console.log('📄 Specific Quote Details XML:', specificQuoteDetailsXML);\n      \n      const soapBody = `\n        <ProvideQuotationWithAlterations xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${specificQuoteDetailsXML}\n        </ProvideQuotationWithAlterations>`;\n\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotationWithAlterations`);\n      \n      const responseText = await this.makeSOAPRequest('ProvideQuotationWithAlterations', soapBody);\n      \n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      \n      const parsedResponse = await XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotationWithAlterations:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes with alterations from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Save a quote as a Live policy\n   * Calls SavePolicyDetails to convert the quote into a live policy\n   */\n  async savePolicyDetails(request: TerracottaSavePolicyRequest): Promise<TerracottaSavePolicyResponse> {\n    try {\n      const screeningAnswersXML = SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);\n      \n      const soapBody = `\n        <SavePolicyDetails xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${screeningAnswersXML}\n          ${request.medicalScreeningReference ? `<medicalScreeningReference>${request.medicalScreeningReference}</medicalScreeningReference>` : ''}\n        </SavePolicyDetails>`;\n\n      const responseText = await this.makeSOAPRequest('SavePolicyDetails', soapBody);\n      return XMLParser.parseSavePolicyResponse(responseText);\n    } catch (error) {\n      console.error('Error in savePolicyDetails:', error);\n      throw new Error(`Failed to save policy details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Utility method to convert frontend data to Terracotta format\n   */\n  static convertToTerracottaFormat(formData: any): TerracottaQuoteRequest {\n    console.log('Converting form data to Terracotta format:', formData);\n    \n    // Convert travelers to Terracotta format using actual user data\n    const travelers: TerracottaTraveler[] = formData.travelers.map((traveler: any, index: number) => {\n      // Prioritize date of birth over age for accuracy\n      const dateOfBirth = traveler.dateOfBirth || calculateDateOfBirth(parseInt(traveler.age));\n      const calculatedAge = traveler.dateOfBirth ? \n        calculateAgeFromDateOfBirth(traveler.dateOfBirth) : \n        parseInt(traveler.age);\n      \n      console.log(`Traveler ${index + 1}: DOB=${dateOfBirth}, Age=${calculatedAge}`);\n      \n      return {\n        TravellerNumber: index + 1,\n        Title: traveler.title || 'Mr', // Use actual title from form\n        FirstName: traveler.firstName,\n        LastName: traveler.lastName,\n        DateOfBirth: formatDateForTerracotta(dateOfBirth),\n        Age: calculatedAge,\n        AgebandID: getAgebandID(calculatedAge),\n        TitleID: getTitleID(traveler.title || 'Mr'),\n        minAge: calculatedAge,\n        maxAge: calculatedAge,\n        ScreeningInformation: null\n      };\n    });\n\n    // Convert contact details using actual user data\n    const contactDetails: TerracottaContactDetails = {\n      Address: formData.billingAddress?.street || formData.contactAddress?.street || '123 Main Street',\n      Postcode: formData.billingAddress?.postalCode || formData.contactAddress?.postalCode || '12345',\n      Email: formData.travelers[0]?.email || formData.contactEmail || 'test@example.com',\n      Telephone: formData.travelers[0]?.phone || formData.contactPhone || '+30123456789',\n      VehicleMakeModel: formData.vehicleMakeModel,\n      VehicleLicensePlate: formData.vehicleLicensePlate,\n      VehicleYearManufacture: formData.vehicleYearManufacture\n    };\n\n           // Convert trip details using actual user data\n           const quoteDetails: TerracottaQuoteDetails = {\n             ResidenceID: getResidenceID(formData.countryOfResidence),\n             TypePolicyID: getTypePolicyID(formData.tripType),\n             TypePackageID: '1', // Fixed value as requested (string)\n             Destination: formData.destination || 'Europe',\n             StartDate: formatDateForTerracotta(formData.startDate),\n             EndDate: formatDateForTerracotta(formData.endDate),\n             Travellers: travelers,\n             ContactDetails: contactDetails,\n             includeAnnualQuotes: formData.tripType === 'annual' ? 1 : 0,\n             includeUpsell: 0, // Simplified for now\n             currencyID: 1, // EUR\n             schemaIDFilter: '717' // Use schema 717\n           };\n\n    console.log('Converted Terracotta request:', quoteDetails);\n    \n    // Use fixed values as requested\n    return {\n      userID: '4072',\n      userCode: '111427',\n      quoteDetails\n    };\n  }\n}\n\n/**\n * Utility functions for data conversion\n */\n\nfunction formatDateForTerracotta(dateString: string): string {\n  if (!dateString) return '';\n  \n  // Handle different date formats\n  if (dateString.includes('/')) {\n    // Handle DD/MM/YYYY format\n    const parts = dateString.split('/');\n    if (parts.length === 3) {\n      const [day, month, year] = parts;\n      return `${year}/${month}/${day}`;\n    }\n  }\n  \n  // Handle YYYY-MM-DD format\n  if (dateString.includes('-')) {\n    return dateString.replace(/-/g, '/');\n  }\n  \n  return dateString;\n}\n\nfunction calculateDateOfBirth(age: number): string {\n  const currentYear = new Date().getFullYear();\n  const birthYear = currentYear - age;\n  // Use January 1st as default date\n  return `${birthYear}/01/01`;\n}\n\nfunction calculateAgeFromDateOfBirth(dateOfBirth: string): number {\n  const birthDate = new Date(dateOfBirth);\n  const today = new Date();\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  \n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  \n  return Math.max(0, age);\n}\n\nfunction getResidenceID(country: string): string {\n  // Map countries to Terracotta Residence IDs\n  // Based on Terracotta API - Greece is ResidenceID 24\n  const residenceMap: { [key: string]: string } = {\n    'Greece': '24',     // Correct ResidenceID for Greece\n    'Austria': '4',\n    'Belgium': '6',\n    'Bulgaria': '10',\n    'Croatia (Hrvatska)': '14',\n    'Czech Republic': '16',\n    'Denmark': '17',\n    'Estonia': '20',\n    'Finland': '21',\n    'France': '22',\n    'Germany': '23',\n    'Hungary': '27',\n    'Iceland': '28',\n    'Italy': '33',\n    'Latvia': '38',\n    'Liechtenstein': '40',\n    'Lithuania': '41',\n    'Luxembourg': '42',\n    'Malta': '93',\n    'Netherlands': '47',\n    'Norway': '49',\n    'Poland': '53',\n    'Portugal': '54',\n    'Republic of Cyprus': '283',\n    'Republic of Ireland': '19',\n    'Romania': '55',\n    'Slovak Republic': '59',\n    'Slovenia': '60',\n    'Spain': '62',\n    'Sweden': '63'\n  };\n  \n  return residenceMap[country] || '24'; // Default to Greece\n}\n\nfunction getTypePolicyID(tripType: string): string {\n  // Use the correct TypePolicyIDs from your account\n  // Schema 683: TypePolicyID 2 (Single Trip)\n  // Schema 717: TypePolicyID 2 (Single Trip), 23 (Annual Multi-Trip), 3 (Longstay)\n  const policyMap: { [key: string]: string } = {\n    'single': '2',        // Single Trip TypePolicyID\n    'annual': '23',       // Annual Multi-Trip TypePolicyID\n    'longstay': '3',      // Longstay TypePolicyID\n    'comprehensive': '2'  // Use Single Trip as default\n  };\n  \n  return policyMap[tripType] || '2'; // Default to Single Trip TypePolicyID\n}\n\nfunction getTypePackageID(tripType: string): string {\n  // Use correct Package IDs (not SchemaIDs)\n  // Package IDs are typically 1, 2, 3, etc. for different coverage levels\n  const packageMap: { [key: string]: string } = {\n    'single': '1',        // Basic package for single trip\n    'annual': '1',        // Basic package for annual\n    'comprehensive': '2'  // Higher coverage package\n  };\n  \n  return packageMap[tripType] || '1'; // Default to basic package\n}\n\nfunction getAgebandID(age: number): number {\n  // Map age to Terracotta Ageband ID\n  if (age <= 17) return 1;\n  if (age <= 30) return 2;\n  if (age <= 40) return 3;\n  if (age <= 50) return 4;\n  if (age <= 60) return 5;\n  if (age <= 70) return 6;\n  return 7; // 70+\n}\n\nfunction getTitleID(title: string): number {\n  // Map title to Terracotta Title ID\n  const titleMap: { [key: string]: number } = {\n    'Mr': 1,\n    'Mrs': 2,\n    'Miss': 3,\n    'Ms': 4,\n    'Dr': 5,\n    'Prof': 6\n  };\n  \n  return titleMap[title] || 1; // Default to Mr\n}\n\nfunction getCurrencyID(currency: string): number {\n  // Map currency to Terracotta Currency ID\n  const currencyMap: { [key: string]: number } = {\n    'EUR': 1,\n    'USD': 2,\n    'GBP': 3,\n    'CHF': 4\n  };\n  \n  return currencyMap[currency] || 1; // Default to EUR\n}\n\nexport default TerracottaService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}