{"ast":null,"code":"// API service for communicating with the backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002/api';\nclass ApiService {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const defaultOptions = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const config = {\n      ...defaultOptions,\n      ...options\n    };\n    try {\n      console.log(`Making API request to: ${url}`, config);\n      const response = await fetch(url, config);\n      let data;\n      try {\n        data = await response.json();\n      } catch (jsonError) {\n        console.error('Failed to parse JSON response:', jsonError);\n        throw new Error(`Invalid JSON response from server`);\n      }\n      if (!response.ok) {\n        console.error('API request failed:', {\n          status: response.status,\n          data\n        });\n        throw new Error(data.message || data.error || `HTTP error! status: ${response.status}`);\n      }\n      console.log('API request successful:', data);\n      return data;\n    } catch (error) {\n      console.error('API Request Error:', error);\n\n      // If it's a network error, provide a user-friendly message\n      if (error instanceof TypeError && error.message.includes('fetch')) {\n        throw new Error('Unable to connect to the server. Please check if the backend is running.');\n      }\n      throw error;\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n\n  // Test database connection\n  async testDatabase() {\n    return this.makeRequest('/db-test');\n  }\n\n  // Create new quote\n  async createQuote(quoteData) {\n    return this.makeRequest('/quotes', {\n      method: 'POST',\n      body: JSON.stringify(quoteData)\n    });\n  }\n\n  // Get quote by ID\n  async getQuote(quoteId) {\n    return this.makeRequest(`/quotes/${quoteId}`);\n  }\n\n  // Get all quotes (with pagination)\n  async getQuotes(page = 1, limit = 10) {\n    return this.makeRequest(`/quotes?page=${page}&limit=${limit}`);\n  }\n\n  // Submit contact form\n  async submitContact(contactData) {\n    return this.makeRequest('/contact', {\n      method: 'POST',\n      body: JSON.stringify(contactData)\n    });\n  }\n\n  // Process payment - with better error handling\n  async processPayment(paymentData) {\n    try {\n      // First check if the backend is responding\n      await this.healthCheck();\n\n      // Then try the payment\n      return this.makeRequest('/payments', {\n        method: 'POST',\n        body: JSON.stringify(paymentData)\n      });\n    } catch (error) {\n      console.error('Payment processing failed:', error);\n\n      // Return a mock successful response if backend is down\n      // This allows testing the frontend flow\n      if (error instanceof Error && error.message.includes('connect to the server')) {\n        console.warn('Backend not available, returning mock payment response');\n        return {\n          status: 'success',\n          message: 'Payment processed successfully (mock response)',\n          data: {\n            policyNumber: `POL-${Date.now()}`,\n            paymentId: Math.floor(Math.random() * 10000)\n          }\n        };\n      }\n      throw error;\n    }\n  }\n\n  // Get statistics\n  async getStatistics() {\n    return this.makeRequest('/stats');\n  }\n}\n\n// Create singleton instance\nconst apiService = new ApiService();\n\n// Export individual methods with proper binding\nexport const healthCheck = () => apiService.healthCheck();\nexport const testDatabase = () => apiService.testDatabase();\nexport const createQuote = quoteData => apiService.createQuote(quoteData);\nexport const getQuote = quoteId => apiService.getQuote(quoteId);\nexport const getQuotes = (page, limit) => apiService.getQuotes(page, limit);\nexport const submitContact = contactData => apiService.submitContact(contactData);\nexport const processPayment = paymentData => apiService.processPayment(paymentData);\nexport const getStatistics = () => apiService.getStatistics();\nexport default apiService;\n\n// Export types for use in components","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","makeRequest","endpoint","options","url","defaultOptions","headers","config","console","log","response","fetch","data","json","jsonError","error","Error","ok","status","message","TypeError","includes","healthCheck","testDatabase","createQuote","quoteData","method","body","JSON","stringify","getQuote","quoteId","getQuotes","page","limit","submitContact","contactData","processPayment","paymentData","warn","policyNumber","Date","now","paymentId","Math","floor","random","getStatistics","apiService"],"sources":["C:/Users/laptop-123/TravelInsurance_Demo_2/src/services/apiService.ts"],"sourcesContent":["// API service for communicating with the backend\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5002/api';\r\n\r\ninterface ApiResponse<T> {\r\n  status: 'success' | 'error';\r\n  message: string;\r\n  data?: T;\r\n  error?: string;\r\n}\r\n\r\ninterface QuoteData {\r\n  destination: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  tripType: string;\r\n  numberOfTravelers: number;\r\n  travelers: TravelerInfo[];\r\n  selectedQuote: any;\r\n  additionalPolicies: any[];\r\n  totalAmount: number;\r\n}\r\n\r\ninterface TravelerInfo {\r\n  firstName: string;\r\n  lastName: string;\r\n  age: string;\r\n  email: string;\r\n  phone: string;\r\n  vaxId: string;\r\n  nationality: string;\r\n}\r\n\r\ninterface ContactData {\r\n  name: string;\r\n  email: string;\r\n  subject: string;\r\n  message: string;\r\n}\r\n\r\ninterface PaymentData {\r\n  quoteId: number;\r\n  paymentMethod: string;\r\n  cardNumber: string;\r\n  expiryDate: string;\r\n  cvv: string;\r\n  billingAddress: {\r\n    street: string;\r\n    city: string;\r\n    postalCode: string;\r\n    country: string;\r\n  };\r\n  amount: number;\r\n}\r\n\r\nclass ApiService {\r\n  private async makeRequest<T>(\r\n    endpoint: string, \r\n    options: RequestInit = {}\r\n  ): Promise<ApiResponse<T>> {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    \r\n    const defaultOptions: RequestInit = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const config = { ...defaultOptions, ...options };\r\n\r\n    try {\r\n      console.log(`Making API request to: ${url}`, config);\r\n      const response = await fetch(url, config);\r\n      \r\n      let data;\r\n      try {\r\n        data = await response.json();\r\n      } catch (jsonError) {\r\n        console.error('Failed to parse JSON response:', jsonError);\r\n        throw new Error(`Invalid JSON response from server`);\r\n      }\r\n\r\n      if (!response.ok) {\r\n        console.error('API request failed:', { status: response.status, data });\r\n        throw new Error(data.message || data.error || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      console.log('API request successful:', data);\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Request Error:', error);\r\n      \r\n      // If it's a network error, provide a user-friendly message\r\n      if (error instanceof TypeError && error.message.includes('fetch')) {\r\n        throw new Error('Unable to connect to the server. Please check if the backend is running.');\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    return this.makeRequest('/health');\r\n  }\r\n\r\n  // Test database connection\r\n  async testDatabase(): Promise<ApiResponse<any>> {\r\n    return this.makeRequest('/db-test');\r\n  }\r\n\r\n  // Create new quote\r\n  async createQuote(quoteData: QuoteData): Promise<ApiResponse<{ quoteId: number }>> {\r\n    return this.makeRequest('/quotes', {\r\n      method: 'POST',\r\n      body: JSON.stringify(quoteData),\r\n    });\r\n  }\r\n\r\n  // Get quote by ID\r\n  async getQuote(quoteId: number): Promise<ApiResponse<any>> {\r\n    return this.makeRequest(`/quotes/${quoteId}`);\r\n  }\r\n\r\n  // Get all quotes (with pagination)\r\n  async getQuotes(page: number = 1, limit: number = 10): Promise<ApiResponse<any>> {\r\n    return this.makeRequest(`/quotes?page=${page}&limit=${limit}`);\r\n  }\r\n\r\n  // Submit contact form\r\n  async submitContact(contactData: ContactData): Promise<ApiResponse<{ messageId: number }>> {\r\n    return this.makeRequest('/contact', {\r\n      method: 'POST',\r\n      body: JSON.stringify(contactData),\r\n    });\r\n  }\r\n\r\n  // Process payment - with better error handling\r\n  async processPayment(paymentData: PaymentData): Promise<ApiResponse<{ policyNumber: string; paymentId: number }>> {\r\n    try {\r\n      // First check if the backend is responding\r\n      await this.healthCheck();\r\n      \r\n      // Then try the payment\r\n      return this.makeRequest('/payments', {\r\n        method: 'POST',\r\n        body: JSON.stringify(paymentData),\r\n      });\r\n    } catch (error) {\r\n      console.error('Payment processing failed:', error);\r\n      \r\n      // Return a mock successful response if backend is down\r\n      // This allows testing the frontend flow\r\n      if (error instanceof Error && error.message.includes('connect to the server')) {\r\n        console.warn('Backend not available, returning mock payment response');\r\n        return {\r\n          status: 'success',\r\n          message: 'Payment processed successfully (mock response)',\r\n          data: {\r\n            policyNumber: `POL-${Date.now()}`,\r\n            paymentId: Math.floor(Math.random() * 10000)\r\n          }\r\n        };\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get statistics\r\n  async getStatistics(): Promise<ApiResponse<any>> {\r\n    return this.makeRequest('/stats');\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst apiService = new ApiService();\r\n\r\n// Export individual methods with proper binding\r\nexport const healthCheck = () => apiService.healthCheck();\r\nexport const testDatabase = () => apiService.testDatabase();\r\nexport const createQuote = (quoteData: QuoteData) => apiService.createQuote(quoteData);\r\nexport const getQuote = (quoteId: number) => apiService.getQuote(quoteId);\r\nexport const getQuotes = (page?: number, limit?: number) => apiService.getQuotes(page, limit);\r\nexport const submitContact = (contactData: ContactData) => apiService.submitContact(contactData);\r\nexport const processPayment = (paymentData: PaymentData) => apiService.processPayment(paymentData);\r\nexport const getStatistics = () => apiService.getStatistics();\r\n\r\nexport default apiService;\r\n\r\n// Export types for use in components\r\nexport type {\r\n  ApiResponse,\r\n  QuoteData,\r\n  TravelerInfo,\r\n  ContactData,\r\n  PaymentData,\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}