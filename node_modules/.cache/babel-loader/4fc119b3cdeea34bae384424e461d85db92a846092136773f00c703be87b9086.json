{"ast":null,"code":"// API service for communicating with the backend\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\nclass ApiService {\n  async makeRequest(endpoint, options = {}) {\n    const url = `${API_BASE_URL}${endpoint}`;\n    const defaultOptions = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const config = {\n      ...defaultOptions,\n      ...options\n    };\n    try {\n      const response = await fetch(url, config);\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error('API Request Error:', error);\n      throw error;\n    }\n  }\n\n  // Health check\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n\n  // Test database connection\n  async testDatabase() {\n    return this.makeRequest('/db-test');\n  }\n\n  // Create new quote\n  async createQuote(quoteData) {\n    return this.makeRequest('/quotes', {\n      method: 'POST',\n      body: JSON.stringify(quoteData)\n    });\n  }\n\n  // Get quote by ID\n  async getQuote(quoteId) {\n    return this.makeRequest(`/quotes/${quoteId}`);\n  }\n\n  // Get all quotes (with pagination)\n  async getQuotes(page = 1, limit = 10) {\n    return this.makeRequest(`/quotes?page=${page}&limit=${limit}`);\n  }\n\n  // Submit contact form\n  async submitContact(contactData) {\n    return this.makeRequest('/contact', {\n      method: 'POST',\n      body: JSON.stringify(contactData)\n    });\n  }\n\n  // Process payment\n  async processPayment(paymentData) {\n    return this.makeRequest('/payments', {\n      method: 'POST',\n      body: JSON.stringify(paymentData)\n    });\n  }\n\n  // Get statistics\n  async getStatistics() {\n    return this.makeRequest('/stats');\n  }\n}\n\n// Create singleton instance\nconst apiService = new ApiService();\n\n// Export individual methods with proper binding\nexport const healthCheck = apiService.healthCheck.bind(apiService);\nexport const testDatabase = apiService.testDatabase.bind(apiService);\nexport const createQuote = apiService.createQuote.bind(apiService);\nexport const getQuote = apiService.getQuote.bind(apiService);\nexport const getQuotes = apiService.getQuotes.bind(apiService);\nexport const submitContact = apiService.submitContact.bind(apiService);\nexport const processPayment = apiService.processPayment.bind(apiService);\nexport const getStatistics = apiService.getStatistics.bind(apiService);\nexport default apiService;\n\n// Export types for use in components","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","ApiService","makeRequest","endpoint","options","url","defaultOptions","headers","config","response","fetch","data","json","ok","Error","message","status","error","console","healthCheck","testDatabase","createQuote","quoteData","method","body","JSON","stringify","getQuote","quoteId","getQuotes","page","limit","submitContact","contactData","processPayment","paymentData","getStatistics","apiService","bind"],"sources":["C:/Users/laptop-123/TravelInsurance_Demo_2/src/services/apiService.ts"],"sourcesContent":["// API service for communicating with the backend\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5000/api';\r\n\r\ninterface ApiResponse<T> {\r\n  status: 'success' | 'error';\r\n  message: string;\r\n  data?: T;\r\n  error?: string;\r\n}\r\n\r\ninterface QuoteData {\r\n  destination: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  tripType: string;\r\n  numberOfTravelers: number;\r\n  travelers: TravelerInfo[];\r\n  selectedQuote: any;\r\n  additionalPolicies: any[];\r\n  totalAmount: number;\r\n}\r\n\r\ninterface TravelerInfo {\r\n  firstName: string;\r\n  lastName: string;\r\n  age: string;\r\n  email: string;\r\n  phone: string;\r\n  vaxId: string;\r\n  nationality: string;\r\n}\r\n\r\ninterface ContactData {\r\n  name: string;\r\n  email: string;\r\n  subject: string;\r\n  message: string;\r\n}\r\n\r\ninterface PaymentData {\r\n  quoteId: number;\r\n  paymentMethod: string;\r\n  cardNumber: string;\r\n  expiryDate: string;\r\n  cvv: string;\r\n  billingAddress: {\r\n    street: string;\r\n    city: string;\r\n    postalCode: string;\r\n    country: string;\r\n  };\r\n  amount: number;\r\n}\r\n\r\nclass ApiService {\r\n  private async makeRequest<T>(\r\n    endpoint: string, \r\n    options: RequestInit = {}\r\n  ): Promise<ApiResponse<T>> {\r\n    const url = `${API_BASE_URL}${endpoint}`;\r\n    \r\n    const defaultOptions: RequestInit = {\r\n      headers: {\r\n        'Content-Type': 'application/json',\r\n      },\r\n    };\r\n\r\n    const config = { ...defaultOptions, ...options };\r\n\r\n    try {\r\n      const response = await fetch(url, config);\r\n      const data = await response.json();\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || `HTTP error! status: ${response.status}`);\r\n      }\r\n\r\n      return data;\r\n    } catch (error) {\r\n      console.error('API Request Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Health check\r\n  async healthCheck(): Promise<ApiResponse<any>> {\r\n    return this.makeRequest('/health');\r\n  }\r\n\r\n  // Test database connection\r\n  async testDatabase(): Promise<ApiResponse<any>> {\r\n    return this.makeRequest('/db-test');\r\n  }\r\n\r\n  // Create new quote\r\n  async createQuote(quoteData: QuoteData): Promise<ApiResponse<{ quoteId: number }>> {\r\n    return this.makeRequest('/quotes', {\r\n      method: 'POST',\r\n      body: JSON.stringify(quoteData),\r\n    });\r\n  }\r\n\r\n  // Get quote by ID\r\n  async getQuote(quoteId: number): Promise<ApiResponse<any>> {\r\n    return this.makeRequest(`/quotes/${quoteId}`);\r\n  }\r\n\r\n  // Get all quotes (with pagination)\r\n  async getQuotes(page: number = 1, limit: number = 10): Promise<ApiResponse<any>> {\r\n    return this.makeRequest(`/quotes?page=${page}&limit=${limit}`);\r\n  }\r\n\r\n  // Submit contact form\r\n  async submitContact(contactData: ContactData): Promise<ApiResponse<{ messageId: number }>> {\r\n    return this.makeRequest('/contact', {\r\n      method: 'POST',\r\n      body: JSON.stringify(contactData),\r\n    });\r\n  }\r\n\r\n  // Process payment\r\n  async processPayment(paymentData: PaymentData): Promise<ApiResponse<{ policyNumber: string; paymentId: number }>> {\r\n    return this.makeRequest('/payments', {\r\n      method: 'POST',\r\n      body: JSON.stringify(paymentData),\r\n    });\r\n  }\r\n\r\n  // Get statistics\r\n  async getStatistics(): Promise<ApiResponse<any>> {\r\n    return this.makeRequest('/stats');\r\n  }\r\n}\r\n\r\n// Create singleton instance\r\nconst apiService = new ApiService();\r\n\r\n// Export individual methods with proper binding\r\nexport const healthCheck = apiService.healthCheck.bind(apiService);\r\nexport const testDatabase = apiService.testDatabase.bind(apiService);\r\nexport const createQuote = apiService.createQuote.bind(apiService);\r\nexport const getQuote = apiService.getQuote.bind(apiService);\r\nexport const getQuotes = apiService.getQuotes.bind(apiService);\r\nexport const submitContact = apiService.submitContact.bind(apiService);\r\nexport const processPayment = apiService.processPayment.bind(apiService);\r\nexport const getStatistics = apiService.getStatistics.bind(apiService);\r\n\r\nexport default apiService;\r\n\r\n// Export types for use in components\r\nexport type {\r\n  ApiResponse,\r\n  QuoteData,\r\n  TravelerInfo,\r\n  ContactData,\r\n  PaymentData,\r\n};\r\n"],"mappings":"AAAA;AACA,MAAMA,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,2BAA2B;AAqDjF,MAAMC,UAAU,CAAC;EACf,MAAcC,WAAWA,CACvBC,QAAgB,EAChBC,OAAoB,GAAG,CAAC,CAAC,EACA;IACzB,MAAMC,GAAG,GAAG,GAAGR,YAAY,GAAGM,QAAQ,EAAE;IAExC,MAAMG,cAA2B,GAAG;MAClCC,OAAO,EAAE;QACP,cAAc,EAAE;MAClB;IACF,CAAC;IAED,MAAMC,MAAM,GAAG;MAAE,GAAGF,cAAc;MAAE,GAAGF;IAAQ,CAAC;IAEhD,IAAI;MACF,MAAMK,QAAQ,GAAG,MAAMC,KAAK,CAACL,GAAG,EAAEG,MAAM,CAAC;MACzC,MAAMG,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;MAElC,IAAI,CAACH,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAACH,IAAI,CAACI,OAAO,IAAI,uBAAuBN,QAAQ,CAACO,MAAM,EAAE,CAAC;MAC3E;MAEA,OAAOL,IAAI;IACb,CAAC,CAAC,OAAOM,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAME,WAAWA,CAAA,EAA8B;IAC7C,OAAO,IAAI,CAACjB,WAAW,CAAC,SAAS,CAAC;EACpC;;EAEA;EACA,MAAMkB,YAAYA,CAAA,EAA8B;IAC9C,OAAO,IAAI,CAAClB,WAAW,CAAC,UAAU,CAAC;EACrC;;EAEA;EACA,MAAMmB,WAAWA,CAACC,SAAoB,EAA6C;IACjF,OAAO,IAAI,CAACpB,WAAW,CAAC,SAAS,EAAE;MACjCqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,SAAS;IAChC,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMK,QAAQA,CAACC,OAAe,EAA6B;IACzD,OAAO,IAAI,CAAC1B,WAAW,CAAC,WAAW0B,OAAO,EAAE,CAAC;EAC/C;;EAEA;EACA,MAAMC,SAASA,CAACC,IAAY,GAAG,CAAC,EAAEC,KAAa,GAAG,EAAE,EAA6B;IAC/E,OAAO,IAAI,CAAC7B,WAAW,CAAC,gBAAgB4B,IAAI,UAAUC,KAAK,EAAE,CAAC;EAChE;;EAEA;EACA,MAAMC,aAAaA,CAACC,WAAwB,EAA+C;IACzF,OAAO,IAAI,CAAC/B,WAAW,CAAC,UAAU,EAAE;MAClCqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACO,WAAW;IAClC,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,cAAcA,CAACC,WAAwB,EAAqE;IAChH,OAAO,IAAI,CAACjC,WAAW,CAAC,WAAW,EAAE;MACnCqB,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,WAAW;IAClC,CAAC,CAAC;EACJ;;EAEA;EACA,MAAMC,aAAaA,CAAA,EAA8B;IAC/C,OAAO,IAAI,CAAClC,WAAW,CAAC,QAAQ,CAAC;EACnC;AACF;;AAEA;AACA,MAAMmC,UAAU,GAAG,IAAIpC,UAAU,CAAC,CAAC;;AAEnC;AACA,OAAO,MAAMkB,WAAW,GAAGkB,UAAU,CAAClB,WAAW,CAACmB,IAAI,CAACD,UAAU,CAAC;AAClE,OAAO,MAAMjB,YAAY,GAAGiB,UAAU,CAACjB,YAAY,CAACkB,IAAI,CAACD,UAAU,CAAC;AACpE,OAAO,MAAMhB,WAAW,GAAGgB,UAAU,CAAChB,WAAW,CAACiB,IAAI,CAACD,UAAU,CAAC;AAClE,OAAO,MAAMV,QAAQ,GAAGU,UAAU,CAACV,QAAQ,CAACW,IAAI,CAACD,UAAU,CAAC;AAC5D,OAAO,MAAMR,SAAS,GAAGQ,UAAU,CAACR,SAAS,CAACS,IAAI,CAACD,UAAU,CAAC;AAC9D,OAAO,MAAML,aAAa,GAAGK,UAAU,CAACL,aAAa,CAACM,IAAI,CAACD,UAAU,CAAC;AACtE,OAAO,MAAMH,cAAc,GAAGG,UAAU,CAACH,cAAc,CAACI,IAAI,CAACD,UAAU,CAAC;AACxE,OAAO,MAAMD,aAAa,GAAGC,UAAU,CAACD,aAAa,CAACE,IAAI,CAACD,UAAU,CAAC;AAEtE,eAAeA,UAAU;;AAEzB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}