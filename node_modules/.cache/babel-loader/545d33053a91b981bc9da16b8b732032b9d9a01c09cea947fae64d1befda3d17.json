{"ast":null,"code":"var _TerracottaService;\n/**\r\n * Terracotta Insurance Quote Integration Service\r\n * \r\n * This service handles all communication with the Terracotta Integrated Quote web service\r\n * using SOAP protocol. It provides methods for:\r\n * - Requesting quotes (ProvideQuotation)\r\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\r\n * - Getting screening questions (ScreeningQuestions)\r\n * - Saving policy details (SavePolicyDetails)\r\n */\n\n// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL = 'http://www.asuaonline.com/ws/integratedquote.asmx';\nconst TERRACOTTA_USER_ID = 'YOUR_USER_ID'; // To be configured\nconst TERRACOTTA_USER_CODE = 'YOUR_USER_CODE'; // To be configured\n\n// TypeScript interfaces for Terracotta API data structures\n\n/**\r\n * SOAP XML Builder utility functions\r\n */\nclass SOAPBuilder {\n  static createEnvelope(body) {\n    return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    ${body}\n  </soap:Body>\n</soap:Envelope>`;\n  }\n  static buildTravelerXML(traveler) {\n    return `\n      <Travellers>\n        <TravellerNumber>${traveler.TravellerNumber}</TravellerNumber>\n        <Title>${traveler.Title}</Title>\n        <FirstName>${traveler.FirstName}</FirstName>\n        <LastName>${traveler.LastName}</LastName>\n        <DateOfBirth>${traveler.DateOfBirth}</DateOfBirth>\n        <Age>${traveler.Age}</Age>\n      </Travellers>`;\n  }\n  static buildContactDetailsXML(contact) {\n    return `\n      <ContactDetails>\n        <Address>${contact.Address}</Address>\n        <Postcode>${contact.Postcode}</Postcode>\n        <Email>${contact.Email}</Email>\n        <Telephone>${contact.Telephone}</Telephone>\n      </ContactDetails>`;\n  }\n  static buildQuoteDetailsXML(details) {\n    const travelersXML = details.Travellers.map(traveler => this.buildTravelerXML(traveler)).join('');\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    return `\n      <quoteDetails>\n        <ResidenceID>${details.ResidenceID}</ResidenceID>\n        <TypePolicyID>${details.TypePolicyID}</TypePolicyID>\n        <TypePackageID>${details.TypePackageID}</TypePackageID>\n        <Destination>${details.Destination}</Destination>\n        <StartDate>${details.StartDate}</StartDate>\n        <EndDate>${details.EndDate}</EndDate>\n        ${travelersXML}\n        ${contactXML}\n      </quoteDetails>`;\n  }\n  static buildAlterationDetailsXML(details) {\n    const travelersXML = details.Travellers.map(traveler => this.buildTravelerXML(traveler)).join('');\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    let dynamicDetailsXML = '';\n    if (details.DynamicDetails && details.DynamicDetails.length > 0) {\n      dynamicDetailsXML = '<DynamicDetails>' + details.DynamicDetails.map(detail => `\n          <DynamicDetail_SavedValue>\n            <Position>${detail.Position}</Position>\n            <FieldName>${detail.FieldName}</FieldName>\n            <FieldValue>${detail.FieldValue}</FieldValue>\n            <FieldSize>${detail.FieldSize}</FieldSize>\n          </DynamicDetail_SavedValue>`).join('') + '</DynamicDetails>';\n    }\n    let screeningAnswersXML = '';\n    if (details.screeningQuestionAnswers && details.screeningQuestionAnswers.length > 0) {\n      screeningAnswersXML = '<screeningQuestionAnswers>' + details.screeningQuestionAnswers.map(answer => `\n          <screeningQuestionAnswer>\n            <questionNumber>${answer.questionNumber}</questionNumber>\n            <answer>${answer.answer}</answer>\n          </screeningQuestionAnswer>`).join('') + '</screeningQuestionAnswers>';\n    }\n    let eligibilityAnswersXML = '';\n    if (details.eligibilityQuestionAnswers && details.eligibilityQuestionAnswers.length > 0) {\n      eligibilityAnswersXML = '<EligibilityQuestionAnswers>' + details.eligibilityQuestionAnswers.map(answer => `\n          <eligibilityQuestionAnswer>\n            <questionNumber>${answer.questionNumber}</questionNumber>\n            <answer>${answer.answer}</answer>\n          </eligibilityQuestionAnswer>`).join('') + '</EligibilityQuestionAnswers>';\n    }\n    return `\n      <specificQuoteDetails>\n        <AlterationID>${details.AlterationID}</AlterationID>\n        ${travelersXML}\n        ${contactXML}\n        ${dynamicDetailsXML}\n        ${screeningAnswersXML}\n        ${eligibilityAnswersXML}\n      </specificQuoteDetails>`;\n  }\n  static buildScreeningAnswersXML(answers) {\n    return '<screeningQuestionAnswers>' + answers.map(answer => `\n        <screeningQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </screeningQuestionAnswer>`).join('') + '</screeningQuestionAnswers>';\n  }\n}\n\n/**\r\n * XML Parser utility functions\r\n */\nclass XMLParser {\n  static parseQuoteResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n\n      // Check for parsing errors\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector = xmlDoc.querySelector('Message')) === null || _xmlDoc$querySelector === void 0 ? void 0 : _xmlDoc$querySelector.textContent) || '';\n      const quoteResults = [];\n      const quoteResultNodes = xmlDoc.querySelectorAll('quoteResults');\n      quoteResultNodes.forEach(node => {\n        var _node$querySelector, _node$querySelector2, _node$querySelector3, _node$querySelector4, _node$querySelector5, _node$querySelector6, _node$querySelector7, _node$querySelector8;\n        const result = {\n          QuoteID: ((_node$querySelector = node.querySelector('QuoteID')) === null || _node$querySelector === void 0 ? void 0 : _node$querySelector.textContent) || '',\n          schemaName: ((_node$querySelector2 = node.querySelector('schemaName')) === null || _node$querySelector2 === void 0 ? void 0 : _node$querySelector2.textContent) || '',\n          policyTypeName: ((_node$querySelector3 = node.querySelector('policyTypeName')) === null || _node$querySelector3 === void 0 ? void 0 : _node$querySelector3.textContent) || '',\n          SI: ((_node$querySelector4 = node.querySelector('SI')) === null || _node$querySelector4 === void 0 ? void 0 : _node$querySelector4.textContent) || '',\n          PW: ((_node$querySelector5 = node.querySelector('PW')) === null || _node$querySelector5 === void 0 ? void 0 : _node$querySelector5.textContent) || '',\n          Currency: ((_node$querySelector6 = node.querySelector('Currency')) === null || _node$querySelector6 === void 0 ? void 0 : _node$querySelector6.textContent) || '',\n          IPT: parseFloat(((_node$querySelector7 = node.querySelector('IPT')) === null || _node$querySelector7 === void 0 ? void 0 : _node$querySelector7.textContent) || '0'),\n          GrossPrice: parseFloat(((_node$querySelector8 = node.querySelector('GrossPrice')) === null || _node$querySelector8 === void 0 ? void 0 : _node$querySelector8.textContent) || '0')\n        };\n        quoteResults.push(result);\n      });\n      return {\n        Message: message,\n        quoteResults\n      };\n    } catch (error) {\n      console.error('Error parsing quote response:', error);\n      throw new Error(`Failed to parse quote response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseScreeningQuestionsResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector2;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector2 = xmlDoc.querySelector('Message')) === null || _xmlDoc$querySelector2 === void 0 ? void 0 : _xmlDoc$querySelector2.textContent) || '';\n      const screeningQuestions = [];\n      const questionNodes = xmlDoc.querySelectorAll('screeningQuestion');\n      questionNodes.forEach(node => {\n        var _node$querySelector9, _node$querySelector0, _node$querySelector1, _node$querySelector10, _node$querySelector11, _node$querySelector12, _node$querySelector13, _node$querySelector14;\n        const question = {\n          questionNumber: parseInt(((_node$querySelector9 = node.querySelector('questionNumber')) === null || _node$querySelector9 === void 0 ? void 0 : _node$querySelector9.textContent) || '0'),\n          question: ((_node$querySelector0 = node.querySelector('question')) === null || _node$querySelector0 === void 0 ? void 0 : _node$querySelector0.textContent) || '',\n          yesMessage: ((_node$querySelector1 = node.querySelector('yesMessage')) === null || _node$querySelector1 === void 0 ? void 0 : _node$querySelector1.textContent) || '',\n          noMessage: ((_node$querySelector10 = node.querySelector('noMessage')) === null || _node$querySelector10 === void 0 ? void 0 : _node$querySelector10.textContent) || '',\n          yesAction: ((_node$querySelector11 = node.querySelector('yesAction')) === null || _node$querySelector11 === void 0 ? void 0 : _node$querySelector11.textContent) || '',\n          noAction: ((_node$querySelector12 = node.querySelector('noAction')) === null || _node$querySelector12 === void 0 ? void 0 : _node$querySelector12.textContent) || '',\n          yesActionText: ((_node$querySelector13 = node.querySelector('yesActionText')) === null || _node$querySelector13 === void 0 ? void 0 : _node$querySelector13.textContent) || '',\n          noActionText: ((_node$querySelector14 = node.querySelector('noActionText')) === null || _node$querySelector14 === void 0 ? void 0 : _node$querySelector14.textContent) || ''\n        };\n        screeningQuestions.push(question);\n      });\n      return {\n        Message: message,\n        screeningQuestions\n      };\n    } catch (error) {\n      console.error('Error parsing screening questions response:', error);\n      throw new Error(`Failed to parse screening questions response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseSavePolicyResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector3, _xmlDoc$querySelector4, _xmlDoc$querySelector5, _xmlDoc$querySelector6, _xmlDoc$querySelector7, _xmlDoc$querySelector8;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      return {\n        Message: ((_xmlDoc$querySelector3 = xmlDoc.querySelector('Message')) === null || _xmlDoc$querySelector3 === void 0 ? void 0 : _xmlDoc$querySelector3.textContent) || '',\n        policySaved: ((_xmlDoc$querySelector4 = xmlDoc.querySelector('policySaved')) === null || _xmlDoc$querySelector4 === void 0 ? void 0 : _xmlDoc$querySelector4.textContent) || 'No',\n        policyID: ((_xmlDoc$querySelector5 = xmlDoc.querySelector('policyID')) === null || _xmlDoc$querySelector5 === void 0 ? void 0 : _xmlDoc$querySelector5.textContent) || '',\n        certificate: ((_xmlDoc$querySelector6 = xmlDoc.querySelector('certificate')) === null || _xmlDoc$querySelector6 === void 0 ? void 0 : _xmlDoc$querySelector6.textContent) || '',\n        PW: ((_xmlDoc$querySelector7 = xmlDoc.querySelector('PW')) === null || _xmlDoc$querySelector7 === void 0 ? void 0 : _xmlDoc$querySelector7.textContent) || '',\n        SI: ((_xmlDoc$querySelector8 = xmlDoc.querySelector('SI')) === null || _xmlDoc$querySelector8 === void 0 ? void 0 : _xmlDoc$querySelector8.textContent) || ''\n      };\n    } catch (error) {\n      console.error('Error parsing save policy response:', error);\n      throw new Error(`Failed to parse save policy response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\r\n * Main Terracotta Service Class\r\n */\nexport class TerracottaService {\n  constructor(userID = TERRACOTTA_USER_ID, userCode = TERRACOTTA_USER_CODE) {\n    this.userID = void 0;\n    this.userCode = void 0;\n    this.userID = userID;\n    this.userCode = userCode;\n  }\n  static getInstance(userID, userCode) {\n    if (!TerracottaService.instance) {\n      TerracottaService.instance = new TerracottaService(userID, userCode);\n    }\n    return TerracottaService.instance;\n  }\n\n  /**\r\n   * Generic SOAP request method\r\n   */\n  async makeSOAPRequest(method, requestBody) {\n    const soapEnvelope = SOAPBuilder.createEnvelope(requestBody);\n    const response = await fetch(TERRACOTTA_BASE_URL, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'text/xml; charset=utf-8',\n        'SOAPAction': `http://tempuri.org/${method}`\n      },\n      body: soapEnvelope\n    });\n    if (!response.ok) {\n      throw new Error(`SOAP request failed: ${response.status} ${response.statusText}`);\n    }\n    const responseText = await response.text();\n    return responseText;\n  }\n\n  /**\r\n   * 1. Request for quotations\r\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\r\n   */\n  async provideQuotation(request) {\n    try {\n      const quoteDetailsXML = SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);\n      const soapBody = `\n        <${'ProvideQuotation'} xmlns=\"http://tempuri.org/\">\n          <userID>${request.userID}</userID>\n          <userCode>${request.userCode}</userCode>\n          ${quoteDetailsXML}\n        </${'ProvideQuotation'}>`;\n      const responseText = await this.makeSOAPRequest('ProvideQuotation', soapBody);\n      return XMLParser.parseQuoteResponse(responseText);\n    } catch (error) {\n      console.error('Error in provideQuotation:', error);\n      throw new Error(`Failed to get quotes from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\r\n   * 2. Quote for Additional Covers\r\n   * Calls ProvideQuotationWithAlterations to update an existing quote with additional covers\r\n   */\n  async provideQuotationWithAlterations(request) {\n    try {\n      const alterationDetailsXML = SOAPBuilder.buildAlterationDetailsXML(request.specificQuoteDetails);\n      const soapBody = `\n        <${'ProvideQuotationWithAlterations'} xmlns=\"http://tempuri.org/\">\n          <userID>${request.userID}</userID>\n          <userCode>${request.userCode}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${alterationDetailsXML}\n        </${'ProvideQuotationWithAlterations'}>`;\n      const responseText = await this.makeSOAPRequest('ProvideQuotationWithAlterations', soapBody);\n      return XMLParser.parseQuoteResponse(responseText);\n    } catch (error) {\n      console.error('Error in provideQuotationWithAlterations:', error);\n      throw new Error(`Failed to update quote with alterations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\r\n   * 3. Obtain Screening Questions\r\n   * Calls ScreeningQuestions to get screening questions for the selected quote\r\n   */\n  async getScreeningQuestions(quoteID) {\n    try {\n      const soapBody = `\n        <${'ScreeningQuestions'} xmlns=\"http://tempuri.org/\">\n          <userID>${this.userID}</userID>\n          <userCode>${this.userCode}</userCode>\n          <quoteID>${quoteID}</quoteID>\n        </${'ScreeningQuestions'}>`;\n      const responseText = await this.makeSOAPRequest('ScreeningQuestions', soapBody);\n      return XMLParser.parseScreeningQuestionsResponse(responseText);\n    } catch (error) {\n      console.error('Error in getScreeningQuestions:', error);\n      throw new Error(`Failed to get screening questions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\r\n   * 4. Save a quote as a Live policy\r\n   * Calls SavePolicyDetails to convert the quote into a live policy\r\n   */\n  async savePolicyDetails(request) {\n    try {\n      const screeningAnswersXML = SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);\n      const soapBody = `\n        <${'SavePolicyDetails'} xmlns=\"http://tempuri.org/\">\n          <userID>${request.userID}</userID>\n          <userCode>${request.userCode}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${screeningAnswersXML}\n          ${request.medicalScreeningReference ? `<medicalScreeningReference>${request.medicalScreeningReference}</medicalScreeningReference>` : ''}\n        </${'SavePolicyDetails'}>`;\n      const responseText = await this.makeSOAPRequest('SavePolicyDetails', soapBody);\n      return XMLParser.parseSavePolicyResponse(responseText);\n    } catch (error) {\n      console.error('Error in savePolicyDetails:', error);\n      throw new Error(`Failed to save policy details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\r\n   * Utility method to convert frontend data to Terracotta format\r\n   */\n  static convertToTerracottaFormat(formData) {\n    var _formData$billingAddr, _formData$billingAddr2, _formData$travelers$, _formData$travelers$2;\n    // Convert travelers to Terracotta format\n    const travelers = formData.travelers.map((traveler, index) => ({\n      TravellerNumber: index + 1,\n      Title: 'Mr',\n      // Default title, could be made configurable\n      FirstName: traveler.firstName,\n      LastName: traveler.lastName,\n      DateOfBirth: formatDateForTerracotta(calculateDateOfBirth(traveler.age)),\n      Age: parseInt(traveler.age)\n    }));\n\n    // Convert contact details\n    const contactDetails = {\n      Address: ((_formData$billingAddr = formData.billingAddress) === null || _formData$billingAddr === void 0 ? void 0 : _formData$billingAddr.street) || '',\n      Postcode: ((_formData$billingAddr2 = formData.billingAddress) === null || _formData$billingAddr2 === void 0 ? void 0 : _formData$billingAddr2.postalCode) || '',\n      Email: ((_formData$travelers$ = formData.travelers[0]) === null || _formData$travelers$ === void 0 ? void 0 : _formData$travelers$.email) || '',\n      Telephone: ((_formData$travelers$2 = formData.travelers[0]) === null || _formData$travelers$2 === void 0 ? void 0 : _formData$travelers$2.phone) || ''\n    };\n\n    // Convert trip details\n    const quoteDetails = {\n      ResidenceID: getResidenceID(formData.countryOfResidence),\n      TypePolicyID: getTypePolicyID(formData.tripType),\n      TypePackageID: getTypePackageID(formData.tripType),\n      Destination: formData.destination,\n      StartDate: formatDateForTerracotta(formData.startDate),\n      EndDate: formatDateForTerracotta(formData.endDate),\n      Travellers: travelers,\n      ContactDetails: contactDetails\n    };\n    return {\n      userID: TERRACOTTA_USER_ID,\n      userCode: TERRACOTTA_USER_CODE,\n      quoteDetails\n    };\n  }\n}\n\n/**\r\n * Utility functions for data conversion\r\n */\n_TerracottaService = TerracottaService;\nTerracottaService.instance = void 0;\nfunction formatDateForTerracotta(dateString) {\n  if (!dateString) return '';\n  // Convert from YYYY-MM-DD to YYYY/MM/DD\n  return dateString.replace(/-/g, '/');\n}\nfunction calculateDateOfBirth(age) {\n  const currentYear = new Date().getFullYear();\n  const birthYear = currentYear - age;\n  // Use January 1st as default date\n  return `${birthYear}/01/01`;\n}\nfunction getResidenceID(country) {\n  // Map countries to Terracotta Residence IDs\n  const residenceMap = {\n    'Greece': 'GR',\n    'Germany': 'DE',\n    'United Kingdom': 'UK',\n    'France': 'FR',\n    'Italy': 'IT',\n    'Spain': 'ES',\n    'Netherlands': 'NL',\n    'Belgium': 'BE',\n    'Austria': 'AT',\n    'Switzerland': 'CH',\n    'United States': 'US',\n    'Canada': 'CA',\n    'Australia': 'AU'\n  };\n  return residenceMap[country] || 'GR'; // Default to Greece\n}\nfunction getTypePolicyID(tripType) {\n  // Map trip types to Terracotta Type Policy IDs\n  const policyMap = {\n    'single': '1',\n    // Single trip policy\n    'annual': '2',\n    // Annual multi-trip policy\n    'comprehensive': '3' // Comprehensive single trip policy\n  };\n  return policyMap[tripType] || '1'; // Default to single trip\n}\nfunction getTypePackageID(tripType) {\n  // Map trip types to Terracotta Type Package IDs\n  const packageMap = {\n    'single': '1',\n    'annual': '2',\n    'comprehensive': '3'\n  };\n  return packageMap[tripType] || '1';\n}\nexport default TerracottaService;","map":{"version":3,"names":["TERRACOTTA_BASE_URL","TERRACOTTA_USER_ID","TERRACOTTA_USER_CODE","SOAPBuilder","createEnvelope","body","buildTravelerXML","traveler","TravellerNumber","Title","FirstName","LastName","DateOfBirth","Age","buildContactDetailsXML","contact","Address","Postcode","Email","Telephone","buildQuoteDetailsXML","details","travelersXML","Travellers","map","join","contactXML","ContactDetails","ResidenceID","TypePolicyID","TypePackageID","Destination","StartDate","EndDate","buildAlterationDetailsXML","dynamicDetailsXML","DynamicDetails","length","detail","Position","FieldName","FieldValue","FieldSize","screeningAnswersXML","screeningQuestionAnswers","answer","questionNumber","eligibilityAnswersXML","eligibilityQuestionAnswers","AlterationID","buildScreeningAnswersXML","answers","XMLParser","parseQuoteResponse","xmlText","_xmlDoc$querySelector","parser","DOMParser","xmlDoc","parseFromString","parseError","querySelector","Error","textContent","message","quoteResults","quoteResultNodes","querySelectorAll","forEach","node","_node$querySelector","_node$querySelector2","_node$querySelector3","_node$querySelector4","_node$querySelector5","_node$querySelector6","_node$querySelector7","_node$querySelector8","result","QuoteID","schemaName","policyTypeName","SI","PW","Currency","IPT","parseFloat","GrossPrice","push","Message","error","console","parseScreeningQuestionsResponse","_xmlDoc$querySelector2","screeningQuestions","questionNodes","_node$querySelector9","_node$querySelector0","_node$querySelector1","_node$querySelector10","_node$querySelector11","_node$querySelector12","_node$querySelector13","_node$querySelector14","question","parseInt","yesMessage","noMessage","yesAction","noAction","yesActionText","noActionText","parseSavePolicyResponse","_xmlDoc$querySelector3","_xmlDoc$querySelector4","_xmlDoc$querySelector5","_xmlDoc$querySelector6","_xmlDoc$querySelector7","_xmlDoc$querySelector8","policySaved","policyID","certificate","TerracottaService","constructor","userID","userCode","getInstance","instance","makeSOAPRequest","method","requestBody","soapEnvelope","response","fetch","headers","ok","status","statusText","responseText","text","provideQuotation","request","quoteDetailsXML","quoteDetails","soapBody","provideQuotationWithAlterations","alterationDetailsXML","specificQuoteDetails","quoteID","getScreeningQuestions","savePolicyDetails","medicalScreeningReference","convertToTerracottaFormat","formData","_formData$billingAddr","_formData$billingAddr2","_formData$travelers$","_formData$travelers$2","travelers","index","firstName","lastName","formatDateForTerracotta","calculateDateOfBirth","age","contactDetails","billingAddress","street","postalCode","email","phone","getResidenceID","countryOfResidence","getTypePolicyID","tripType","getTypePackageID","destination","startDate","endDate","_TerracottaService","dateString","replace","currentYear","Date","getFullYear","birthYear","country","residenceMap","policyMap","packageMap"],"sources":["C:/Users/laptop-123/TravelInsurance_Demo_2/src/services/terracottaService.ts"],"sourcesContent":["/**\r\n * Terracotta Insurance Quote Integration Service\r\n * \r\n * This service handles all communication with the Terracotta Integrated Quote web service\r\n * using SOAP protocol. It provides methods for:\r\n * - Requesting quotes (ProvideQuotation)\r\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\r\n * - Getting screening questions (ScreeningQuestions)\r\n * - Saving policy details (SavePolicyDetails)\r\n */\r\n\r\n// Terracotta API Configuration\r\nconst TERRACOTTA_BASE_URL = 'http://www.asuaonline.com/ws/integratedquote.asmx';\r\nconst TERRACOTTA_USER_ID = 'YOUR_USER_ID'; // To be configured\r\nconst TERRACOTTA_USER_CODE = 'YOUR_USER_CODE'; // To be configured\r\n\r\n// TypeScript interfaces for Terracotta API data structures\r\n\r\nexport interface TerracottaTraveler {\r\n  TravellerNumber: number;\r\n  Title: string;\r\n  FirstName: string;\r\n  LastName: string;\r\n  DateOfBirth: string; // Format: YYYY/MM/DD\r\n  Age: number;\r\n}\r\n\r\nexport interface TerracottaContactDetails {\r\n  Address: string;\r\n  Postcode: string;\r\n  Email: string;\r\n  Telephone: string;\r\n}\r\n\r\nexport interface TerracottaQuoteDetails {\r\n  ResidenceID: string;\r\n  TypePolicyID: string; // Comma-separated list of policy type IDs\r\n  TypePackageID: string;\r\n  Destination: string;\r\n  StartDate: string; // Format: YYYY/MM/DD\r\n  EndDate: string; // Format: YYYY/MM/DD\r\n  Travellers: TerracottaTraveler[];\r\n  ContactDetails: TerracottaContactDetails;\r\n}\r\n\r\nexport interface TerracottaQuoteRequest {\r\n  userID: string;\r\n  userCode: string;\r\n  quoteDetails: TerracottaQuoteDetails;\r\n}\r\n\r\nexport interface TerracottaQuoteResult {\r\n  QuoteID: string;\r\n  schemaName: string;\r\n  policyTypeName: string;\r\n  SI: string; // Summary of cover PDF URL\r\n  PW: string; // Policy wording PDF URL\r\n  Currency: string;\r\n  IPT: number; // IPT amount\r\n  GrossPrice: number; // Quote price\r\n}\r\n\r\nexport interface TerracottaQuoteResponse {\r\n  Message: string;\r\n  quoteResults: TerracottaQuoteResult[];\r\n}\r\n\r\nexport interface TerracottaDynamicDetail {\r\n  Position: string;\r\n  FieldName: string;\r\n  FieldValue: string;\r\n  FieldSize: string;\r\n}\r\n\r\nexport interface TerracottaScreeningQuestionAnswer {\r\n  questionNumber: number;\r\n  answer: 'yes' | 'no';\r\n}\r\n\r\nexport interface TerracottaEligibilityQuestionAnswer {\r\n  questionNumber: number;\r\n  answer: 'yes' | 'no';\r\n}\r\n\r\nexport interface TerracottaAlterationDetails {\r\n  AlterationID: string; // Comma-separated list of additional cover IDs\r\n  Travellers: TerracottaTraveler[];\r\n  ContactDetails: TerracottaContactDetails;\r\n  DynamicDetails?: TerracottaDynamicDetail[];\r\n  screeningQuestionAnswers?: TerracottaScreeningQuestionAnswer[];\r\n  eligibilityQuestionAnswers?: TerracottaEligibilityQuestionAnswer[];\r\n}\r\n\r\nexport interface TerracottaQuoteWithAlterationsRequest {\r\n  userID: string;\r\n  userCode: string;\r\n  quoteID: string;\r\n  specificQuoteDetails: TerracottaAlterationDetails;\r\n}\r\n\r\nexport interface TerracottaScreeningQuestion {\r\n  questionNumber: number;\r\n  question: string;\r\n  yesMessage: string;\r\n  noMessage: string;\r\n  yesAction: string;\r\n  noAction: string;\r\n  yesActionText: string;\r\n  noActionText: string;\r\n}\r\n\r\nexport interface TerracottaScreeningQuestionsResponse {\r\n  Message: string;\r\n  screeningQuestions: TerracottaScreeningQuestion[];\r\n}\r\n\r\nexport interface TerracottaSavePolicyRequest {\r\n  userID: string;\r\n  userCode: string;\r\n  quoteID: string;\r\n  screeningQuestionAnswers: TerracottaScreeningQuestionAnswer[];\r\n  medicalScreeningReference?: string;\r\n}\r\n\r\nexport interface TerracottaSavePolicyResponse {\r\n  Message: string;\r\n  policySaved: 'Yes' | 'No';\r\n  policyID: string;\r\n  certificate: string; // URL for policy certificate\r\n  PW: string; // Policy wording PDF URL\r\n  SI: string; // Summary of cover PDF URL\r\n}\r\n\r\n/**\r\n * SOAP XML Builder utility functions\r\n */\r\nclass SOAPBuilder {\r\n  static createEnvelope(body: string): string {\r\n    return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\r\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \r\n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \r\n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\r\n  <soap:Body>\r\n    ${body}\r\n  </soap:Body>\r\n</soap:Envelope>`;\r\n  }\r\n\r\n  static buildTravelerXML(traveler: TerracottaTraveler): string {\r\n    return `\r\n      <Travellers>\r\n        <TravellerNumber>${traveler.TravellerNumber}</TravellerNumber>\r\n        <Title>${traveler.Title}</Title>\r\n        <FirstName>${traveler.FirstName}</FirstName>\r\n        <LastName>${traveler.LastName}</LastName>\r\n        <DateOfBirth>${traveler.DateOfBirth}</DateOfBirth>\r\n        <Age>${traveler.Age}</Age>\r\n      </Travellers>`;\r\n  }\r\n\r\n  static buildContactDetailsXML(contact: TerracottaContactDetails): string {\r\n    return `\r\n      <ContactDetails>\r\n        <Address>${contact.Address}</Address>\r\n        <Postcode>${contact.Postcode}</Postcode>\r\n        <Email>${contact.Email}</Email>\r\n        <Telephone>${contact.Telephone}</Telephone>\r\n      </ContactDetails>`;\r\n  }\r\n\r\n  static buildQuoteDetailsXML(details: TerracottaQuoteDetails): string {\r\n    const travelersXML = details.Travellers.map(traveler => \r\n      this.buildTravelerXML(traveler)\r\n    ).join('');\r\n\r\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\r\n\r\n    return `\r\n      <quoteDetails>\r\n        <ResidenceID>${details.ResidenceID}</ResidenceID>\r\n        <TypePolicyID>${details.TypePolicyID}</TypePolicyID>\r\n        <TypePackageID>${details.TypePackageID}</TypePackageID>\r\n        <Destination>${details.Destination}</Destination>\r\n        <StartDate>${details.StartDate}</StartDate>\r\n        <EndDate>${details.EndDate}</EndDate>\r\n        ${travelersXML}\r\n        ${contactXML}\r\n      </quoteDetails>`;\r\n  }\r\n\r\n  static buildAlterationDetailsXML(details: TerracottaAlterationDetails): string {\r\n    const travelersXML = details.Travellers.map(traveler => \r\n      this.buildTravelerXML(traveler)\r\n    ).join('');\r\n\r\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\r\n\r\n    let dynamicDetailsXML = '';\r\n    if (details.DynamicDetails && details.DynamicDetails.length > 0) {\r\n      dynamicDetailsXML = '<DynamicDetails>' + \r\n        details.DynamicDetails.map(detail => `\r\n          <DynamicDetail_SavedValue>\r\n            <Position>${detail.Position}</Position>\r\n            <FieldName>${detail.FieldName}</FieldName>\r\n            <FieldValue>${detail.FieldValue}</FieldValue>\r\n            <FieldSize>${detail.FieldSize}</FieldSize>\r\n          </DynamicDetail_SavedValue>`\r\n        ).join('') + '</DynamicDetails>';\r\n    }\r\n\r\n    let screeningAnswersXML = '';\r\n    if (details.screeningQuestionAnswers && details.screeningQuestionAnswers.length > 0) {\r\n      screeningAnswersXML = '<screeningQuestionAnswers>' + \r\n        details.screeningQuestionAnswers.map(answer => `\r\n          <screeningQuestionAnswer>\r\n            <questionNumber>${answer.questionNumber}</questionNumber>\r\n            <answer>${answer.answer}</answer>\r\n          </screeningQuestionAnswer>`\r\n        ).join('') + '</screeningQuestionAnswers>';\r\n    }\r\n\r\n    let eligibilityAnswersXML = '';\r\n    if (details.eligibilityQuestionAnswers && details.eligibilityQuestionAnswers.length > 0) {\r\n      eligibilityAnswersXML = '<EligibilityQuestionAnswers>' + \r\n        details.eligibilityQuestionAnswers.map(answer => `\r\n          <eligibilityQuestionAnswer>\r\n            <questionNumber>${answer.questionNumber}</questionNumber>\r\n            <answer>${answer.answer}</answer>\r\n          </eligibilityQuestionAnswer>`\r\n        ).join('') + '</EligibilityQuestionAnswers>';\r\n    }\r\n\r\n    return `\r\n      <specificQuoteDetails>\r\n        <AlterationID>${details.AlterationID}</AlterationID>\r\n        ${travelersXML}\r\n        ${contactXML}\r\n        ${dynamicDetailsXML}\r\n        ${screeningAnswersXML}\r\n        ${eligibilityAnswersXML}\r\n      </specificQuoteDetails>`;\r\n  }\r\n\r\n  static buildScreeningAnswersXML(answers: TerracottaScreeningQuestionAnswer[]): string {\r\n    return '<screeningQuestionAnswers>' + \r\n      answers.map(answer => `\r\n        <screeningQuestionAnswer>\r\n          <questionNumber>${answer.questionNumber}</questionNumber>\r\n          <answer>${answer.answer}</answer>\r\n        </screeningQuestionAnswer>`\r\n      ).join('') + '</screeningQuestionAnswers>';\r\n  }\r\n}\r\n\r\n/**\r\n * XML Parser utility functions\r\n */\r\nclass XMLParser {\r\n  static parseQuoteResponse(xmlText: string): TerracottaQuoteResponse {\r\n    try {\r\n      const parser = new DOMParser();\r\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\r\n      \r\n      // Check for parsing errors\r\n      const parseError = xmlDoc.querySelector('parsererror');\r\n      if (parseError) {\r\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\r\n      }\r\n\r\n      const message = xmlDoc.querySelector('Message')?.textContent || '';\r\n      const quoteResults: TerracottaQuoteResult[] = [];\r\n\r\n      const quoteResultNodes = xmlDoc.querySelectorAll('quoteResults');\r\n      quoteResultNodes.forEach(node => {\r\n        const result: TerracottaQuoteResult = {\r\n          QuoteID: node.querySelector('QuoteID')?.textContent || '',\r\n          schemaName: node.querySelector('schemaName')?.textContent || '',\r\n          policyTypeName: node.querySelector('policyTypeName')?.textContent || '',\r\n          SI: node.querySelector('SI')?.textContent || '',\r\n          PW: node.querySelector('PW')?.textContent || '',\r\n          Currency: node.querySelector('Currency')?.textContent || '',\r\n          IPT: parseFloat(node.querySelector('IPT')?.textContent || '0'),\r\n          GrossPrice: parseFloat(node.querySelector('GrossPrice')?.textContent || '0')\r\n        };\r\n        quoteResults.push(result);\r\n      });\r\n\r\n      return { Message: message, quoteResults };\r\n    } catch (error) {\r\n      console.error('Error parsing quote response:', error);\r\n      throw new Error(`Failed to parse quote response: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  static parseScreeningQuestionsResponse(xmlText: string): TerracottaScreeningQuestionsResponse {\r\n    try {\r\n      const parser = new DOMParser();\r\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\r\n      \r\n      const parseError = xmlDoc.querySelector('parsererror');\r\n      if (parseError) {\r\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\r\n      }\r\n\r\n      const message = xmlDoc.querySelector('Message')?.textContent || '';\r\n      const screeningQuestions: TerracottaScreeningQuestion[] = [];\r\n\r\n      const questionNodes = xmlDoc.querySelectorAll('screeningQuestion');\r\n      questionNodes.forEach(node => {\r\n        const question: TerracottaScreeningQuestion = {\r\n          questionNumber: parseInt(node.querySelector('questionNumber')?.textContent || '0'),\r\n          question: node.querySelector('question')?.textContent || '',\r\n          yesMessage: node.querySelector('yesMessage')?.textContent || '',\r\n          noMessage: node.querySelector('noMessage')?.textContent || '',\r\n          yesAction: node.querySelector('yesAction')?.textContent || '',\r\n          noAction: node.querySelector('noAction')?.textContent || '',\r\n          yesActionText: node.querySelector('yesActionText')?.textContent || '',\r\n          noActionText: node.querySelector('noActionText')?.textContent || ''\r\n        };\r\n        screeningQuestions.push(question);\r\n      });\r\n\r\n      return { Message: message, screeningQuestions };\r\n    } catch (error) {\r\n      console.error('Error parsing screening questions response:', error);\r\n      throw new Error(`Failed to parse screening questions response: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  static parseSavePolicyResponse(xmlText: string): TerracottaSavePolicyResponse {\r\n    try {\r\n      const parser = new DOMParser();\r\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\r\n      \r\n      const parseError = xmlDoc.querySelector('parsererror');\r\n      if (parseError) {\r\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\r\n      }\r\n\r\n      return {\r\n        Message: xmlDoc.querySelector('Message')?.textContent || '',\r\n        policySaved: xmlDoc.querySelector('policySaved')?.textContent as 'Yes' | 'No' || 'No',\r\n        policyID: xmlDoc.querySelector('policyID')?.textContent || '',\r\n        certificate: xmlDoc.querySelector('certificate')?.textContent || '',\r\n        PW: xmlDoc.querySelector('PW')?.textContent || '',\r\n        SI: xmlDoc.querySelector('SI')?.textContent || ''\r\n      };\r\n    } catch (error) {\r\n      console.error('Error parsing save policy response:', error);\r\n      throw new Error(`Failed to parse save policy response: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Main Terracotta Service Class\r\n */\r\nexport class TerracottaService {\r\n  private static instance: TerracottaService;\r\n  private userID: string;\r\n  private userCode: string;\r\n\r\n  constructor(userID: string = TERRACOTTA_USER_ID, userCode: string = TERRACOTTA_USER_CODE) {\r\n    this.userID = userID;\r\n    this.userCode = userCode;\r\n  }\r\n\r\n  static getInstance(userID?: string, userCode?: string): TerracottaService {\r\n    if (!TerracottaService.instance) {\r\n      TerracottaService.instance = new TerracottaService(userID, userCode);\r\n    }\r\n    return TerracottaService.instance;\r\n  }\r\n\r\n  /**\r\n   * Generic SOAP request method\r\n   */\r\n  private async makeSOAPRequest(method: string, requestBody: string): Promise<string> {\r\n    const soapEnvelope = SOAPBuilder.createEnvelope(requestBody);\r\n    \r\n    const response = await fetch(TERRACOTTA_BASE_URL, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'text/xml; charset=utf-8',\r\n        'SOAPAction': `http://tempuri.org/${method}`\r\n      },\r\n      body: soapEnvelope\r\n    });\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`SOAP request failed: ${response.status} ${response.statusText}`);\r\n    }\r\n\r\n    const responseText = await response.text();\r\n    return responseText;\r\n  }\r\n\r\n  /**\r\n   * 1. Request for quotations\r\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\r\n   */\r\n  async provideQuotation(request: TerracottaQuoteRequest): Promise<TerracottaQuoteResponse> {\r\n    try {\r\n      const quoteDetailsXML = SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);\r\n      \r\n      const soapBody = `\r\n        <${'ProvideQuotation'} xmlns=\"http://tempuri.org/\">\r\n          <userID>${request.userID}</userID>\r\n          <userCode>${request.userCode}</userCode>\r\n          ${quoteDetailsXML}\r\n        </${'ProvideQuotation'}>`;\r\n\r\n      const responseText = await this.makeSOAPRequest('ProvideQuotation', soapBody);\r\n      return XMLParser.parseQuoteResponse(responseText);\r\n    } catch (error) {\r\n      console.error('Error in provideQuotation:', error);\r\n      throw new Error(`Failed to get quotes from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 2. Quote for Additional Covers\r\n   * Calls ProvideQuotationWithAlterations to update an existing quote with additional covers\r\n   */\r\n  async provideQuotationWithAlterations(request: TerracottaQuoteWithAlterationsRequest): Promise<TerracottaQuoteResponse> {\r\n    try {\r\n      const alterationDetailsXML = SOAPBuilder.buildAlterationDetailsXML(request.specificQuoteDetails);\r\n      \r\n      const soapBody = `\r\n        <${'ProvideQuotationWithAlterations'} xmlns=\"http://tempuri.org/\">\r\n          <userID>${request.userID}</userID>\r\n          <userCode>${request.userCode}</userCode>\r\n          <quoteID>${request.quoteID}</quoteID>\r\n          ${alterationDetailsXML}\r\n        </${'ProvideQuotationWithAlterations'}>`;\r\n\r\n      const responseText = await this.makeSOAPRequest('ProvideQuotationWithAlterations', soapBody);\r\n      return XMLParser.parseQuoteResponse(responseText);\r\n    } catch (error) {\r\n      console.error('Error in provideQuotationWithAlterations:', error);\r\n      throw new Error(`Failed to update quote with alterations: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 3. Obtain Screening Questions\r\n   * Calls ScreeningQuestions to get screening questions for the selected quote\r\n   */\r\n  async getScreeningQuestions(quoteID: string): Promise<TerracottaScreeningQuestionsResponse> {\r\n    try {\r\n      const soapBody = `\r\n        <${'ScreeningQuestions'} xmlns=\"http://tempuri.org/\">\r\n          <userID>${this.userID}</userID>\r\n          <userCode>${this.userCode}</userCode>\r\n          <quoteID>${quoteID}</quoteID>\r\n        </${'ScreeningQuestions'}>`;\r\n\r\n      const responseText = await this.makeSOAPRequest('ScreeningQuestions', soapBody);\r\n      return XMLParser.parseScreeningQuestionsResponse(responseText);\r\n    } catch (error) {\r\n      console.error('Error in getScreeningQuestions:', error);\r\n      throw new Error(`Failed to get screening questions: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * 4. Save a quote as a Live policy\r\n   * Calls SavePolicyDetails to convert the quote into a live policy\r\n   */\r\n  async savePolicyDetails(request: TerracottaSavePolicyRequest): Promise<TerracottaSavePolicyResponse> {\r\n    try {\r\n      const screeningAnswersXML = SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);\r\n      \r\n      const soapBody = `\r\n        <${'SavePolicyDetails'} xmlns=\"http://tempuri.org/\">\r\n          <userID>${request.userID}</userID>\r\n          <userCode>${request.userCode}</userCode>\r\n          <quoteID>${request.quoteID}</quoteID>\r\n          ${screeningAnswersXML}\r\n          ${request.medicalScreeningReference ? `<medicalScreeningReference>${request.medicalScreeningReference}</medicalScreeningReference>` : ''}\r\n        </${'SavePolicyDetails'}>`;\r\n\r\n      const responseText = await this.makeSOAPRequest('SavePolicyDetails', soapBody);\r\n      return XMLParser.parseSavePolicyResponse(responseText);\r\n    } catch (error) {\r\n      console.error('Error in savePolicyDetails:', error);\r\n      throw new Error(`Failed to save policy details: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Utility method to convert frontend data to Terracotta format\r\n   */\r\n  static convertToTerracottaFormat(formData: any): TerracottaQuoteRequest {\r\n    // Convert travelers to Terracotta format\r\n    const travelers: TerracottaTraveler[] = formData.travelers.map((traveler: any, index: number) => ({\r\n      TravellerNumber: index + 1,\r\n      Title: 'Mr', // Default title, could be made configurable\r\n      FirstName: traveler.firstName,\r\n      LastName: traveler.lastName,\r\n      DateOfBirth: formatDateForTerracotta(calculateDateOfBirth(traveler.age)),\r\n      Age: parseInt(traveler.age)\r\n    }));\r\n\r\n    // Convert contact details\r\n    const contactDetails: TerracottaContactDetails = {\r\n      Address: formData.billingAddress?.street || '',\r\n      Postcode: formData.billingAddress?.postalCode || '',\r\n      Email: formData.travelers[0]?.email || '',\r\n      Telephone: formData.travelers[0]?.phone || ''\r\n    };\r\n\r\n    // Convert trip details\r\n    const quoteDetails: TerracottaQuoteDetails = {\r\n      ResidenceID: getResidenceID(formData.countryOfResidence),\r\n      TypePolicyID: getTypePolicyID(formData.tripType),\r\n      TypePackageID: getTypePackageID(formData.tripType),\r\n      Destination: formData.destination,\r\n      StartDate: formatDateForTerracotta(formData.startDate),\r\n      EndDate: formatDateForTerracotta(formData.endDate),\r\n      Travellers: travelers,\r\n      ContactDetails: contactDetails\r\n    };\r\n\r\n    return {\r\n      userID: TERRACOTTA_USER_ID,\r\n      userCode: TERRACOTTA_USER_CODE,\r\n      quoteDetails\r\n    };\r\n  }\r\n}\r\n\r\n/**\r\n * Utility functions for data conversion\r\n */\r\n\r\nfunction formatDateForTerracotta(dateString: string): string {\r\n  if (!dateString) return '';\r\n  // Convert from YYYY-MM-DD to YYYY/MM/DD\r\n  return dateString.replace(/-/g, '/');\r\n}\r\n\r\nfunction calculateDateOfBirth(age: number): string {\r\n  const currentYear = new Date().getFullYear();\r\n  const birthYear = currentYear - age;\r\n  // Use January 1st as default date\r\n  return `${birthYear}/01/01`;\r\n}\r\n\r\nfunction getResidenceID(country: string): string {\r\n  // Map countries to Terracotta Residence IDs\r\n  const residenceMap: { [key: string]: string } = {\r\n    'Greece': 'GR',\r\n    'Germany': 'DE',\r\n    'United Kingdom': 'UK',\r\n    'France': 'FR',\r\n    'Italy': 'IT',\r\n    'Spain': 'ES',\r\n    'Netherlands': 'NL',\r\n    'Belgium': 'BE',\r\n    'Austria': 'AT',\r\n    'Switzerland': 'CH',\r\n    'United States': 'US',\r\n    'Canada': 'CA',\r\n    'Australia': 'AU'\r\n  };\r\n  \r\n  return residenceMap[country] || 'GR'; // Default to Greece\r\n}\r\n\r\nfunction getTypePolicyID(tripType: string): string {\r\n  // Map trip types to Terracotta Type Policy IDs\r\n  const policyMap: { [key: string]: string } = {\r\n    'single': '1', // Single trip policy\r\n    'annual': '2', // Annual multi-trip policy\r\n    'comprehensive': '3' // Comprehensive single trip policy\r\n  };\r\n  \r\n  return policyMap[tripType] || '1'; // Default to single trip\r\n}\r\n\r\nfunction getTypePackageID(tripType: string): string {\r\n  // Map trip types to Terracotta Type Package IDs\r\n  const packageMap: { [key: string]: string } = {\r\n    'single': '1',\r\n    'annual': '2',\r\n    'comprehensive': '3'\r\n  };\r\n  \r\n  return packageMap[tripType] || '1';\r\n}\r\n\r\nexport default TerracottaService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}