{"ast":null,"code":"var _TerracottaService;/**\n * Terracotta Insurance Quote Integration Service\n * \n * This service handles all communication with the Terracotta Integrated Quote web service\n * using SOAP protocol. It provides methods for:\n * - Requesting quotes (ProvideQuotation)\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\n * - Getting screening questions (ScreeningQuestions)\n * - Saving policy details (SavePolicyDetails)\n */// Import xmldom for Node.js XML parsing\nlet DOMParser;if(typeof window==='undefined'){// Node.js environment\nconst{DOMParser:XMDOMParser}=require('xmldom');DOMParser=XMDOMParser;}else{// Browser environment\nDOMParser=window.DOMParser;}// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL='https://www.asuaonline.com/ws/integratedquote.asmx';const PROXY_BASE_URL='http://localhost:3001/api/terracotta';const TERRACOTTA_USER_ID='4072';const TERRACOTTA_USER_CODE='111427';// TypeScript interfaces for Terracotta API data structures\n/**\n * Helper function to decode HTML entities and format currency\n */function formatCurrencyLimit(htmlString){if(!htmlString)return'';// Decode HTML entities\nconst textarea=document.createElement('textarea');textarea.innerHTML=htmlString;let decoded=textarea.value;// Additional manual replacements for common entities\ndecoded=decoded.replace(/&euro;/gi,'€').replace(/&pound;/gi,'£').replace(/&dollar;/gi,'$').replace(/&amp;/gi,'&').replace(/&lt;/gi,'<').replace(/&gt;/gi,'>').replace(/&quot;/gi,'\"').replace(/&#39;/gi,\"'\");// Format numbers with thousand separators\n// Match patterns like €32000 or euro32000 and add commas\ndecoded=decoded.replace(/([€£$]|euro|pound|dollar)?\\s*(\\d{4,})/gi,(match,currency,number)=>{const formattedNumber=parseInt(number).toLocaleString('en-US');return currency?\"\".concat(currency).concat(formattedNumber):formattedNumber;});// Fix spacing: \"Up to€32,000\" -> \"Up to €32,000\"\ndecoded=decoded.replace(/(\\w)([€£$])/g,'$1 $2');return decoded;}/**\n * SOAP XML Builder utility functions\n */class SOAPBuilder{static createEnvelope(body){return\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<soap:Envelope xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \\n               xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \\n               xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n  <soap:Body>\\n    \".concat(body,\"\\n  </soap:Body>\\n</soap:Envelope>\");}static buildTravelerXML(traveler){return\"\\n      <Traveller>\\n        <TravellerNumber>\".concat(traveler.TravellerNumber,\"</TravellerNumber>\\n        <Title>\").concat(traveler.Title,\"</Title>\\n        <FirstName>\").concat(traveler.FirstName,\"</FirstName>\\n        <LastName>\").concat(traveler.LastName,\"</LastName>\\n        <DateOfBirth>\").concat(traveler.DateOfBirth,\"</DateOfBirth>\\n        <Age>\").concat(traveler.Age,\"</Age>\\n        <AgebandID>\").concat(traveler.AgebandID||0,\"</AgebandID>\\n        <TitleID>\").concat(traveler.TitleID||0,\"</TitleID>\\n        <minAge>\").concat(traveler.minAge||traveler.Age,\"</minAge>\\n        <maxAge>\").concat(traveler.maxAge||traveler.Age,\"</maxAge>\\n        <AlterationID>\").concat(traveler.AlterationID||'',\"</AlterationID>\\n        <msPrice>\").concat(traveler.msPrice||0,\"</msPrice>\\n        <msPriceExcIPT>\").concat(traveler.msPriceExcIPT||0,\"</msPriceExcIPT>\\n        <msConditions>\").concat(traveler.msConditions||'',\"</msConditions>\\n        <ScreeningInformation xsi:nil=\\\"true\\\" />\\n      </Traveller>\");}static buildContactDetailsXML(contact){return\"\\n      <ContactDetails>\\n        <Address>\".concat(contact.Address,\"</Address>\\n        <Postcode>\").concat(contact.Postcode,\"</Postcode>\\n        <Email>\").concat(contact.Email,\"</Email>\\n        <Telephone>\").concat(contact.Telephone,\"</Telephone>\\n        \").concat(contact.VehicleMakeModel?\"<VehicleMakeModel>\".concat(contact.VehicleMakeModel,\"</VehicleMakeModel>\"):'',\"\\n        \").concat(contact.VehicleLicensePlate?\"<VehicleLicensePlate>\".concat(contact.VehicleLicensePlate,\"</VehicleLicensePlate>\"):'',\"\\n        \").concat(contact.VehicleYearManufacture?\"<VehicleYearManufacture>\".concat(contact.VehicleYearManufacture,\"</VehicleYearManufacture>\"):'',\"\\n      </ContactDetails>\");}static buildQuoteDetailsXML(details){const travelersXML=details.Travellers.map(traveler=>this.buildTravelerXML(traveler)).join('');const contactXML=this.buildContactDetailsXML(details.ContactDetails);return\"\\n      <quoteDetails>\\n        <ResidenceID>\".concat(parseInt(details.ResidenceID)||1,\"</ResidenceID>\\n        <TypePolicyID>\").concat(details.TypePolicyID,\"</TypePolicyID>\\n        <TypePackageID>\").concat(parseInt(details.TypePackageID)||1,\"</TypePackageID>\\n        <Destination>\").concat(details.Destination,\"</Destination>\\n        <StartDate>\").concat(details.StartDate,\"</StartDate>\\n        <EndDate>\").concat(details.EndDate,\"</EndDate>\\n        <Travellers>\\n          \").concat(travelersXML,\"\\n        </Travellers>\\n        \").concat(contactXML,\"\\n        \").concat(details.includeAnnualQuotes!==undefined?\"<includeAnnualQuotes>\".concat(details.includeAnnualQuotes,\"</includeAnnualQuotes>\"):'',\"\\n        \").concat(details.includeUpsell!==undefined?\"<includeUpsell>\".concat(details.includeUpsell,\"</includeUpsell>\"):'',\"\\n        \").concat(details.currencyID?\"<currencyID>\".concat(details.currencyID,\"</currencyID>\"):'',\"\\n        \").concat(details.schemaIDFilter?\"<schemaIDFilter>\".concat(details.schemaIDFilter,\"</schemaIDFilter>\"):'',\"\\n      </quoteDetails>\");}static buildScreeningAnswersXML(answers){return'<screeningQuestionAnswers>'+answers.map(answer=>\"\\n        <screeningQuestionAnswer>\\n          <questionNumber>\".concat(answer.questionNumber,\"</questionNumber>\\n          <answer>\").concat(answer.answer,\"</answer>\\n        </screeningQuestionAnswer>\")).join('')+'</screeningQuestionAnswers>';}static buildEligibilityAnswersXML(answers){return'<EligibilityQuestionAnswers>'+answers.map(answer=>\"\\n        <eligibilityQuestionAnswer>\\n          <questionNumber>\".concat(answer.questionNumber,\"</questionNumber>\\n          <answer>\").concat(answer.answer,\"</answer>\\n        </eligibilityQuestionAnswer>\")).join('')+'</EligibilityQuestionAnswers>';}static buildDynamicDetailsXML(details){return'<DynamicDetails>'+details.map(detail=>\"\\n        <DynamicDetail_SavedValue>\\n          <Position>\".concat(detail.Position,\"</Position>\\n          <FieldName>\").concat(detail.FieldName,\"</FieldName>\\n          <FieldValue>\").concat(detail.FieldValue,\"</FieldValue>\\n          <FieldSize>\").concat(detail.FieldSize,\"</FieldSize>\\n        </DynamicDetail_SavedValue>\")).join('')+'</DynamicDetails>';}static buildSpecificQuoteDetailsXML(details){const travelersXML=details.Travellers.map(traveler=>this.buildTravelerXML(traveler)).join('');const contactXML=this.buildContactDetailsXML(details.ContactDetails);const dynamicDetailsXML=details.DynamicDetails?this.buildDynamicDetailsXML(details.DynamicDetails):'';const screeningAnswersXML=details.screeningQuestionAnswers?this.buildScreeningAnswersXML(details.screeningQuestionAnswers):'';const eligibilityAnswersXML=details.EligibilityQuestionAnswers?this.buildEligibilityAnswersXML(details.EligibilityQuestionAnswers):'';return\"\\n      <specificQuoteDetails>\\n        <AlterationID>\".concat(details.AlterationID,\"</AlterationID>\\n        <Travellers>\\n          \").concat(travelersXML,\"\\n        </Travellers>\\n        \").concat(contactXML,\"\\n        \").concat(dynamicDetailsXML,\"\\n        \").concat(screeningAnswersXML,\"\\n        \").concat(eligibilityAnswersXML,\"\\n      </specificQuoteDetails>\");}}/**\n * XML Parser utility functions\n */class XMLParser{static getXMLParser(){return new DOMParser();}static parseQuoteResponse(xmlText){try{var _xmlDoc$querySelector;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');// Check for parsing errors\nconst parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector===void 0?void 0:_xmlDoc$querySelector.textContent)||'';const quoteResults=[];// Select only child quoteResults, not the parent container\n// Handle both ProvideQuotation and ProvideQuotationWithAlterations responses\nlet quoteResultNodes=xmlDoc.querySelectorAll('ProvideQuotationResult > quoteResults > quoteResults');// If not found, try ProvideQuotationWithAlterationsResult\nif(quoteResultNodes.length===0){quoteResultNodes=xmlDoc.querySelectorAll('ProvideQuotationWithAlterationsResult > quoteResults > quoteResults');}// If still not found, try without the parent Result element\nif(quoteResultNodes.length===0){quoteResultNodes=xmlDoc.querySelectorAll('quoteResults > quoteResults');}console.log(\"\\uD83D\\uDCCA Found \".concat(quoteResultNodes.length,\" quote result nodes in XML\"));quoteResultNodes.forEach(node=>{var _node$querySelector,_node$querySelector2,_node$querySelector3,_node$querySelector4,_node$querySelector5,_node$querySelector6,_node$querySelector7,_node$querySelector8,_node$querySelector9,_node$querySelector0,_node$querySelector1,_node$querySelector10,_node$querySelector11,_node$querySelector12,_node$querySelector13,_node$querySelector14,_node$querySelector15,_node$querySelector16,_node$querySelector17,_node$querySelector18,_node$querySelector19,_node$querySelector20,_node$querySelector21,_node$querySelector22,_node$querySelector23,_node$querySelector24,_node$querySelector25,_node$querySelector26,_node$querySelector27,_node$querySelector28,_node$querySelector29,_node$querySelector30,_node$querySelector31,_node$querySelector32,_node$querySelector33,_node$querySelector34,_node$querySelector35,_node$querySelector36,_node$querySelector37,_node$querySelector38,_node$querySelector39,_node$querySelector40,_node$querySelector41,_node$querySelector42,_node$querySelector43,_node$querySelector44;// Only process nodes that have QuoteID (skip empty parent nodes)\nconst quoteID=((_node$querySelector=node.querySelector('QuoteID'))===null||_node$querySelector===void 0?void 0:_node$querySelector.textContent)||'';if(!quoteID){console.log('⚠️ Skipping node without QuoteID');return;// Skip empty nodes\n}console.log(\"\\u2705 Processing quote result with QuoteID: \".concat(quoteID));const grossPriceText=((_node$querySelector2=node.querySelector('GrossPrice'))===null||_node$querySelector2===void 0?void 0:_node$querySelector2.textContent)||'0';const grossPriceValue=parseFloat(grossPriceText);console.log(\"\\uD83D\\uDCB0 Extracted GrossPrice: \".concat(grossPriceText,\" -> \").concat(grossPriceValue));const result={QuoteID:quoteID,schemaName:((_node$querySelector3=node.querySelector('schemaName'))===null||_node$querySelector3===void 0?void 0:_node$querySelector3.textContent)||'',policytypeName:((_node$querySelector4=node.querySelector('policytypeName'))===null||_node$querySelector4===void 0?void 0:_node$querySelector4.textContent)||'',residenceName:((_node$querySelector5=node.querySelector('residenceName'))===null||_node$querySelector5===void 0?void 0:_node$querySelector5.textContent)||'',destinationName:((_node$querySelector6=node.querySelector('destinationName'))===null||_node$querySelector6===void 0?void 0:_node$querySelector6.textContent)||'',startDate:((_node$querySelector7=node.querySelector('startDate'))===null||_node$querySelector7===void 0?void 0:_node$querySelector7.textContent)||'',endDate:((_node$querySelector8=node.querySelector('endDate'))===null||_node$querySelector8===void 0?void 0:_node$querySelector8.textContent)||'',SI:((_node$querySelector9=node.querySelector('SI'))===null||_node$querySelector9===void 0?void 0:_node$querySelector9.textContent)||'',PW:((_node$querySelector0=node.querySelector('PW'))===null||_node$querySelector0===void 0?void 0:_node$querySelector0.textContent)||'',KF:((_node$querySelector1=node.querySelector('KF'))===null||_node$querySelector1===void 0?void 0:_node$querySelector1.textContent)||'',HelpFile:((_node$querySelector10=node.querySelector('HelpFile'))===null||_node$querySelector10===void 0?void 0:_node$querySelector10.textContent)||'',currency:((_node$querySelector11=node.querySelector('currency'))===null||_node$querySelector11===void 0?void 0:_node$querySelector11.textContent)||'',IPT:parseFloat(((_node$querySelector12=node.querySelector('IPT'))===null||_node$querySelector12===void 0?void 0:_node$querySelector12.textContent)||'0'),IPTRate:parseFloat(((_node$querySelector13=node.querySelector('IPTRate'))===null||_node$querySelector13===void 0?void 0:_node$querySelector13.textContent)||'0'),GrossPrice:grossPriceValue,screeningPremium:parseFloat(((_node$querySelector14=node.querySelector('screeningPremium'))===null||_node$querySelector14===void 0?void 0:_node$querySelector14.textContent)||'0'),IconURL:((_node$querySelector15=node.querySelector('IconURL'))===null||_node$querySelector15===void 0?void 0:_node$querySelector15.textContent)||'',SchemaID:parseInt(((_node$querySelector16=node.querySelector('SchemaID'))===null||_node$querySelector16===void 0?void 0:_node$querySelector16.textContent)||'0'),PolicyTypeID:parseInt(((_node$querySelector17=node.querySelector('PolicyTypeID'))===null||_node$querySelector17===void 0?void 0:_node$querySelector17.textContent)||'0'),DestinationID:parseInt(((_node$querySelector18=node.querySelector('DestinationID'))===null||_node$querySelector18===void 0?void 0:_node$querySelector18.textContent)||'0'),PackageID:parseInt(((_node$querySelector19=node.querySelector('PackageID'))===null||_node$querySelector19===void 0?void 0:_node$querySelector19.textContent)||'0'),MaxAgeAgebandID:parseInt(((_node$querySelector20=node.querySelector('MaxAgeAgebandID'))===null||_node$querySelector20===void 0?void 0:_node$querySelector20.textContent)||'0'),ScreeningID:parseInt(((_node$querySelector21=node.querySelector('ScreeningID'))===null||_node$querySelector21===void 0?void 0:_node$querySelector21.textContent)||'0'),groupPerProduct:((_node$querySelector22=node.querySelector('groupPerProduct'))===null||_node$querySelector22===void 0?void 0:_node$querySelector22.textContent)==='true',priceOrder:parseInt(((_node$querySelector23=node.querySelector('priceOrder'))===null||_node$querySelector23===void 0?void 0:_node$querySelector23.textContent)||'0'),IPID:((_node$querySelector24=node.querySelector('IPID'))===null||_node$querySelector24===void 0?void 0:_node$querySelector24.textContent)||'',typePolicyName:((_node$querySelector25=node.querySelector('typePolicyName'))===null||_node$querySelector25===void 0?void 0:_node$querySelector25.textContent)||'',typePackageName:((_node$querySelector26=node.querySelector('typePackageName'))===null||_node$querySelector26===void 0?void 0:_node$querySelector26.textContent)||'',currencyHTMLEncoded:((_node$querySelector27=node.querySelector('currencyHTMLEncoded'))===null||_node$querySelector27===void 0?void 0:_node$querySelector27.textContent)||'',AlterationID:((_node$querySelector28=node.querySelector('AlterationID'))===null||_node$querySelector28===void 0?void 0:_node$querySelector28.textContent)||'',packageName:((_node$querySelector29=node.querySelector('packageName'))===null||_node$querySelector29===void 0?void 0:_node$querySelector29.textContent)||'',isAnnual:parseInt(((_node$querySelector30=node.querySelector('isAnnual'))===null||_node$querySelector30===void 0?void 0:_node$querySelector30.textContent)||'0'),isBestBuy:parseInt(((_node$querySelector31=node.querySelector('isBestBuy'))===null||_node$querySelector31===void 0?void 0:_node$querySelector31.textContent)||'0'),maxDaysPerTrip:parseInt(((_node$querySelector32=node.querySelector('maxDaysPerTrip'))===null||_node$querySelector32===void 0?void 0:_node$querySelector32.textContent)||'0'),isBestBuyText:((_node$querySelector33=node.querySelector('isBestBuyText'))===null||_node$querySelector33===void 0?void 0:_node$querySelector33.textContent)||'',isBestBuyLocation:parseInt(((_node$querySelector34=node.querySelector('isBestBuyLocation'))===null||_node$querySelector34===void 0?void 0:_node$querySelector34.textContent)||'0'),numberToSort:parseFloat(((_node$querySelector35=node.querySelector('numberToSort'))===null||_node$querySelector35===void 0?void 0:_node$querySelector35.textContent)||'0'),coverLevel:parseInt(((_node$querySelector36=node.querySelector('coverLevel'))===null||_node$querySelector36===void 0?void 0:_node$querySelector36.textContent)||'0'),Discount:parseFloat(((_node$querySelector37=node.querySelector('Discount'))===null||_node$querySelector37===void 0?void 0:_node$querySelector37.textContent)||'0'),netUW:parseFloat(((_node$querySelector38=node.querySelector('netUW'))===null||_node$querySelector38===void 0?void 0:_node$querySelector38.textContent)||'0'),wbComm:parseFloat(((_node$querySelector39=node.querySelector('wbComm'))===null||_node$querySelector39===void 0?void 0:_node$querySelector39.textContent)||'0'),agentComm:parseFloat(((_node$querySelector40=node.querySelector('agentComm'))===null||_node$querySelector40===void 0?void 0:_node$querySelector40.textContent)||'0'),screeningPremiumPerPersonCSV:((_node$querySelector41=node.querySelector('screeningPremiumPerPersonCSV'))===null||_node$querySelector41===void 0?void 0:_node$querySelector41.textContent)||'',screeningPremiumExcIPTPerPersonCSV:((_node$querySelector42=node.querySelector('screeningPremiumExcIPTPerPersonCSV'))===null||_node$querySelector42===void 0?void 0:_node$querySelector42.textContent)||'',isNotCoveredPerPersonCSV:((_node$querySelector43=node.querySelector('isNotCoveredPerPersonCSV'))===null||_node$querySelector43===void 0?void 0:_node$querySelector43.textContent)||'',policytypeShortName:((_node$querySelector44=node.querySelector('policytypeShortName'))===null||_node$querySelector44===void 0?void 0:_node$querySelector44.textContent)||'',SummaryCovers:[]};// Parse SummaryCovers\nconst summaryCoversNode=node.querySelector('SummaryCovers');if(summaryCoversNode){const summaryCoverNodes=summaryCoversNode.querySelectorAll('summaryCover');const summaryCovers=[];summaryCoverNodes.forEach(coverNode=>{var _coverNode$querySelec,_coverNode$querySelec2,_coverNode$querySelec3,_coverNode$querySelec4;const rawLimit=((_coverNode$querySelec=coverNode.querySelector('Limit'))===null||_coverNode$querySelec===void 0?void 0:_coverNode$querySelec.textContent)||'';const rawExcess=((_coverNode$querySelec2=coverNode.querySelector('Excess'))===null||_coverNode$querySelec2===void 0?void 0:_coverNode$querySelec2.textContent)||'';summaryCovers.push({name:((_coverNode$querySelec3=coverNode.querySelector('name'))===null||_coverNode$querySelec3===void 0?void 0:_coverNode$querySelec3.textContent)||'',Limit:formatCurrencyLimit(rawLimit),Excess:formatCurrencyLimit(rawExcess),position:parseInt(((_coverNode$querySelec4=coverNode.querySelector('position'))===null||_coverNode$querySelec4===void 0?void 0:_coverNode$querySelec4.textContent)||'0')});});result.SummaryCovers=summaryCovers;}quoteResults.push(result);});return{Message:message,quoteResults};}catch(error){console.error('Error parsing quote response:',error);throw new Error(\"Failed to parse quote response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseScreeningQuestionsResponse(xmlText){try{var _xmlDoc$querySelector2;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector2=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector2===void 0?void 0:_xmlDoc$querySelector2.textContent)||'';const screeningQuestions=[];const questionNodes=xmlDoc.querySelectorAll('screeningQuestion');questionNodes.forEach(node=>{var _node$querySelector45,_node$querySelector46,_node$querySelector47,_node$querySelector48,_node$querySelector49,_node$querySelector50,_node$querySelector51,_node$querySelector52;const question={questionNumber:parseInt(((_node$querySelector45=node.querySelector('questionNumber'))===null||_node$querySelector45===void 0?void 0:_node$querySelector45.textContent)||'0'),question:((_node$querySelector46=node.querySelector('Question'))===null||_node$querySelector46===void 0?void 0:_node$querySelector46.textContent)||'',// Capital Q to match API response\nyesMessage:((_node$querySelector47=node.querySelector('yesMessage'))===null||_node$querySelector47===void 0?void 0:_node$querySelector47.textContent)||'',noMessage:((_node$querySelector48=node.querySelector('noMessage'))===null||_node$querySelector48===void 0?void 0:_node$querySelector48.textContent)||'',yesAction:((_node$querySelector49=node.querySelector('yesAction'))===null||_node$querySelector49===void 0?void 0:_node$querySelector49.textContent)||'',noAction:((_node$querySelector50=node.querySelector('noAction'))===null||_node$querySelector50===void 0?void 0:_node$querySelector50.textContent)||'',yesActionText:((_node$querySelector51=node.querySelector('yesActionText'))===null||_node$querySelector51===void 0?void 0:_node$querySelector51.textContent)||'',noActionText:((_node$querySelector52=node.querySelector('noActionText'))===null||_node$querySelector52===void 0?void 0:_node$querySelector52.textContent)||''};screeningQuestions.push(question);});return{Message:message,screeningQuestions};}catch(error){console.error('Error parsing screening questions response:',error);throw new Error(\"Failed to parse screening questions response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseEmailPolicyDocumentsResponse(xmlText){try{var _messageNode$textCont,_emailSentNode$textCo;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}console.log('🔍 Full EmailPolicyDocuments XML Response:',xmlText);// Check for success indicators\nconst messageNode=xmlDoc.querySelector('Message, message');const emailSentNode=xmlDoc.querySelector('emailSent, EmailSent, success, Success');const message=(messageNode===null||messageNode===void 0?void 0:(_messageNode$textCont=messageNode.textContent)===null||_messageNode$textCont===void 0?void 0:_messageNode$textCont.trim())||'';const emailSentValue=(emailSentNode===null||emailSentNode===void 0?void 0:(_emailSentNode$textCo=emailSentNode.textContent)===null||_emailSentNode$textCo===void 0?void 0:_emailSentNode$textCo.trim())||'';// Determine if email was sent successfully\nconst emailSent=emailSentValue.toLowerCase()==='true'||emailSentValue.toLowerCase()==='yes'||message.toLowerCase().includes('success')||message.toLowerCase().includes('sent');console.log('📧 Email sent status:',emailSent);console.log('📧 Response message:',message);return{emailSent,message};}catch(error){console.error('❌ Error parsing EmailPolicyDocuments response:',error);throw new Error(\"Failed to parse EmailPolicyDocuments response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseSavePolicyResponse(xmlText){try{const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}// Log the full XML for debugging\nconsole.log('🔍 Full SavePolicyDetails XML Response:',xmlText);// Try different possible XML structures and field names\nconst messageNode=xmlDoc.querySelector('Message, message');const policySavedNode=xmlDoc.querySelector('policySaved, PolicySaved');const policyIDNode=xmlDoc.querySelector('policyID, PolicyID');// Try multiple variations for certificate\nconst certificateNode=xmlDoc.querySelector('certificate, Certificate, cert, Cert, CertificateURL, certificateURL');const pwNode=xmlDoc.querySelector('PW, pw, PolicyWording, policyWording');const siNode=xmlDoc.querySelector('SI, si, SummaryInsurance, summaryInsurance, SummaryCover, summaryCover');const kfNode=xmlDoc.querySelector('KF, kf, KeyFacts, keyFacts');const ipidNode=xmlDoc.querySelector('IPID, ipid');const message=(messageNode===null||messageNode===void 0?void 0:messageNode.textContent)||'';const policySavedRaw=(policySavedNode===null||policySavedNode===void 0?void 0:policySavedNode.textContent)||'No';// Handle both \"Yes\"/\"No\" and \"true\"/\"false\" formats\nconst policySaved=policySavedRaw==='true'?'Yes':policySavedRaw==='false'?'No':policySavedRaw;const policyID=(policyIDNode===null||policyIDNode===void 0?void 0:policyIDNode.textContent)||'';const certificate=(certificateNode===null||certificateNode===void 0?void 0:certificateNode.textContent)||'';const pw=(pwNode===null||pwNode===void 0?void 0:pwNode.textContent)||'';const si=(siNode===null||siNode===void 0?void 0:siNode.textContent)||'';const kf=(kfNode===null||kfNode===void 0?void 0:kfNode.textContent)||'';const ipid=(ipidNode===null||ipidNode===void 0?void 0:ipidNode.textContent)||'';console.log('📋 Parsed SavePolicyDetails fields:');console.log('  - Message:',message);console.log('  - policySaved (raw):',policySavedRaw);console.log('  - policySaved (normalized):',policySaved);console.log('  - policyID:',policyID);console.log('  - certificate:',certificate||'⚠️ EMPTY/NOT FOUND');console.log('  - PW:',pw||'⚠️ EMPTY/NOT FOUND');console.log('  - SI:',si||'⚠️ EMPTY/NOT FOUND');console.log('  - KF:',kf||'⚠️ EMPTY/NOT FOUND');console.log('  - IPID:',ipid||'⚠️ EMPTY/NOT FOUND');// List all XML nodes for debugging\nconsole.log('📋 All XML element names in response:');const allElements=xmlDoc.querySelectorAll('*');const elementNames=Array.from(allElements).map(el=>el.tagName);console.log('  Available elements:',Array.from(new Set(elementNames)).join(', '));return{Message:message,policySaved:policySaved,policyID:policyID,certificate:certificate,PW:pw,SI:si,KF:kf,IPID:ipid};}catch(error){console.error('Error parsing save policy response:',error);throw new Error(\"Failed to parse save policy response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseProductListResponse(xmlText){try{var _xmlDoc$querySelector3,_xmlDoc$querySelector4;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector3=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector3===void 0?void 0:_xmlDoc$querySelector3.textContent)||'';const resultID=parseInt(((_xmlDoc$querySelector4=xmlDoc.querySelector('errorID'))===null||_xmlDoc$querySelector4===void 0?void 0:_xmlDoc$querySelector4.textContent)||'0');const schemas=[];const schemaNodes=xmlDoc.querySelectorAll('Schema');schemaNodes.forEach(node=>{var _node$querySelector53,_node$querySelector54;const schema={SchemaID:parseInt(((_node$querySelector53=node.querySelector('SchemaID'))===null||_node$querySelector53===void 0?void 0:_node$querySelector53.textContent)||'0'),SchemaName:((_node$querySelector54=node.querySelector('SchemaName'))===null||_node$querySelector54===void 0?void 0:_node$querySelector54.textContent)||''};schemas.push(schema);});return{Message:message,ResultID:resultID,Schemas:schemas};}catch(error){console.error('Error parsing product list response:',error);throw new Error(\"Failed to parse product list response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parsePolicyTypeResponse(xmlText){try{var _xmlDoc$querySelector5,_xmlDoc$querySelector6;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector5=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector5===void 0?void 0:_xmlDoc$querySelector5.textContent)||'';const resultID=parseInt(((_xmlDoc$querySelector6=xmlDoc.querySelector('errorID'))===null||_xmlDoc$querySelector6===void 0?void 0:_xmlDoc$querySelector6.textContent)||'0');const policyTypes=[];const policyTypeNodes=xmlDoc.querySelectorAll('TypePolicy');policyTypeNodes.forEach(node=>{var _node$querySelector55,_node$querySelector56,_node$querySelector57;const policyType={TypePolicyID:((_node$querySelector55=node.querySelector('TypePolicyID'))===null||_node$querySelector55===void 0?void 0:_node$querySelector55.textContent)||'',TypePolicyName:((_node$querySelector56=node.querySelector('Name'))===null||_node$querySelector56===void 0?void 0:_node$querySelector56.textContent)||'',// Changed from TypePolicyName to Name\nDescription:((_node$querySelector57=node.querySelector('IsAnnual'))===null||_node$querySelector57===void 0?void 0:_node$querySelector57.textContent)==='1'?'Annual Policy':'Single Trip Policy'};policyTypes.push(policyType);});return{Message:message,ResultID:resultID,PolicyTypes:policyTypes};}catch(error){console.error('Error parsing policy type response:',error);throw new Error(\"Failed to parse policy type response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parsePolicyTypeDestinationResponse(xmlText){try{var _xmlDoc$querySelector7,_xmlDoc$querySelector8;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector7=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector7===void 0?void 0:_xmlDoc$querySelector7.textContent)||'';const resultID=parseInt(((_xmlDoc$querySelector8=xmlDoc.querySelector('errorID'))===null||_xmlDoc$querySelector8===void 0?void 0:_xmlDoc$querySelector8.textContent)||'0');const policyTypeDestinations=[];const destinationNodes=xmlDoc.querySelectorAll('PolicyTypeDestination');destinationNodes.forEach(node=>{var _node$querySelector58,_node$querySelector59,_node$querySelector60;const destination={TypePolicyDestinationID:((_node$querySelector58=node.querySelector('TypePolicyDestinationID'))===null||_node$querySelector58===void 0?void 0:_node$querySelector58.textContent)||'',Name:((_node$querySelector59=node.querySelector('Name'))===null||_node$querySelector59===void 0?void 0:_node$querySelector59.textContent)||'',PolicyTypeID:((_node$querySelector60=node.querySelector('PolicyTypeID'))===null||_node$querySelector60===void 0?void 0:_node$querySelector60.textContent)||''};policyTypeDestinations.push(destination);});return{Message:message,ResultID:resultID,PolicyTypeDestinations:policyTypeDestinations};}catch(error){console.error('Error parsing policy type destination response:',error);throw new Error(\"Failed to parse policy type destination response: \".concat(error instanceof Error?error.message:'Unknown error'));}}}/**\n * Main Terracotta Service Class\n */export class TerracottaService{constructor(){let userID=arguments.length>0&&arguments[0]!==undefined?arguments[0]:TERRACOTTA_USER_ID;let userCode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:TERRACOTTA_USER_CODE;this.userID=void 0;this.userCode=void 0;this.userID=userID;this.userCode=userCode;}static getInstance(userID,userCode){if(!TerracottaService.instance){TerracottaService.instance=new TerracottaService(userID||TERRACOTTA_USER_ID,userCode||TERRACOTTA_USER_CODE);}return TerracottaService.instance;}/**\n   * Generic SOAP request method\n   */async makeSOAPRequest(method,requestBody){const soapEnvelope=SOAPBuilder.createEnvelope(requestBody);console.log('Making SOAP request via proxy to:',\"\".concat(PROXY_BASE_URL,\"/\").concat(method));console.log('SOAP Envelope:',soapEnvelope);try{const response=await fetch(\"\".concat(PROXY_BASE_URL,\"/\").concat(method),{method:'POST',headers:{'Content-Type':'text/xml; charset=utf-8'},body:soapEnvelope});console.log('SOAP Response Status:',response.status,response.statusText);const responseText=await response.text();console.log('SOAP Response Body:',responseText);if(!response.ok){throw new Error(\"SOAP request failed: \".concat(response.status,\" \").concat(response.statusText));}return responseText;}catch(error){console.error('Proxy request failed:',error);throw new Error(\"Failed to connect to Terracotta API via proxy: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * Test connection with HelloWorld method\n   */async testConnection(){try{const soapBody=\"\\n        <HelloWorld xmlns=\\\"WS-IntegratedQuote\\\">\\n        </HelloWorld>\";const responseText=await this.makeSOAPRequest('HelloWorld',soapBody);console.log('Connection test successful:',responseText);return true;}catch(error){console.error('Connection test failed:',error);return false;}}/**\n   * Get available policy types for a specific schema\n   */async getUserProductTypePolicy(schemaId){try{const userID=parseInt(this.userID)||parseInt(TERRACOTTA_USER_ID);const userCode=parseInt(this.userCode)||parseInt(TERRACOTTA_USER_CODE);console.log('getUserProductTypePolicy - schemaId:',schemaId,'userID:',userID,'userCode:',userCode);const soapBody=\"\\n        <GetUserProductTypePolicy xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(userID,\"</userID>\\n          <userCode>\").concat(userCode,\"</userCode>\\n          <schemaId>\").concat(schemaId,\"</schemaId>\\n        </GetUserProductTypePolicy>\");const responseText=await this.makeSOAPRequest('GetUserProductTypePolicy',soapBody);return XMLParser.parsePolicyTypeResponse(responseText);}catch(error){console.error('Error in getUserProductTypePolicy:',error);throw new Error(\"Failed to get policy types: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * Get available destinations for a specific schema\n   */async getUserProductDestination(schemaId){try{const userID=parseInt(this.userID)||parseInt(TERRACOTTA_USER_ID);const userCode=parseInt(this.userCode)||parseInt(TERRACOTTA_USER_CODE);console.log('getUserProductDestination - schemaId:',schemaId,'userID:',userID,'userCode:',userCode);const soapBody=\"\\n        <GetUserProductDestination xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(userID,\"</userID>\\n          <userCode>\").concat(userCode,\"</userCode>\\n          <schemaId>\").concat(schemaId,\"</schemaId>\\n        </GetUserProductDestination>\");const responseText=await this.makeSOAPRequest('GetUserProductDestination',soapBody);return XMLParser.parsePolicyTypeDestinationResponse(responseText);}catch(error){console.error('Error in getUserProductDestination:',error);throw new Error(\"Failed to get policy type destinations: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * Get available products for the user\n   */async getUserProductList(){try{const userID=parseInt(this.userID)||parseInt(TERRACOTTA_USER_ID);const userCode=parseInt(this.userCode)||parseInt(TERRACOTTA_USER_CODE);console.log('getUserProductList - userID:',userID,'userCode:',userCode);console.log('getUserProductList - this.userID:',this.userID,'this.userCode:',this.userCode);const soapBody=\"\\n        <GetUserProductList xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(userID,\"</userID>\\n          <userCode>\").concat(userCode,\"</userCode>\\n        </GetUserProductList>\");const responseText=await this.makeSOAPRequest('GetUserProductList',soapBody);return XMLParser.parseProductListResponse(responseText);}catch(error){console.error('Error in getUserProductList:',error);throw new Error(\"Failed to get user product list: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 1. Request for quotations\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\n   */async provideQuotation(request){try{console.log('🚀 Building SOAP request for ProvideQuotation...');console.log('📦 Request object:',request);const quoteDetailsXML=SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);console.log('📄 Quote Details XML:',quoteDetailsXML);const soapBody=\"\\n        <ProvideQuotation xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          \").concat(quoteDetailsXML,\"\\n        </ProvideQuotation>\");console.log('📤 Complete SOAP Body:',soapBody);console.log('🌐 Sending SOAP request to:',\"\".concat(PROXY_BASE_URL,\"/ProvideQuotation\"));const responseText=await this.makeSOAPRequest('ProvideQuotation',soapBody);console.log('📥 Raw SOAP Response received');console.log('📄 Response length:',responseText.length,'characters');console.log('📄 First 500 chars of response:',responseText.substring(0,500));const parsedResponse=XMLParser.parseQuoteResponse(responseText);console.log('✅ Parsed response:',parsedResponse);return parsedResponse;}catch(error){console.error('❌ Error in provideQuotation:',error);console.error('❌ Error type:',error instanceof Error?error.constructor.name:typeof error);console.error('❌ Error message:',error instanceof Error?error.message:String(error));throw new Error(\"Failed to get quotes from Terracotta: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 3. Obtain Screening Questions\n   * Calls ScreeningQuestions to get screening questions for the selected quote\n   */async getScreeningQuestions(quoteID){try{var _parsed$screeningQues;console.log('🔄 Building SOAP request for ScreeningQuestions...');console.log('📦 QuoteID:',quoteID);console.log('👤 UserID:',this.userID,'UserCode:',this.userCode);const soapBody=\"\\n        <ScreeningQuestions xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(this.userID)||parseInt(TERRACOTTA_USER_ID),\"</userID>\\n          <userCode>\").concat(parseInt(this.userCode)||parseInt(TERRACOTTA_USER_CODE),\"</userCode>\\n          <quoteID>\").concat(quoteID,\"</quoteID>\\n        </ScreeningQuestions>\");console.log('📤 SOAP Body for ScreeningQuestions:',soapBody);const responseText=await this.makeSOAPRequest('ScreeningQuestions',soapBody);console.log('📥 Raw Response from ScreeningQuestions:',responseText.substring(0,1000));const parsed=XMLParser.parseScreeningQuestionsResponse(responseText);console.log('✅ Parsed Screening Questions Response:',parsed);console.log('📋 Number of questions:',((_parsed$screeningQues=parsed.screeningQuestions)===null||_parsed$screeningQues===void 0?void 0:_parsed$screeningQues.length)||0);if(parsed.screeningQuestions&&parsed.screeningQuestions.length>0){console.log('📝 Questions details:');parsed.screeningQuestions.forEach((q,idx)=>{console.log(\"  \".concat(idx+1,\". Q\").concat(q.questionNumber,\": \").concat(q.question));});}return parsed;}catch(error){console.error('❌ Error in getScreeningQuestions:',error);console.error('Error type:',error instanceof Error?error.constructor.name:typeof error);console.error('Error message:',error instanceof Error?error.message:String(error));throw new Error(\"Failed to get screening questions: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 2. Update quotes with additional covers\n   * Calls ProvideQuotationWithAlterations to get quotes with specific alterations/add-ons\n   * This method can only be called AFTER obtaining a quote reference from ProvideQuotation\n   */async provideQuotationWithAlterations(request){try{console.log('🚀 Building SOAP request for ProvideQuotationWithAlterations...');console.log('📦 Request object:',request);const specificQuoteDetailsXML=SOAPBuilder.buildSpecificQuoteDetailsXML(request.specificQuoteDetails);console.log('📄 Specific Quote Details XML:',specificQuoteDetailsXML);const soapBody=\"\\n        <ProvideQuotationWithAlterations xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          <quoteID>\").concat(request.quoteID,\"</quoteID>\\n          \").concat(specificQuoteDetailsXML,\"\\n        </ProvideQuotationWithAlterations>\");console.log('📤 Complete SOAP Body:',soapBody);console.log('🌐 Sending SOAP request to:',\"\".concat(PROXY_BASE_URL,\"/ProvideQuotationWithAlterations\"));const responseText=await this.makeSOAPRequest('ProvideQuotationWithAlterations',soapBody);console.log('📥 Raw SOAP Response received');console.log('📄 Response length:',responseText.length,'characters');console.log('📄 First 500 chars of response:',responseText.substring(0,500));const parsedResponse=XMLParser.parseQuoteResponse(responseText);console.log('✅ Parsed response:',parsedResponse);return parsedResponse;}catch(error){console.error('❌ Error in provideQuotationWithAlterations:',error);console.error('❌ Error type:',error instanceof Error?error.constructor.name:typeof error);console.error('❌ Error message:',error instanceof Error?error.message:String(error));throw new Error(\"Failed to get quotes with alterations from Terracotta: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 3. Save a quote as a Live policy\n   * Calls SavePolicyDetails to convert the quote into a live policy\n   */async savePolicyDetails(request){try{console.log('🚀 Building SOAP request for SavePolicyDetails...');console.log('📦 Request object:',request);console.log('👥 Travelers in request:',JSON.stringify(request.travelers,null,2));console.log('📧 Contact Details in request:',JSON.stringify(request.contactDetails,null,2));const screeningAnswersXML=SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);// Build travelers XML if provided\nif(request.travelers&&request.travelers.length>0){console.log(\"\\uD83D\\uDD28 Building XML for \".concat(request.travelers.length,\" traveler(s)...\"));request.travelers.forEach((t,idx)=>{console.log(\"  Traveler \".concat(idx+1,\": \").concat(t.Title,\" \").concat(t.FirstName,\" \").concat(t.LastName,\", Age: \").concat(t.Age,\", DOB: \").concat(t.DateOfBirth));});}const travelersXML=request.travelers&&request.travelers.length>0?request.travelers.map(traveler=>SOAPBuilder.buildTravelerXML(traveler)).join(''):'';// Build contact details XML if provided\nconst contactDetailsXML=request.contactDetails?SOAPBuilder.buildContactDetailsXML(request.contactDetails):'';const soapBody=\"\\n        <SavePolicyDetails xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          <quoteID>\").concat(request.quoteID,\"</quoteID>\\n          \").concat(screeningAnswersXML,\"\\n          \").concat(request.medicalScreeningReference?\"<medicalScreeningReference>\".concat(request.medicalScreeningReference,\"</medicalScreeningReference>\"):'<medicalScreeningReference>string</medicalScreeningReference>',\"\\n          \").concat(request.useDefaultAnswers!==undefined?\"<useDefaultAnswers>\".concat(request.useDefaultAnswers,\"</useDefaultAnswers>\"):'<useDefaultAnswers>1</useDefaultAnswers>',\"\\n          \").concat(travelersXML,\"\\n          \").concat(contactDetailsXML,\"\\n        </SavePolicyDetails>\");console.log('📤 Complete SOAP Body for SavePolicyDetails:',soapBody);console.log('🌐 Sending SOAP request to:',\"\".concat(PROXY_BASE_URL,\"/SavePolicyDetails\"));const responseText=await this.makeSOAPRequest('SavePolicyDetails',soapBody);console.log('📥 Raw SOAP Response from SavePolicyDetails:',responseText);const parsedResponse=XMLParser.parseSavePolicyResponse(responseText);console.log('✅ Parsed SavePolicyDetails response:',parsedResponse);return parsedResponse;}catch(error){console.error('❌ Error in savePolicyDetails:',error);throw new Error(\"Failed to save policy details: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 4. Email Policy Documents\n   * Calls EmailPolicyDocuments to send policy documents to the policy holder's email\n   */async emailPolicyDocuments(request){try{console.log('🚀 Building SOAP request for EmailPolicyDocuments...');console.log('📦 Request object:',request);const soapBody=\"\\n        <EmailPolicyDocuments xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          <policyID>\").concat(request.policyID,\"</policyID>\\n          <emailAddress>\").concat(request.emailAddress,\"</emailAddress>\\n        </EmailPolicyDocuments>\");console.log('📤 Complete SOAP Body for EmailPolicyDocuments:',soapBody);console.log('📧 Sending policy documents to:',request.emailAddress);console.log('🌐 Sending SOAP request to:',\"\".concat(PROXY_BASE_URL,\"/EmailPolicyDocuments\"));const responseText=await this.makeSOAPRequest('EmailPolicyDocuments',soapBody);console.log('📥 Raw SOAP Response from EmailPolicyDocuments:',responseText);const parsedResponse=XMLParser.parseEmailPolicyDocumentsResponse(responseText);console.log('✅ Parsed EmailPolicyDocuments response:',parsedResponse);return parsedResponse;}catch(error){console.error('❌ Error in emailPolicyDocuments:',error);throw new Error(\"Failed to email policy documents: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * Utility method to convert frontend data to Terracotta format\n   */static convertToTerracottaFormat(formData,availablePolicyTypes){console.log('Converting form data to Terracotta format:',formData);// Use DUMMY data for travelers to get quotation\n// Real traveler data will be collected later in the payment step\nconst travelers=Array.from({length:formData.numberOfTravelers||1},(_,index)=>{const dummyAge=30;// Default dummy age\nconst dummyDateOfBirth=calculateDateOfBirth(dummyAge);console.log(\"Traveler \".concat(index+1,\" (DUMMY): DOB=\").concat(dummyDateOfBirth,\", Age=\").concat(dummyAge));return{TravellerNumber:index+1,Title:'Mr',// Dummy title\nFirstName:'John',// Dummy first name\nLastName:'Doe',// Dummy last name\nDateOfBirth:formatDateForTerracotta(dummyDateOfBirth),Age:dummyAge,AgebandID:getAgebandID(dummyAge),TitleID:getTitleID('Mr'),minAge:dummyAge,maxAge:dummyAge,ScreeningInformation:null};});// Use DUMMY contact details to get quotation\n// Real contact details will be collected later in the payment step\nconst contactDetails={Address:'123 Main Street',// Dummy address\nPostcode:'12345',// Dummy postcode\nEmail:'customer@example.com',// Dummy email\nTelephone:'+302101234567',// Dummy telephone\nVehicleMakeModel:formData.vehicleMakeModel,VehicleLicensePlate:formData.vehicleLicensePlate,VehicleYearManufacture:formData.vehicleYearManufacture};// Convert trip details using actual user data\nconst quoteDetails={ResidenceID:getResidenceID(formData.countryOfResidence),TypePolicyID:getTypePolicyID(formData.tripType,availablePolicyTypes),TypePackageID:'1',// Fixed value as requested (string)\nDestination:formData.destination||'Europe',StartDate:formatDateForTerracotta(formData.startDate),EndDate:formatDateForTerracotta(formData.endDate),Travellers:travelers,ContactDetails:contactDetails,includeAnnualQuotes:0,// Always 0 - TypePolicyID determines if it's annual\nincludeUpsell:0,// Simplified for now\ncurrencyID:1,// EUR\nschemaIDFilter:'717'// Use schema 717\n};console.log('Converted Terracotta request:',quoteDetails);// Use fixed values as requested\nreturn{userID:'4072',userCode:'111427',quoteDetails};}}/**\n * Utility functions for data conversion\n */_TerracottaService=TerracottaService;TerracottaService.instance=void 0;function formatDateForTerracotta(dateString){if(!dateString)return'';// Handle different date formats\nif(dateString.includes('/')){// Handle DD/MM/YYYY format\nconst parts=dateString.split('/');if(parts.length===3){const[day,month,year]=parts;return\"\".concat(year,\"/\").concat(month,\"/\").concat(day);}}// Handle YYYY-MM-DD format\nif(dateString.includes('-')){return dateString.replace(/-/g,'/');}return dateString;}function calculateDateOfBirth(age){const currentYear=new Date().getFullYear();const birthYear=currentYear-age;// Use January 1st as default date\nreturn\"\".concat(birthYear,\"/01/01\");}function calculateAgeFromDateOfBirth(dateOfBirth){const birthDate=new Date(dateOfBirth);const today=new Date();let age=today.getFullYear()-birthDate.getFullYear();const monthDiff=today.getMonth()-birthDate.getMonth();if(monthDiff<0||monthDiff===0&&today.getDate()<birthDate.getDate()){age--;}return Math.max(0,age);}export function getResidenceID(country){// Map countries to Terracotta Residence IDs\n// Based on Terracotta API - Greece is ResidenceID 24\nconst residenceMap={'Greece':'24',// Correct ResidenceID for Greece\n'Austria':'4','Belgium':'6','Bulgaria':'10','Croatia (Hrvatska)':'14','Czech Republic':'16','Denmark':'17','Estonia':'20','Finland':'21','France':'22','Germany':'23','Hungary':'27','Iceland':'28','Italy':'33','Latvia':'38','Liechtenstein':'40','Lithuania':'41','Luxembourg':'42','Malta':'93','Netherlands':'47','Norway':'49','Poland':'53','Portugal':'54','Republic of Cyprus':'283','Republic of Ireland':'19','Romania':'55','Slovak Republic':'59','Slovenia':'60','Spain':'62','Sweden':'63'};return residenceMap[country]||'24';// Default to Greece\n}export function getTypePolicyID(tripType,availablePolicyTypes){// If we have SOAP data, use it to find the correct TypePolicyID\nif(availablePolicyTypes&&availablePolicyTypes.length>0){const policyType=availablePolicyTypes.find(pt=>{const name=pt.TypePolicyName.toLowerCase();switch(tripType){case'single':return name.includes('single')&&!name.includes('annual');case'annual':return name.includes('annual')||name.includes('multi-trip');case'longstay':return name.includes('longstay')||name.includes('long stay');case'comprehensive':return name.includes('comprehensive');default:return false;}});if(policyType){console.log(\"\\u2705 Found TypePolicyID \".concat(policyType.TypePolicyID,\" for trip type '\").concat(tripType,\"' (\").concat(policyType.TypePolicyName,\")\"));return policyType.TypePolicyID;}}// Fallback to hardcoded mappings if SOAP data not available\nconsole.log(\"\\u26A0\\uFE0F Using fallback mapping for trip type '\".concat(tripType,\"'\"));const policyMap={'single':'2',// Single Trip TypePolicyID\n'annual':'23',// Annual Multi-Trip TypePolicyID\n'longstay':'3',// Longstay TypePolicyID\n'comprehensive':'2'// Use Single Trip as default\n};return policyMap[tripType]||'2';// Default to Single Trip TypePolicyID\n}function getTypePackageID(tripType){// Use correct Package IDs (not SchemaIDs)\n// Package IDs are typically 1, 2, 3, etc. for different coverage levels\nconst packageMap={'single':'1',// Basic package for single trip\n'annual':'1',// Basic package for annual\n'comprehensive':'2'// Higher coverage package\n};return packageMap[tripType]||'1';// Default to basic package\n}export function getAgebandID(age){// Map age to Terracotta Ageband ID\nif(age<=17)return 1;if(age<=30)return 2;if(age<=40)return 3;if(age<=50)return 4;if(age<=60)return 5;if(age<=70)return 6;return 7;// 70+\n}export function getTitleID(title){// Map title to Terracotta Title ID\nconst titleMap={'Mr':1,'Mrs':2,'Miss':3,'Ms':4,'Dr':5,'Prof':6};return titleMap[title]||1;// Default to Mr\n}function getCurrencyID(currency){// Map currency to Terracotta Currency ID\nconst currencyMap={'EUR':1,'USD':2,'GBP':3,'CHF':4};return currencyMap[currency]||1;// Default to EUR\n}export default TerracottaService;","map":{"version":3,"names":["DOMParser","window","XMDOMParser","require","TERRACOTTA_BASE_URL","PROXY_BASE_URL","TERRACOTTA_USER_ID","TERRACOTTA_USER_CODE","formatCurrencyLimit","htmlString","textarea","document","createElement","innerHTML","decoded","value","replace","match","currency","number","formattedNumber","parseInt","toLocaleString","concat","SOAPBuilder","createEnvelope","body","buildTravelerXML","traveler","TravellerNumber","Title","FirstName","LastName","DateOfBirth","Age","AgebandID","TitleID","minAge","maxAge","AlterationID","msPrice","msPriceExcIPT","msConditions","buildContactDetailsXML","contact","Address","Postcode","Email","Telephone","VehicleMakeModel","VehicleLicensePlate","VehicleYearManufacture","buildQuoteDetailsXML","details","travelersXML","Travellers","map","join","contactXML","ContactDetails","ResidenceID","TypePolicyID","TypePackageID","Destination","StartDate","EndDate","includeAnnualQuotes","undefined","includeUpsell","currencyID","schemaIDFilter","buildScreeningAnswersXML","answers","answer","questionNumber","buildEligibilityAnswersXML","buildDynamicDetailsXML","detail","Position","FieldName","FieldValue","FieldSize","buildSpecificQuoteDetailsXML","dynamicDetailsXML","DynamicDetails","screeningAnswersXML","screeningQuestionAnswers","eligibilityAnswersXML","EligibilityQuestionAnswers","XMLParser","getXMLParser","parseQuoteResponse","xmlText","_xmlDoc$querySelector","parser","xmlDoc","parseFromString","parseError","querySelector","Error","textContent","message","quoteResults","quoteResultNodes","querySelectorAll","length","console","log","forEach","node","_node$querySelector","_node$querySelector2","_node$querySelector3","_node$querySelector4","_node$querySelector5","_node$querySelector6","_node$querySelector7","_node$querySelector8","_node$querySelector9","_node$querySelector0","_node$querySelector1","_node$querySelector10","_node$querySelector11","_node$querySelector12","_node$querySelector13","_node$querySelector14","_node$querySelector15","_node$querySelector16","_node$querySelector17","_node$querySelector18","_node$querySelector19","_node$querySelector20","_node$querySelector21","_node$querySelector22","_node$querySelector23","_node$querySelector24","_node$querySelector25","_node$querySelector26","_node$querySelector27","_node$querySelector28","_node$querySelector29","_node$querySelector30","_node$querySelector31","_node$querySelector32","_node$querySelector33","_node$querySelector34","_node$querySelector35","_node$querySelector36","_node$querySelector37","_node$querySelector38","_node$querySelector39","_node$querySelector40","_node$querySelector41","_node$querySelector42","_node$querySelector43","_node$querySelector44","quoteID","grossPriceText","grossPriceValue","parseFloat","result","QuoteID","schemaName","policytypeName","residenceName","destinationName","startDate","endDate","SI","PW","KF","HelpFile","IPT","IPTRate","GrossPrice","screeningPremium","IconURL","SchemaID","PolicyTypeID","DestinationID","PackageID","MaxAgeAgebandID","ScreeningID","groupPerProduct","priceOrder","IPID","typePolicyName","typePackageName","currencyHTMLEncoded","packageName","isAnnual","isBestBuy","maxDaysPerTrip","isBestBuyText","isBestBuyLocation","numberToSort","coverLevel","Discount","netUW","wbComm","agentComm","screeningPremiumPerPersonCSV","screeningPremiumExcIPTPerPersonCSV","isNotCoveredPerPersonCSV","policytypeShortName","SummaryCovers","summaryCoversNode","summaryCoverNodes","summaryCovers","coverNode","_coverNode$querySelec","_coverNode$querySelec2","_coverNode$querySelec3","_coverNode$querySelec4","rawLimit","rawExcess","push","name","Limit","Excess","position","Message","error","parseScreeningQuestionsResponse","_xmlDoc$querySelector2","screeningQuestions","questionNodes","_node$querySelector45","_node$querySelector46","_node$querySelector47","_node$querySelector48","_node$querySelector49","_node$querySelector50","_node$querySelector51","_node$querySelector52","question","yesMessage","noMessage","yesAction","noAction","yesActionText","noActionText","parseEmailPolicyDocumentsResponse","_messageNode$textCont","_emailSentNode$textCo","messageNode","emailSentNode","trim","emailSentValue","emailSent","toLowerCase","includes","parseSavePolicyResponse","policySavedNode","policyIDNode","certificateNode","pwNode","siNode","kfNode","ipidNode","policySavedRaw","policySaved","policyID","certificate","pw","si","kf","ipid","allElements","elementNames","Array","from","el","tagName","Set","parseProductListResponse","_xmlDoc$querySelector3","_xmlDoc$querySelector4","resultID","schemas","schemaNodes","_node$querySelector53","_node$querySelector54","schema","SchemaName","ResultID","Schemas","parsePolicyTypeResponse","_xmlDoc$querySelector5","_xmlDoc$querySelector6","policyTypes","policyTypeNodes","_node$querySelector55","_node$querySelector56","_node$querySelector57","policyType","TypePolicyName","Description","PolicyTypes","parsePolicyTypeDestinationResponse","_xmlDoc$querySelector7","_xmlDoc$querySelector8","policyTypeDestinations","destinationNodes","_node$querySelector58","_node$querySelector59","_node$querySelector60","destination","TypePolicyDestinationID","Name","PolicyTypeDestinations","TerracottaService","constructor","userID","arguments","userCode","getInstance","instance","makeSOAPRequest","method","requestBody","soapEnvelope","response","fetch","headers","status","statusText","responseText","text","ok","testConnection","soapBody","getUserProductTypePolicy","schemaId","getUserProductDestination","getUserProductList","provideQuotation","request","quoteDetailsXML","quoteDetails","substring","parsedResponse","String","getScreeningQuestions","_parsed$screeningQues","parsed","q","idx","provideQuotationWithAlterations","specificQuoteDetailsXML","specificQuoteDetails","savePolicyDetails","JSON","stringify","travelers","contactDetails","t","contactDetailsXML","medicalScreeningReference","useDefaultAnswers","emailPolicyDocuments","emailAddress","convertToTerracottaFormat","formData","availablePolicyTypes","numberOfTravelers","_","index","dummyAge","dummyDateOfBirth","calculateDateOfBirth","formatDateForTerracotta","getAgebandID","getTitleID","ScreeningInformation","vehicleMakeModel","vehicleLicensePlate","vehicleYearManufacture","getResidenceID","countryOfResidence","getTypePolicyID","tripType","_TerracottaService","dateString","parts","split","day","month","year","age","currentYear","Date","getFullYear","birthYear","calculateAgeFromDateOfBirth","dateOfBirth","birthDate","today","monthDiff","getMonth","getDate","Math","max","country","residenceMap","find","pt","policyMap","getTypePackageID","packageMap","title","titleMap","getCurrencyID","currencyMap"],"sources":["C:/Users/laptop-123/TravelInsurance_Demo_2/src/services/terracottaService.ts"],"sourcesContent":["/**\n * Terracotta Insurance Quote Integration Service\n * \n * This service handles all communication with the Terracotta Integrated Quote web service\n * using SOAP protocol. It provides methods for:\n * - Requesting quotes (ProvideQuotation)\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\n * - Getting screening questions (ScreeningQuestions)\n * - Saving policy details (SavePolicyDetails)\n */\n\n// Import xmldom for Node.js XML parsing\nlet DOMParser: any;\nif (typeof window === 'undefined') {\n  // Node.js environment\n  const { DOMParser: XMDOMParser } = require('xmldom');\n  DOMParser = XMDOMParser;\n} else {\n  // Browser environment\n  DOMParser = window.DOMParser;\n}\n\n// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL = 'https://www.asuaonline.com/ws/integratedquote.asmx';\nconst PROXY_BASE_URL = 'http://localhost:3001/api/terracotta';\nconst TERRACOTTA_USER_ID = '4072';\nconst TERRACOTTA_USER_CODE = '111427';\n\n// TypeScript interfaces for Terracotta API data structures\n\nexport interface TerracottaPolicyType {\n  TypePolicyID: string;\n  TypePolicyName: string;\n  Description?: string;\n}\n\nexport interface TerracottaPolicyTypeDestination {\n  TypePolicyDestinationID: string;\n  Name: string;\n  PolicyTypeID?: string;\n}\n\nexport interface TerracottaPolicyTypeDestinationResponse {\n  Message: string;\n  ResultID: number;\n  PolicyTypeDestinations: TerracottaPolicyTypeDestination[];\n}\n\nexport interface TerracottaPolicyTypeResponse {\n  Message: string;\n  ResultID: number;\n  PolicyTypes: TerracottaPolicyType[];\n}\n\nexport interface TerracottaTraveler {\n  TravellerNumber: number;\n  Title: string;\n  FirstName: string;\n  LastName: string;\n  DateOfBirth: string; // Format: YYYY/MM/DD\n  Age: number;\n  AgebandID?: number;\n  TitleID?: number;\n  minAge?: number;\n  maxAge?: number;\n  AlterationID?: string;\n  msPrice?: number;\n  msPriceExcIPT?: number;\n  msConditions?: string;\n  ScreeningInformation?: any;\n}\n\nexport interface TerracottaContactDetails {\n  Address: string;\n  Postcode: string;\n  Email: string;\n  Telephone: string;\n  VehicleMakeModel?: string;\n  VehicleLicensePlate?: string;\n  VehicleYearManufacture?: string;\n}\n\nexport interface TerracottaQuoteDetails {\n  ResidenceID: string;\n  TypePolicyID: string; // Comma-separated list of policy type IDs\n  TypePackageID: string;\n  Destination: string;\n  StartDate: string; // Format: YYYY/MM/DD\n  EndDate: string; // Format: YYYY/MM/DD\n  Travellers: TerracottaTraveler[];\n  ContactDetails: TerracottaContactDetails;\n  includeAnnualQuotes?: number;\n  includeUpsell?: number;\n  alterionGenericID?: string;\n  voucherCode?: string;\n  isCYTI?: boolean;\n  currencyID?: number;\n  groupPerProduct?: boolean;\n  priceOrder?: number;\n  schemaIDFilter?: string;\n  useCoverLevelUpsell?: boolean;\n  sellOnBehalfOf?: number;\n  customerUniqueID?: number;\n  quoteVisitAuditID?: number;\n}\n\nexport interface TerracottaQuoteRequest {\n  userID: string;\n  userCode: string;\n  quoteDetails: TerracottaQuoteDetails;\n}\n\nexport interface TerracottaDynamicDetail {\n  Position: number;\n  FieldName: string;\n  FieldValue: string;\n  FieldSize: number;\n}\n\nexport interface TerracottaEligibilityQuestionAnswer {\n  questionNumber: number;\n  answer: 'yes' | 'no';\n}\n\nexport interface TerracottaQuoteWithAlterationsRequest {\n  userID: string;\n  userCode: string;\n  quoteID: string; // Note: lowercase 'q' as per documentation\n  specificQuoteDetails: {\n    AlterationID: string; // Comma-separated list of alteration IDs\n    Travellers: TerracottaTraveler[];\n    ContactDetails: TerracottaContactDetails;\n    DynamicDetails?: TerracottaDynamicDetail[];\n    screeningQuestionAnswers?: TerracottaScreeningQuestionAnswer[];\n    EligibilityQuestionAnswers?: TerracottaEligibilityQuestionAnswer[];\n  };\n}\n\nexport interface SummaryCover {\n  name: string;\n  Limit: string;\n  Excess: string;\n  position?: number;\n}\n\nexport interface TerracottaQuoteResult {\n  QuoteID: string;\n  schemaName: string;\n  policytypeName: string;\n  residenceName: string;\n  destinationName: string;\n  startDate: string;\n  endDate: string;\n  SI: string; // Summary of cover PDF URL\n  PW: string; // Policy wording PDF URL\n  KF: string;\n  HelpFile: string;\n  currency: string;\n  IPT: number; // IPT amount\n  IPTRate: number;\n  GrossPrice: number; // Quote price\n  screeningPremium: number;\n  IconURL: string;\n  SchemaID: number;\n  PolicyTypeID: number;\n  DestinationID: number;\n  PackageID: number;\n  MaxAgeAgebandID: number;\n  ScreeningID: number;\n  groupPerProduct: boolean;\n  priceOrder: number;\n  IPID: string;\n  typePolicyName: string;\n  typePackageName: string;\n  currencyHTMLEncoded: string;\n  AlterationID: string;\n  packageName: string;\n  isAnnual: number;\n  isBestBuy: number;\n  maxDaysPerTrip: number;\n  isBestBuyText: string;\n  isBestBuyLocation: number;\n  numberToSort: number;\n  coverLevel: number;\n  Discount: number;\n  netUW: number;\n  wbComm: number;\n  agentComm: number;\n  screeningPremiumPerPersonCSV: string;\n  screeningPremiumExcIPTPerPersonCSV: string;\n  isNotCoveredPerPersonCSV: string;\n  policytypeShortName: string;\n  SummaryCovers?: SummaryCover[];\n}\n\nexport interface TerracottaQuoteResponse {\n  Message: string;\n  quoteResults: TerracottaQuoteResult[];\n}\n\nexport interface TerracottaScreeningQuestionAnswer {\n  questionNumber: number;\n  answer: 'yes' | 'no';\n}\n\nexport interface TerracottaSavePolicyRequest {\n  userID: string;\n  userCode: string;\n  quoteID: string;\n  screeningQuestionAnswers: TerracottaScreeningQuestionAnswer[];\n  medicalScreeningReference?: string;\n  useDefaultAnswers?: number;\n  travelers?: TerracottaTraveler[];\n  contactDetails?: TerracottaContactDetails;\n}\n\nexport interface TerracottaEmailPolicyDocumentsRequest {\n  userID: string;\n  userCode: string;\n  policyID: string;\n  emailAddress: string;\n}\n\nexport interface TerracottaEmailPolicyDocumentsResponse {\n  emailSent: boolean;\n  message?: string;\n}\n\nexport interface TerracottaSavePolicyResponse {\n  Message: string;\n  policySaved: 'Yes' | 'No' | 'true' | 'false';\n  policyID: string;\n  certificate: string; // URL for policy certificate\n  PW: string; // Policy wording PDF URL\n  SI: string; // Summary of cover PDF URL\n  KF?: string; // Key Facts PDF URL\n  IPID?: string; // Insurance Product Information Document URL\n}\n\nexport interface TerracottaScreeningQuestion {\n  questionNumber: number;\n  question: string;\n  yesMessage: string;\n  noMessage: string;\n  yesAction: string;\n  noAction: string;\n  yesActionText: string;\n  noActionText: string;\n}\n\nexport interface TerracottaScreeningQuestionsResponse {\n  Message: string;\n  screeningQuestions: TerracottaScreeningQuestion[];\n}\n\nexport interface TerracottaProduct {\n  SchemaID: number;\n  SchemaName: string;\n}\n\nexport interface TerracottaProductListResponse {\n  Message: string;\n  ResultID: number;\n  Schemas: TerracottaProduct[];\n}\n\n/**\n * Helper function to decode HTML entities and format currency\n */\nfunction formatCurrencyLimit(htmlString: string): string {\n  if (!htmlString) return '';\n  \n  // Decode HTML entities\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = htmlString;\n  let decoded = textarea.value;\n  \n  // Additional manual replacements for common entities\n  decoded = decoded\n    .replace(/&euro;/gi, '€')\n    .replace(/&pound;/gi, '£')\n    .replace(/&dollar;/gi, '$')\n    .replace(/&amp;/gi, '&')\n    .replace(/&lt;/gi, '<')\n    .replace(/&gt;/gi, '>')\n    .replace(/&quot;/gi, '\"')\n    .replace(/&#39;/gi, \"'\");\n  \n  // Format numbers with thousand separators\n  // Match patterns like €32000 or euro32000 and add commas\n  decoded = decoded.replace(/([€£$]|euro|pound|dollar)?\\s*(\\d{4,})/gi, (match, currency, number) => {\n    const formattedNumber = parseInt(number).toLocaleString('en-US');\n    return currency ? `${currency}${formattedNumber}` : formattedNumber;\n  });\n  \n  // Fix spacing: \"Up to€32,000\" -> \"Up to €32,000\"\n  decoded = decoded.replace(/(\\w)([€£$])/g, '$1 $2');\n  \n  return decoded;\n}\n\n/**\n * SOAP XML Builder utility functions\n */\nclass SOAPBuilder {\n  static createEnvelope(body: string): string {\n    return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    ${body}\n  </soap:Body>\n</soap:Envelope>`;\n  }\n\n  static buildTravelerXML(traveler: TerracottaTraveler): string {\n    return `\n      <Traveller>\n        <TravellerNumber>${traveler.TravellerNumber}</TravellerNumber>\n        <Title>${traveler.Title}</Title>\n        <FirstName>${traveler.FirstName}</FirstName>\n        <LastName>${traveler.LastName}</LastName>\n        <DateOfBirth>${traveler.DateOfBirth}</DateOfBirth>\n        <Age>${traveler.Age}</Age>\n        <AgebandID>${traveler.AgebandID || 0}</AgebandID>\n        <TitleID>${traveler.TitleID || 0}</TitleID>\n        <minAge>${traveler.minAge || traveler.Age}</minAge>\n        <maxAge>${traveler.maxAge || traveler.Age}</maxAge>\n        <AlterationID>${traveler.AlterationID || ''}</AlterationID>\n        <msPrice>${traveler.msPrice || 0}</msPrice>\n        <msPriceExcIPT>${traveler.msPriceExcIPT || 0}</msPriceExcIPT>\n        <msConditions>${traveler.msConditions || ''}</msConditions>\n        <ScreeningInformation xsi:nil=\"true\" />\n      </Traveller>`;\n  }\n\n  static buildContactDetailsXML(contact: TerracottaContactDetails): string {\n    return `\n      <ContactDetails>\n        <Address>${contact.Address}</Address>\n        <Postcode>${contact.Postcode}</Postcode>\n        <Email>${contact.Email}</Email>\n        <Telephone>${contact.Telephone}</Telephone>\n        ${contact.VehicleMakeModel ? `<VehicleMakeModel>${contact.VehicleMakeModel}</VehicleMakeModel>` : ''}\n        ${contact.VehicleLicensePlate ? `<VehicleLicensePlate>${contact.VehicleLicensePlate}</VehicleLicensePlate>` : ''}\n        ${contact.VehicleYearManufacture ? `<VehicleYearManufacture>${contact.VehicleYearManufacture}</VehicleYearManufacture>` : ''}\n      </ContactDetails>`;\n  }\n\n  static buildQuoteDetailsXML(details: TerracottaQuoteDetails): string {\n    const travelersXML = details.Travellers.map(traveler => \n      this.buildTravelerXML(traveler)\n    ).join('');\n\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n\n    return `\n      <quoteDetails>\n        <ResidenceID>${parseInt(details.ResidenceID) || 1}</ResidenceID>\n        <TypePolicyID>${details.TypePolicyID}</TypePolicyID>\n        <TypePackageID>${parseInt(details.TypePackageID) || 1}</TypePackageID>\n        <Destination>${details.Destination}</Destination>\n        <StartDate>${details.StartDate}</StartDate>\n        <EndDate>${details.EndDate}</EndDate>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${details.includeAnnualQuotes !== undefined ? `<includeAnnualQuotes>${details.includeAnnualQuotes}</includeAnnualQuotes>` : ''}\n        ${details.includeUpsell !== undefined ? `<includeUpsell>${details.includeUpsell}</includeUpsell>` : ''}\n        ${details.currencyID ? `<currencyID>${details.currencyID}</currencyID>` : ''}\n        ${details.schemaIDFilter ? `<schemaIDFilter>${details.schemaIDFilter}</schemaIDFilter>` : ''}\n      </quoteDetails>`;\n  }\n\n  static buildScreeningAnswersXML(answers: TerracottaScreeningQuestionAnswer[]): string {\n    return '<screeningQuestionAnswers>' + \n      answers.map(answer => `\n        <screeningQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </screeningQuestionAnswer>`\n      ).join('') + '</screeningQuestionAnswers>';\n  }\n\n  static buildEligibilityAnswersXML(answers: TerracottaEligibilityQuestionAnswer[]): string {\n    return '<EligibilityQuestionAnswers>' + \n      answers.map(answer => `\n        <eligibilityQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </eligibilityQuestionAnswer>`\n      ).join('') + '</EligibilityQuestionAnswers>';\n  }\n\n  static buildDynamicDetailsXML(details: TerracottaDynamicDetail[]): string {\n    return '<DynamicDetails>' + \n      details.map(detail => `\n        <DynamicDetail_SavedValue>\n          <Position>${detail.Position}</Position>\n          <FieldName>${detail.FieldName}</FieldName>\n          <FieldValue>${detail.FieldValue}</FieldValue>\n          <FieldSize>${detail.FieldSize}</FieldSize>\n        </DynamicDetail_SavedValue>`\n      ).join('') + '</DynamicDetails>';\n  }\n\n  static buildSpecificQuoteDetailsXML(details: any): string {\n    const travelersXML = details.Travellers.map((traveler: TerracottaTraveler) => \n      this.buildTravelerXML(traveler)\n    ).join('');\n\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    \n    const dynamicDetailsXML = details.DynamicDetails ? \n      this.buildDynamicDetailsXML(details.DynamicDetails) : '';\n    \n    const screeningAnswersXML = details.screeningQuestionAnswers ? \n      this.buildScreeningAnswersXML(details.screeningQuestionAnswers) : '';\n    \n    const eligibilityAnswersXML = details.EligibilityQuestionAnswers ? \n      this.buildEligibilityAnswersXML(details.EligibilityQuestionAnswers) : '';\n\n    return `\n      <specificQuoteDetails>\n        <AlterationID>${details.AlterationID}</AlterationID>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${dynamicDetailsXML}\n        ${screeningAnswersXML}\n        ${eligibilityAnswersXML}\n      </specificQuoteDetails>`;\n  }\n}\n\n/**\n * XML Parser utility functions\n */\nclass XMLParser {\n  static getXMLParser(): any {\n    return new DOMParser();\n  }\n\n\n  static parseQuoteResponse(xmlText: string): TerracottaQuoteResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      // Check for parsing errors\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const quoteResults: TerracottaQuoteResult[] = [];\n\n      // Select only child quoteResults, not the parent container\n      // Handle both ProvideQuotation and ProvideQuotationWithAlterations responses\n      let quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationResult > quoteResults > quoteResults');\n      \n      // If not found, try ProvideQuotationWithAlterationsResult\n      if (quoteResultNodes.length === 0) {\n        quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationWithAlterationsResult > quoteResults > quoteResults');\n      }\n      \n      // If still not found, try without the parent Result element\n      if (quoteResultNodes.length === 0) {\n        quoteResultNodes = xmlDoc.querySelectorAll('quoteResults > quoteResults');\n      }\n      \n      console.log(`📊 Found ${quoteResultNodes.length} quote result nodes in XML`);\n      \n      quoteResultNodes.forEach((node: any) => {\n        // Only process nodes that have QuoteID (skip empty parent nodes)\n        const quoteID = node.querySelector('QuoteID')?.textContent || '';\n        if (!quoteID) {\n          console.log('⚠️ Skipping node without QuoteID');\n          return; // Skip empty nodes\n        }\n        console.log(`✅ Processing quote result with QuoteID: ${quoteID}`);\n        \n        const grossPriceText = node.querySelector('GrossPrice')?.textContent || '0';\n        const grossPriceValue = parseFloat(grossPriceText);\n        console.log(`💰 Extracted GrossPrice: ${grossPriceText} -> ${grossPriceValue}`);\n        \n        const result: TerracottaQuoteResult = {\n          QuoteID: quoteID,\n          schemaName: node.querySelector('schemaName')?.textContent || '',\n          policytypeName: node.querySelector('policytypeName')?.textContent || '',\n          residenceName: node.querySelector('residenceName')?.textContent || '',\n          destinationName: node.querySelector('destinationName')?.textContent || '',\n          startDate: node.querySelector('startDate')?.textContent || '',\n          endDate: node.querySelector('endDate')?.textContent || '',\n          SI: node.querySelector('SI')?.textContent || '',\n          PW: node.querySelector('PW')?.textContent || '',\n          KF: node.querySelector('KF')?.textContent || '',\n          HelpFile: node.querySelector('HelpFile')?.textContent || '',\n          currency: node.querySelector('currency')?.textContent || '',\n          IPT: parseFloat(node.querySelector('IPT')?.textContent || '0'),\n          IPTRate: parseFloat(node.querySelector('IPTRate')?.textContent || '0'),\n          GrossPrice: grossPriceValue,\n          screeningPremium: parseFloat(node.querySelector('screeningPremium')?.textContent || '0'),\n          IconURL: node.querySelector('IconURL')?.textContent || '',\n          SchemaID: parseInt(node.querySelector('SchemaID')?.textContent || '0'),\n          PolicyTypeID: parseInt(node.querySelector('PolicyTypeID')?.textContent || '0'),\n          DestinationID: parseInt(node.querySelector('DestinationID')?.textContent || '0'),\n          PackageID: parseInt(node.querySelector('PackageID')?.textContent || '0'),\n          MaxAgeAgebandID: parseInt(node.querySelector('MaxAgeAgebandID')?.textContent || '0'),\n          ScreeningID: parseInt(node.querySelector('ScreeningID')?.textContent || '0'),\n          groupPerProduct: node.querySelector('groupPerProduct')?.textContent === 'true',\n          priceOrder: parseInt(node.querySelector('priceOrder')?.textContent || '0'),\n          IPID: node.querySelector('IPID')?.textContent || '',\n          typePolicyName: node.querySelector('typePolicyName')?.textContent || '',\n          typePackageName: node.querySelector('typePackageName')?.textContent || '',\n          currencyHTMLEncoded: node.querySelector('currencyHTMLEncoded')?.textContent || '',\n          AlterationID: node.querySelector('AlterationID')?.textContent || '',\n          packageName: node.querySelector('packageName')?.textContent || '',\n          isAnnual: parseInt(node.querySelector('isAnnual')?.textContent || '0'),\n          isBestBuy: parseInt(node.querySelector('isBestBuy')?.textContent || '0'),\n          maxDaysPerTrip: parseInt(node.querySelector('maxDaysPerTrip')?.textContent || '0'),\n          isBestBuyText: node.querySelector('isBestBuyText')?.textContent || '',\n          isBestBuyLocation: parseInt(node.querySelector('isBestBuyLocation')?.textContent || '0'),\n          numberToSort: parseFloat(node.querySelector('numberToSort')?.textContent || '0'),\n          coverLevel: parseInt(node.querySelector('coverLevel')?.textContent || '0'),\n          Discount: parseFloat(node.querySelector('Discount')?.textContent || '0'),\n          netUW: parseFloat(node.querySelector('netUW')?.textContent || '0'),\n          wbComm: parseFloat(node.querySelector('wbComm')?.textContent || '0'),\n          agentComm: parseFloat(node.querySelector('agentComm')?.textContent || '0'),\n          screeningPremiumPerPersonCSV: node.querySelector('screeningPremiumPerPersonCSV')?.textContent || '',\n          screeningPremiumExcIPTPerPersonCSV: node.querySelector('screeningPremiumExcIPTPerPersonCSV')?.textContent || '',\n          isNotCoveredPerPersonCSV: node.querySelector('isNotCoveredPerPersonCSV')?.textContent || '',\n          policytypeShortName: node.querySelector('policytypeShortName')?.textContent || '',\n          SummaryCovers: []\n        };\n        \n        // Parse SummaryCovers\n        const summaryCoversNode = node.querySelector('SummaryCovers');\n        if (summaryCoversNode) {\n          const summaryCoverNodes = summaryCoversNode.querySelectorAll('summaryCover');\n          const summaryCovers: SummaryCover[] = [];\n          summaryCoverNodes.forEach((coverNode: any) => {\n            const rawLimit = coverNode.querySelector('Limit')?.textContent || '';\n            const rawExcess = coverNode.querySelector('Excess')?.textContent || '';\n            \n            summaryCovers.push({\n              name: coverNode.querySelector('name')?.textContent || '',\n              Limit: formatCurrencyLimit(rawLimit),\n              Excess: formatCurrencyLimit(rawExcess),\n              position: parseInt(coverNode.querySelector('position')?.textContent || '0')\n            });\n          });\n          result.SummaryCovers = summaryCovers;\n        }\n        \n        quoteResults.push(result);\n      });\n\n      return { Message: message, quoteResults };\n    } catch (error) {\n      console.error('Error parsing quote response:', error);\n      throw new Error(`Failed to parse quote response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseScreeningQuestionsResponse(xmlText: string): TerracottaScreeningQuestionsResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const screeningQuestions: TerracottaScreeningQuestion[] = [];\n\n      const questionNodes = xmlDoc.querySelectorAll('screeningQuestion');\n      questionNodes.forEach((node: any) => {\n        const question: TerracottaScreeningQuestion = {\n          questionNumber: parseInt(node.querySelector('questionNumber')?.textContent || '0'),\n          question: node.querySelector('Question')?.textContent || '',  // Capital Q to match API response\n          yesMessage: node.querySelector('yesMessage')?.textContent || '',\n          noMessage: node.querySelector('noMessage')?.textContent || '',\n          yesAction: node.querySelector('yesAction')?.textContent || '',\n          noAction: node.querySelector('noAction')?.textContent || '',\n          yesActionText: node.querySelector('yesActionText')?.textContent || '',\n          noActionText: node.querySelector('noActionText')?.textContent || ''\n        };\n        screeningQuestions.push(question);\n      });\n\n      return { Message: message, screeningQuestions };\n    } catch (error) {\n      console.error('Error parsing screening questions response:', error);\n      throw new Error(`Failed to parse screening questions response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseEmailPolicyDocumentsResponse(xmlText: string): TerracottaEmailPolicyDocumentsResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      console.log('🔍 Full EmailPolicyDocuments XML Response:', xmlText);\n      \n      // Check for success indicators\n      const messageNode = xmlDoc.querySelector('Message, message');\n      const emailSentNode = xmlDoc.querySelector('emailSent, EmailSent, success, Success');\n      \n      const message = messageNode?.textContent?.trim() || '';\n      const emailSentValue = emailSentNode?.textContent?.trim() || '';\n      \n      // Determine if email was sent successfully\n      const emailSent = \n        emailSentValue.toLowerCase() === 'true' || \n        emailSentValue.toLowerCase() === 'yes' ||\n        message.toLowerCase().includes('success') ||\n        message.toLowerCase().includes('sent');\n      \n      console.log('📧 Email sent status:', emailSent);\n      console.log('📧 Response message:', message);\n      \n      return {\n        emailSent,\n        message\n      };\n    } catch (error) {\n      console.error('❌ Error parsing EmailPolicyDocuments response:', error);\n      throw new Error(`Failed to parse EmailPolicyDocuments response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseSavePolicyResponse(xmlText: string): TerracottaSavePolicyResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      // Log the full XML for debugging\n      console.log('🔍 Full SavePolicyDetails XML Response:', xmlText);\n      \n      // Try different possible XML structures and field names\n      const messageNode = xmlDoc.querySelector('Message, message');\n      const policySavedNode = xmlDoc.querySelector('policySaved, PolicySaved');\n      const policyIDNode = xmlDoc.querySelector('policyID, PolicyID');\n      \n      // Try multiple variations for certificate\n      const certificateNode = xmlDoc.querySelector('certificate, Certificate, cert, Cert, CertificateURL, certificateURL');\n      const pwNode = xmlDoc.querySelector('PW, pw, PolicyWording, policyWording');\n      const siNode = xmlDoc.querySelector('SI, si, SummaryInsurance, summaryInsurance, SummaryCover, summaryCover');\n      const kfNode = xmlDoc.querySelector('KF, kf, KeyFacts, keyFacts');\n      const ipidNode = xmlDoc.querySelector('IPID, ipid');\n      \n      const message = messageNode?.textContent || '';\n      const policySavedRaw = policySavedNode?.textContent || 'No';\n      // Handle both \"Yes\"/\"No\" and \"true\"/\"false\" formats\n      const policySaved = (policySavedRaw === 'true' ? 'Yes' : policySavedRaw === 'false' ? 'No' : policySavedRaw) as 'Yes' | 'No' | 'true' | 'false';\n      const policyID = policyIDNode?.textContent || '';\n      const certificate = certificateNode?.textContent || '';\n      const pw = pwNode?.textContent || '';\n      const si = siNode?.textContent || '';\n      const kf = kfNode?.textContent || '';\n      const ipid = ipidNode?.textContent || '';\n      \n      console.log('📋 Parsed SavePolicyDetails fields:');\n      console.log('  - Message:', message);\n      console.log('  - policySaved (raw):', policySavedRaw);\n      console.log('  - policySaved (normalized):', policySaved);\n      console.log('  - policyID:', policyID);\n      console.log('  - certificate:', certificate || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - PW:', pw || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - SI:', si || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - KF:', kf || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - IPID:', ipid || '⚠️ EMPTY/NOT FOUND');\n      \n      // List all XML nodes for debugging\n      console.log('📋 All XML element names in response:');\n      const allElements = xmlDoc.querySelectorAll('*');\n      const elementNames = Array.from(allElements as NodeListOf<Element>).map(el => el.tagName);\n      console.log('  Available elements:', Array.from(new Set(elementNames)).join(', '));\n\n      return {\n        Message: message,\n        policySaved: policySaved,\n        policyID: policyID,\n        certificate: certificate,\n        PW: pw,\n        SI: si,\n        KF: kf,\n        IPID: ipid\n      };\n    } catch (error) {\n      console.error('Error parsing save policy response:', error);\n      throw new Error(`Failed to parse save policy response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseProductListResponse(xmlText: string): TerracottaProductListResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const schemas: TerracottaProduct[] = [];\n\n      const schemaNodes = xmlDoc.querySelectorAll('Schema');\n      schemaNodes.forEach((node: any) => {\n        const schema: TerracottaProduct = {\n          SchemaID: parseInt(node.querySelector('SchemaID')?.textContent || '0'),\n          SchemaName: node.querySelector('SchemaName')?.textContent || ''\n        };\n        schemas.push(schema);\n      });\n\n      return { Message: message, ResultID: resultID, Schemas: schemas };\n    } catch (error) {\n      console.error('Error parsing product list response:', error);\n      throw new Error(`Failed to parse product list response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parsePolicyTypeResponse(xmlText: string): TerracottaPolicyTypeResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const policyTypes: TerracottaPolicyType[] = [];\n\n      const policyTypeNodes = xmlDoc.querySelectorAll('TypePolicy');\n      policyTypeNodes.forEach((node: any) => {\n        const policyType: TerracottaPolicyType = {\n          TypePolicyID: node.querySelector('TypePolicyID')?.textContent || '',\n          TypePolicyName: node.querySelector('Name')?.textContent || '', // Changed from TypePolicyName to Name\n          Description: node.querySelector('IsAnnual')?.textContent === '1' ? 'Annual Policy' : 'Single Trip Policy'\n        };\n        policyTypes.push(policyType);\n      });\n\n      return { Message: message, ResultID: resultID, PolicyTypes: policyTypes };\n    } catch (error) {\n      console.error('Error parsing policy type response:', error);\n      throw new Error(`Failed to parse policy type response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parsePolicyTypeDestinationResponse(xmlText: string): TerracottaPolicyTypeDestinationResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const policyTypeDestinations: TerracottaPolicyTypeDestination[] = [];\n\n      const destinationNodes = xmlDoc.querySelectorAll('PolicyTypeDestination');\n      destinationNodes.forEach((node: any) => {\n        const destination: TerracottaPolicyTypeDestination = {\n          TypePolicyDestinationID: node.querySelector('TypePolicyDestinationID')?.textContent || '',\n          Name: node.querySelector('Name')?.textContent || '',\n          PolicyTypeID: node.querySelector('PolicyTypeID')?.textContent || ''\n        };\n        policyTypeDestinations.push(destination);\n      });\n\n      return { Message: message, ResultID: resultID, PolicyTypeDestinations: policyTypeDestinations };\n    } catch (error) {\n      console.error('Error parsing policy type destination response:', error);\n      throw new Error(`Failed to parse policy type destination response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Main Terracotta Service Class\n */\nexport class TerracottaService {\n  private static instance: TerracottaService;\n  private userID: string;\n  private userCode: string;\n\n  constructor(userID: string = TERRACOTTA_USER_ID, userCode: string = TERRACOTTA_USER_CODE) {\n    this.userID = userID;\n    this.userCode = userCode;\n  }\n\n  static getInstance(userID?: string, userCode?: string): TerracottaService {\n    if (!TerracottaService.instance) {\n      TerracottaService.instance = new TerracottaService(\n        userID || TERRACOTTA_USER_ID, \n        userCode || TERRACOTTA_USER_CODE\n      );\n    }\n    return TerracottaService.instance;\n  }\n\n  /**\n   * Generic SOAP request method\n   */\n  private async makeSOAPRequest(method: string, requestBody: string): Promise<string> {\n    const soapEnvelope = SOAPBuilder.createEnvelope(requestBody);\n    \n    console.log('Making SOAP request via proxy to:', `${PROXY_BASE_URL}/${method}`);\n    console.log('SOAP Envelope:', soapEnvelope);\n    \n    try {\n      const response = await fetch(`${PROXY_BASE_URL}/${method}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/xml; charset=utf-8'\n        },\n        body: soapEnvelope\n      });\n\n      console.log('SOAP Response Status:', response.status, response.statusText);\n      const responseText = await response.text();\n      console.log('SOAP Response Body:', responseText);\n\n      if (!response.ok) {\n        throw new Error(`SOAP request failed: ${response.status} ${response.statusText}`);\n      }\n\n      return responseText;\n    } catch (error) {\n      console.error('Proxy request failed:', error);\n      throw new Error(`Failed to connect to Terracotta API via proxy: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Test connection with HelloWorld method\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const soapBody = `\n        <HelloWorld xmlns=\"WS-IntegratedQuote\">\n        </HelloWorld>`;\n\n      const responseText = await this.makeSOAPRequest('HelloWorld', soapBody);\n      console.log('Connection test successful:', responseText);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get available policy types for a specific schema\n   */\n  async getUserProductTypePolicy(schemaId: string): Promise<TerracottaPolicyTypeResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductTypePolicy - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      \n      const soapBody = `\n        <GetUserProductTypePolicy xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductTypePolicy>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductTypePolicy', soapBody);\n      return XMLParser.parsePolicyTypeResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductTypePolicy:', error);\n      throw new Error(`Failed to get policy types: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available destinations for a specific schema\n   */\n  async getUserProductDestination(schemaId: string): Promise<TerracottaPolicyTypeDestinationResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductDestination - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      \n      const soapBody = `\n        <GetUserProductDestination xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductDestination>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductDestination', soapBody);\n      return XMLParser.parsePolicyTypeDestinationResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductDestination:', error);\n      throw new Error(`Failed to get policy type destinations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available products for the user\n   */\n  async getUserProductList(): Promise<TerracottaProductListResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductList - userID:', userID, 'userCode:', userCode);\n      console.log('getUserProductList - this.userID:', this.userID, 'this.userCode:', this.userCode);\n      \n      const soapBody = `\n        <GetUserProductList xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n        </GetUserProductList>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductList', soapBody);\n      return XMLParser.parseProductListResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductList:', error);\n      throw new Error(`Failed to get user product list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 1. Request for quotations\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\n   */\n  async provideQuotation(request: TerracottaQuoteRequest): Promise<TerracottaQuoteResponse> {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotation...');\n      console.log('📦 Request object:', request);\n      \n      const quoteDetailsXML = SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);\n      console.log('📄 Quote Details XML:', quoteDetailsXML);\n      \n      const soapBody = `\n        <ProvideQuotation xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          ${quoteDetailsXML}\n        </ProvideQuotation>`;\n\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotation`);\n      \n      const responseText = await this.makeSOAPRequest('ProvideQuotation', soapBody);\n      \n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      \n      const parsedResponse = XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotation:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Obtain Screening Questions\n   * Calls ScreeningQuestions to get screening questions for the selected quote\n   */\n  async getScreeningQuestions(quoteID: string): Promise<TerracottaScreeningQuestionsResponse> {\n    try {\n      console.log('🔄 Building SOAP request for ScreeningQuestions...');\n      console.log('📦 QuoteID:', quoteID);\n      console.log('👤 UserID:', this.userID, 'UserCode:', this.userCode);\n      \n      const soapBody = `\n        <ScreeningQuestions xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID)}</userID>\n          <userCode>${parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE)}</userCode>\n          <quoteID>${quoteID}</quoteID>\n        </ScreeningQuestions>`;\n\n      console.log('📤 SOAP Body for ScreeningQuestions:', soapBody);\n      \n      const responseText = await this.makeSOAPRequest('ScreeningQuestions', soapBody);\n      \n      console.log('📥 Raw Response from ScreeningQuestions:', responseText.substring(0, 1000));\n      \n      const parsed = XMLParser.parseScreeningQuestionsResponse(responseText);\n      console.log('✅ Parsed Screening Questions Response:', parsed);\n      console.log('📋 Number of questions:', parsed.screeningQuestions?.length || 0);\n      \n      if (parsed.screeningQuestions && parsed.screeningQuestions.length > 0) {\n        console.log('📝 Questions details:');\n        parsed.screeningQuestions.forEach((q, idx) => {\n          console.log(`  ${idx + 1}. Q${q.questionNumber}: ${q.question}`);\n        });\n      }\n      \n      return parsed;\n    } catch (error) {\n      console.error('❌ Error in getScreeningQuestions:', error);\n      console.error('Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get screening questions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 2. Update quotes with additional covers\n   * Calls ProvideQuotationWithAlterations to get quotes with specific alterations/add-ons\n   * This method can only be called AFTER obtaining a quote reference from ProvideQuotation\n   */\n  async provideQuotationWithAlterations(request: TerracottaQuoteWithAlterationsRequest): Promise<TerracottaQuoteResponse> {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotationWithAlterations...');\n      console.log('📦 Request object:', request);\n      \n      const specificQuoteDetailsXML = SOAPBuilder.buildSpecificQuoteDetailsXML(request.specificQuoteDetails);\n      console.log('📄 Specific Quote Details XML:', specificQuoteDetailsXML);\n      \n      const soapBody = `\n        <ProvideQuotationWithAlterations xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${specificQuoteDetailsXML}\n        </ProvideQuotationWithAlterations>`;\n\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotationWithAlterations`);\n      \n      const responseText = await this.makeSOAPRequest('ProvideQuotationWithAlterations', soapBody);\n      \n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      \n      const parsedResponse = XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotationWithAlterations:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes with alterations from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Save a quote as a Live policy\n   * Calls SavePolicyDetails to convert the quote into a live policy\n   */\n  async savePolicyDetails(request: TerracottaSavePolicyRequest): Promise<TerracottaSavePolicyResponse> {\n    try {\n      console.log('🚀 Building SOAP request for SavePolicyDetails...');\n      console.log('📦 Request object:', request);\n      console.log('👥 Travelers in request:', JSON.stringify(request.travelers, null, 2));\n      console.log('📧 Contact Details in request:', JSON.stringify(request.contactDetails, null, 2));\n      \n      const screeningAnswersXML = SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);\n      \n      // Build travelers XML if provided\n      if (request.travelers && request.travelers.length > 0) {\n        console.log(`🔨 Building XML for ${request.travelers.length} traveler(s)...`);\n        request.travelers.forEach((t, idx) => {\n          console.log(`  Traveler ${idx + 1}: ${t.Title} ${t.FirstName} ${t.LastName}, Age: ${t.Age}, DOB: ${t.DateOfBirth}`);\n        });\n      }\n      \n      const travelersXML = request.travelers && request.travelers.length > 0\n        ? request.travelers.map(traveler => SOAPBuilder.buildTravelerXML(traveler)).join('')\n        : '';\n      \n      // Build contact details XML if provided\n      const contactDetailsXML = request.contactDetails\n        ? SOAPBuilder.buildContactDetailsXML(request.contactDetails)\n        : '';\n      \n      const soapBody = `\n        <SavePolicyDetails xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${screeningAnswersXML}\n          ${request.medicalScreeningReference ? `<medicalScreeningReference>${request.medicalScreeningReference}</medicalScreeningReference>` : '<medicalScreeningReference>string</medicalScreeningReference>'}\n          ${request.useDefaultAnswers !== undefined ? `<useDefaultAnswers>${request.useDefaultAnswers}</useDefaultAnswers>` : '<useDefaultAnswers>1</useDefaultAnswers>'}\n          ${travelersXML}\n          ${contactDetailsXML}\n        </SavePolicyDetails>`;\n\n      console.log('📤 Complete SOAP Body for SavePolicyDetails:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/SavePolicyDetails`);\n\n      const responseText = await this.makeSOAPRequest('SavePolicyDetails', soapBody);\n      \n      console.log('📥 Raw SOAP Response from SavePolicyDetails:', responseText);\n      \n      const parsedResponse = XMLParser.parseSavePolicyResponse(responseText);\n      console.log('✅ Parsed SavePolicyDetails response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in savePolicyDetails:', error);\n      throw new Error(`Failed to save policy details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 4. Email Policy Documents\n   * Calls EmailPolicyDocuments to send policy documents to the policy holder's email\n   */\n  async emailPolicyDocuments(request: TerracottaEmailPolicyDocumentsRequest): Promise<TerracottaEmailPolicyDocumentsResponse> {\n    try {\n      console.log('🚀 Building SOAP request for EmailPolicyDocuments...');\n      console.log('📦 Request object:', request);\n      \n      const soapBody = `\n        <EmailPolicyDocuments xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <policyID>${request.policyID}</policyID>\n          <emailAddress>${request.emailAddress}</emailAddress>\n        </EmailPolicyDocuments>`;\n\n      console.log('📤 Complete SOAP Body for EmailPolicyDocuments:', soapBody);\n      console.log('📧 Sending policy documents to:', request.emailAddress);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/EmailPolicyDocuments`);\n\n      const responseText = await this.makeSOAPRequest('EmailPolicyDocuments', soapBody);\n      \n      console.log('📥 Raw SOAP Response from EmailPolicyDocuments:', responseText);\n      \n      const parsedResponse = XMLParser.parseEmailPolicyDocumentsResponse(responseText);\n      console.log('✅ Parsed EmailPolicyDocuments response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in emailPolicyDocuments:', error);\n      throw new Error(`Failed to email policy documents: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Utility method to convert frontend data to Terracotta format\n   */\n  static convertToTerracottaFormat(formData: any, availablePolicyTypes?: TerracottaPolicyType[]): TerracottaQuoteRequest {\n    console.log('Converting form data to Terracotta format:', formData);\n    \n    // Use DUMMY data for travelers to get quotation\n    // Real traveler data will be collected later in the payment step\n    const travelers: TerracottaTraveler[] = Array.from({ length: formData.numberOfTravelers || 1 }, (_, index) => {\n      const dummyAge = 30; // Default dummy age\n      const dummyDateOfBirth = calculateDateOfBirth(dummyAge);\n      \n      console.log(`Traveler ${index + 1} (DUMMY): DOB=${dummyDateOfBirth}, Age=${dummyAge}`);\n      \n      return {\n        TravellerNumber: index + 1,\n        Title: 'Mr', // Dummy title\n        FirstName: 'John', // Dummy first name\n        LastName: 'Doe', // Dummy last name\n        DateOfBirth: formatDateForTerracotta(dummyDateOfBirth),\n        Age: dummyAge,\n        AgebandID: getAgebandID(dummyAge),\n        TitleID: getTitleID('Mr'),\n        minAge: dummyAge,\n        maxAge: dummyAge,\n        ScreeningInformation: null\n      };\n    });\n\n    // Use DUMMY contact details to get quotation\n    // Real contact details will be collected later in the payment step\n    const contactDetails: TerracottaContactDetails = {\n      Address: '123 Main Street', // Dummy address\n      Postcode: '12345', // Dummy postcode\n      Email: 'customer@example.com', // Dummy email\n      Telephone: '+302101234567', // Dummy telephone\n      VehicleMakeModel: formData.vehicleMakeModel,\n      VehicleLicensePlate: formData.vehicleLicensePlate,\n      VehicleYearManufacture: formData.vehicleYearManufacture\n    };\n\n           // Convert trip details using actual user data\n           const quoteDetails: TerracottaQuoteDetails = {\n             ResidenceID: getResidenceID(formData.countryOfResidence),\n             TypePolicyID: getTypePolicyID(formData.tripType, availablePolicyTypes),\n             TypePackageID: '1', // Fixed value as requested (string)\n             Destination: formData.destination || 'Europe',\n             StartDate: formatDateForTerracotta(formData.startDate),\n             EndDate: formatDateForTerracotta(formData.endDate),\n             Travellers: travelers,\n             ContactDetails: contactDetails,\n             includeAnnualQuotes: 0, // Always 0 - TypePolicyID determines if it's annual\n             includeUpsell: 0, // Simplified for now\n             currencyID: 1, // EUR\n             schemaIDFilter: '717' // Use schema 717\n           };\n\n    console.log('Converted Terracotta request:', quoteDetails);\n    \n    // Use fixed values as requested\n    return {\n      userID: '4072',\n      userCode: '111427',\n      quoteDetails\n    };\n  }\n}\n\n/**\n * Utility functions for data conversion\n */\n\nfunction formatDateForTerracotta(dateString: string): string {\n  if (!dateString) return '';\n  \n  // Handle different date formats\n  if (dateString.includes('/')) {\n    // Handle DD/MM/YYYY format\n    const parts = dateString.split('/');\n    if (parts.length === 3) {\n      const [day, month, year] = parts;\n      return `${year}/${month}/${day}`;\n    }\n  }\n  \n  // Handle YYYY-MM-DD format\n  if (dateString.includes('-')) {\n    return dateString.replace(/-/g, '/');\n  }\n  \n  return dateString;\n}\n\nfunction calculateDateOfBirth(age: number): string {\n  const currentYear = new Date().getFullYear();\n  const birthYear = currentYear - age;\n  // Use January 1st as default date\n  return `${birthYear}/01/01`;\n}\n\nfunction calculateAgeFromDateOfBirth(dateOfBirth: string): number {\n  const birthDate = new Date(dateOfBirth);\n  const today = new Date();\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  \n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  \n  return Math.max(0, age);\n}\n\nexport function getResidenceID(country: string): string {\n  // Map countries to Terracotta Residence IDs\n  // Based on Terracotta API - Greece is ResidenceID 24\n  const residenceMap: { [key: string]: string } = {\n    'Greece': '24',     // Correct ResidenceID for Greece\n    'Austria': '4',\n    'Belgium': '6',\n    'Bulgaria': '10',\n    'Croatia (Hrvatska)': '14',\n    'Czech Republic': '16',\n    'Denmark': '17',\n    'Estonia': '20',\n    'Finland': '21',\n    'France': '22',\n    'Germany': '23',\n    'Hungary': '27',\n    'Iceland': '28',\n    'Italy': '33',\n    'Latvia': '38',\n    'Liechtenstein': '40',\n    'Lithuania': '41',\n    'Luxembourg': '42',\n    'Malta': '93',\n    'Netherlands': '47',\n    'Norway': '49',\n    'Poland': '53',\n    'Portugal': '54',\n    'Republic of Cyprus': '283',\n    'Republic of Ireland': '19',\n    'Romania': '55',\n    'Slovak Republic': '59',\n    'Slovenia': '60',\n    'Spain': '62',\n    'Sweden': '63'\n  };\n  \n  return residenceMap[country] || '24'; // Default to Greece\n}\n\nexport function getTypePolicyID(tripType: string, availablePolicyTypes?: TerracottaPolicyType[]): string {\n  // If we have SOAP data, use it to find the correct TypePolicyID\n  if (availablePolicyTypes && availablePolicyTypes.length > 0) {\n    const policyType = availablePolicyTypes.find(pt => {\n      const name = pt.TypePolicyName.toLowerCase();\n      switch (tripType) {\n        case 'single':\n          return name.includes('single') && !name.includes('annual');\n        case 'annual':\n          return name.includes('annual') || name.includes('multi-trip');\n        case 'longstay':\n          return name.includes('longstay') || name.includes('long stay');\n        case 'comprehensive':\n          return name.includes('comprehensive');\n        default:\n          return false;\n      }\n    });\n    \n    if (policyType) {\n      console.log(`✅ Found TypePolicyID ${policyType.TypePolicyID} for trip type '${tripType}' (${policyType.TypePolicyName})`);\n      return policyType.TypePolicyID;\n    }\n  }\n  \n  // Fallback to hardcoded mappings if SOAP data not available\n  console.log(`⚠️ Using fallback mapping for trip type '${tripType}'`);\n  const policyMap: { [key: string]: string } = {\n    'single': '2',        // Single Trip TypePolicyID\n    'annual': '23',       // Annual Multi-Trip TypePolicyID\n    'longstay': '3',      // Longstay TypePolicyID\n    'comprehensive': '2'  // Use Single Trip as default\n  };\n  \n  return policyMap[tripType] || '2'; // Default to Single Trip TypePolicyID\n}\n\nfunction getTypePackageID(tripType: string): string {\n  // Use correct Package IDs (not SchemaIDs)\n  // Package IDs are typically 1, 2, 3, etc. for different coverage levels\n  const packageMap: { [key: string]: string } = {\n    'single': '1',        // Basic package for single trip\n    'annual': '1',        // Basic package for annual\n    'comprehensive': '2'  // Higher coverage package\n  };\n  \n  return packageMap[tripType] || '1'; // Default to basic package\n}\n\nexport function getAgebandID(age: number): number {\n  // Map age to Terracotta Ageband ID\n  if (age <= 17) return 1;\n  if (age <= 30) return 2;\n  if (age <= 40) return 3;\n  if (age <= 50) return 4;\n  if (age <= 60) return 5;\n  if (age <= 70) return 6;\n  return 7; // 70+\n}\n\nexport function getTitleID(title: string): number {\n  // Map title to Terracotta Title ID\n  const titleMap: { [key: string]: number } = {\n    'Mr': 1,\n    'Mrs': 2,\n    'Miss': 3,\n    'Ms': 4,\n    'Dr': 5,\n    'Prof': 6\n  };\n  \n  return titleMap[title] || 1; // Default to Mr\n}\n\nfunction getCurrencyID(currency: string): number {\n  // Map currency to Terracotta Currency ID\n  const currencyMap: { [key: string]: number } = {\n    'EUR': 1,\n    'USD': 2,\n    'GBP': 3,\n    'CHF': 4\n  };\n  \n  return currencyMap[currency] || 1; // Default to EUR\n}\n\nexport default TerracottaService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}