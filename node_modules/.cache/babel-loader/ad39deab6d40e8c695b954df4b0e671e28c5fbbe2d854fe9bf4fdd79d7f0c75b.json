{"ast":null,"code":"var _TerracottaService;/**\n * Terracotta Insurance Quote Integration Service\n * \n * This service handles all communication with the Terracotta Integrated Quote web service\n * using SOAP protocol. It provides methods for:\n * - Requesting quotes (ProvideQuotation)\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\n * - Getting screening questions (ScreeningQuestions)\n * - Saving policy details (SavePolicyDetails)\n */// Import xmldom for Node.js XML parsing\nlet DOMParser;if(typeof window==='undefined'){// Node.js environment\nconst{DOMParser:XMDOMParser}=require('xmldom');DOMParser=XMDOMParser;}else{// Browser environment\nDOMParser=window.DOMParser;}// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL='https://www.asuaonline.com/ws/integratedquote.asmx';const PROXY_BASE_URL='http://localhost:3001/api/terracotta';const TERRACOTTA_USER_ID='4072';const TERRACOTTA_USER_CODE='111427';// TypeScript interfaces for Terracotta API data structures\n/**\n * Helper function to decode HTML entities and format currency\n */function formatCurrencyLimit(htmlString){if(!htmlString)return'';// Decode HTML entities\nconst textarea=document.createElement('textarea');textarea.innerHTML=htmlString;let decoded=textarea.value;// Additional manual replacements for common entities\ndecoded=decoded.replace(/&euro;/gi,'€').replace(/&pound;/gi,'£').replace(/&dollar;/gi,'$').replace(/&amp;/gi,'&').replace(/&lt;/gi,'<').replace(/&gt;/gi,'>').replace(/&quot;/gi,'\"').replace(/&#39;/gi,\"'\");// Format numbers with thousand separators\n// Match patterns like €32000 or euro32000 and add commas\ndecoded=decoded.replace(/([€£$]|euro|pound|dollar)?\\s*(\\d{4,})/gi,(match,currency,number)=>{const formattedNumber=parseInt(number).toLocaleString('en-US');return currency?\"\".concat(currency).concat(formattedNumber):formattedNumber;});// Fix spacing: \"Up to€32,000\" -> \"Up to €32,000\"\ndecoded=decoded.replace(/(\\w)([€£$])/g,'$1 $2');return decoded;}/**\n * SOAP XML Builder utility functions\n */class SOAPBuilder{static createEnvelope(body){return\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<soap:Envelope xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \\n               xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \\n               xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n  <soap:Body>\\n    \".concat(body,\"\\n  </soap:Body>\\n</soap:Envelope>\");}static buildTravelerXML(traveler){return\"\\n      <Traveller>\\n        <TravellerNumber>\".concat(traveler.TravellerNumber,\"</TravellerNumber>\\n        <Title>\").concat(traveler.Title,\"</Title>\\n        <FirstName>\").concat(traveler.FirstName,\"</FirstName>\\n        <LastName>\").concat(traveler.LastName,\"</LastName>\\n        <DateOfBirth>\").concat(traveler.DateOfBirth,\"</DateOfBirth>\\n        <Age>\").concat(traveler.Age,\"</Age>\\n        <AgebandID>\").concat(traveler.AgebandID||0,\"</AgebandID>\\n        <TitleID>\").concat(traveler.TitleID||0,\"</TitleID>\\n        <minAge>\").concat(traveler.minAge||traveler.Age,\"</minAge>\\n        <maxAge>\").concat(traveler.maxAge||traveler.Age,\"</maxAge>\\n        <AlterationID>\").concat(traveler.AlterationID||'',\"</AlterationID>\\n        <msPrice>\").concat(traveler.msPrice||0,\"</msPrice>\\n        <msPriceExcIPT>\").concat(traveler.msPriceExcIPT||0,\"</msPriceExcIPT>\\n        <msConditions>\").concat(traveler.msConditions||'',\"</msConditions>\\n        <ScreeningInformation xsi:nil=\\\"true\\\" />\\n      </Traveller>\");}static buildContactDetailsXML(contact){return\"\\n      <ContactDetails>\\n        <Address>\".concat(contact.Address,\"</Address>\\n        <Postcode>\").concat(contact.Postcode,\"</Postcode>\\n        <Email>\").concat(contact.Email,\"</Email>\\n        <Telephone>\").concat(contact.Telephone,\"</Telephone>\\n        \").concat(contact.VehicleMakeModel?\"<VehicleMakeModel>\".concat(contact.VehicleMakeModel,\"</VehicleMakeModel>\"):'',\"\\n        \").concat(contact.VehicleLicensePlate?\"<VehicleLicensePlate>\".concat(contact.VehicleLicensePlate,\"</VehicleLicensePlate>\"):'',\"\\n        \").concat(contact.VehicleYearManufacture?\"<VehicleYearManufacture>\".concat(contact.VehicleYearManufacture,\"</VehicleYearManufacture>\"):'',\"\\n      </ContactDetails>\");}static buildQuoteDetailsXML(details){const travelersXML=details.Travellers.map(traveler=>this.buildTravelerXML(traveler)).join('');const contactXML=this.buildContactDetailsXML(details.ContactDetails);return\"\\n      <quoteDetails>\\n        <ResidenceID>\".concat(parseInt(details.ResidenceID)||1,\"</ResidenceID>\\n        <TypePolicyID>\").concat(details.TypePolicyID,\"</TypePolicyID>\\n        <TypePackageID>\").concat(parseInt(details.TypePackageID)||1,\"</TypePackageID>\\n        <Destination>\").concat(details.Destination,\"</Destination>\\n        <StartDate>\").concat(details.StartDate,\"</StartDate>\\n        <EndDate>\").concat(details.EndDate,\"</EndDate>\\n        <Travellers>\\n          \").concat(travelersXML,\"\\n        </Travellers>\\n        \").concat(contactXML,\"\\n        \").concat(details.includeAnnualQuotes!==undefined?\"<includeAnnualQuotes>\".concat(details.includeAnnualQuotes,\"</includeAnnualQuotes>\"):'',\"\\n        \").concat(details.includeUpsell!==undefined?\"<includeUpsell>\".concat(details.includeUpsell,\"</includeUpsell>\"):'',\"\\n        \").concat(details.currencyID?\"<currencyID>\".concat(details.currencyID,\"</currencyID>\"):'',\"\\n        \").concat(details.schemaIDFilter?\"<schemaIDFilter>\".concat(details.schemaIDFilter,\"</schemaIDFilter>\"):'',\"\\n      </quoteDetails>\");}static buildScreeningAnswersXML(answers){return'<screeningQuestionAnswers>'+answers.map(answer=>\"\\n        <screeningQuestionAnswer>\\n          <questionNumber>\".concat(answer.questionNumber,\"</questionNumber>\\n          <answer>\").concat(answer.answer,\"</answer>\\n        </screeningQuestionAnswer>\")).join('')+'</screeningQuestionAnswers>';}static buildEligibilityAnswersXML(answers){return'<EligibilityQuestionAnswers>'+answers.map(answer=>\"\\n        <eligibilityQuestionAnswer>\\n          <questionNumber>\".concat(answer.questionNumber,\"</questionNumber>\\n          <answer>\").concat(answer.answer,\"</answer>\\n        </eligibilityQuestionAnswer>\")).join('')+'</EligibilityQuestionAnswers>';}static buildDynamicDetailsXML(details){return'<DynamicDetails>'+details.map(detail=>\"\\n        <DynamicDetail_SavedValue>\\n          <Position>\".concat(detail.Position,\"</Position>\\n          <FieldName>\").concat(detail.FieldName,\"</FieldName>\\n          <FieldValue>\").concat(detail.FieldValue,\"</FieldValue>\\n          <FieldSize>\").concat(detail.FieldSize,\"</FieldSize>\\n        </DynamicDetail_SavedValue>\")).join('')+'</DynamicDetails>';}static buildSpecificQuoteDetailsXML(details){const travelersXML=details.Travellers.map(traveler=>this.buildTravelerXML(traveler)).join('');const contactXML=this.buildContactDetailsXML(details.ContactDetails);const dynamicDetailsXML=details.DynamicDetails?this.buildDynamicDetailsXML(details.DynamicDetails):'';const screeningAnswersXML=details.screeningQuestionAnswers?this.buildScreeningAnswersXML(details.screeningQuestionAnswers):'';const eligibilityAnswersXML=details.EligibilityQuestionAnswers?this.buildEligibilityAnswersXML(details.EligibilityQuestionAnswers):'';return\"\\n      <specificQuoteDetails>\\n        <AlterationID>\".concat(details.AlterationID,\"</AlterationID>\\n        <Travellers>\\n          \").concat(travelersXML,\"\\n        </Travellers>\\n        \").concat(contactXML,\"\\n        \").concat(dynamicDetailsXML,\"\\n        \").concat(screeningAnswersXML,\"\\n        \").concat(eligibilityAnswersXML,\"\\n      </specificQuoteDetails>\");}}/**\n * XML Parser utility functions\n */class XMLParser{static getXMLParser(){return new DOMParser();}static parseQuoteResponse(xmlText){try{var _xmlDoc$querySelector;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');// Check for parsing errors\nconst parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector===void 0?void 0:_xmlDoc$querySelector.textContent)||'';const quoteResults=[];// Select only child quoteResults, not the parent container\nconst quoteResultNodes=xmlDoc.querySelectorAll('ProvideQuotationResult > quoteResults > quoteResults');quoteResultNodes.forEach(node=>{var _node$querySelector,_node$querySelector2,_node$querySelector3,_node$querySelector4,_node$querySelector5,_node$querySelector6,_node$querySelector7,_node$querySelector8,_node$querySelector9,_node$querySelector0,_node$querySelector1,_node$querySelector10,_node$querySelector11,_node$querySelector12,_node$querySelector13,_node$querySelector14,_node$querySelector15,_node$querySelector16,_node$querySelector17,_node$querySelector18,_node$querySelector19,_node$querySelector20,_node$querySelector21,_node$querySelector22,_node$querySelector23,_node$querySelector24,_node$querySelector25,_node$querySelector26,_node$querySelector27,_node$querySelector28,_node$querySelector29,_node$querySelector30,_node$querySelector31,_node$querySelector32,_node$querySelector33,_node$querySelector34,_node$querySelector35,_node$querySelector36,_node$querySelector37,_node$querySelector38,_node$querySelector39,_node$querySelector40,_node$querySelector41,_node$querySelector42,_node$querySelector43,_node$querySelector44;// Only process nodes that have QuoteID (skip empty parent nodes)\nconst quoteID=((_node$querySelector=node.querySelector('QuoteID'))===null||_node$querySelector===void 0?void 0:_node$querySelector.textContent)||'';if(!quoteID)return;// Skip empty nodes\nconst result={QuoteID:quoteID,schemaName:((_node$querySelector2=node.querySelector('schemaName'))===null||_node$querySelector2===void 0?void 0:_node$querySelector2.textContent)||'',policytypeName:((_node$querySelector3=node.querySelector('policytypeName'))===null||_node$querySelector3===void 0?void 0:_node$querySelector3.textContent)||'',residenceName:((_node$querySelector4=node.querySelector('residenceName'))===null||_node$querySelector4===void 0?void 0:_node$querySelector4.textContent)||'',destinationName:((_node$querySelector5=node.querySelector('destinationName'))===null||_node$querySelector5===void 0?void 0:_node$querySelector5.textContent)||'',startDate:((_node$querySelector6=node.querySelector('startDate'))===null||_node$querySelector6===void 0?void 0:_node$querySelector6.textContent)||'',endDate:((_node$querySelector7=node.querySelector('endDate'))===null||_node$querySelector7===void 0?void 0:_node$querySelector7.textContent)||'',SI:((_node$querySelector8=node.querySelector('SI'))===null||_node$querySelector8===void 0?void 0:_node$querySelector8.textContent)||'',PW:((_node$querySelector9=node.querySelector('PW'))===null||_node$querySelector9===void 0?void 0:_node$querySelector9.textContent)||'',KF:((_node$querySelector0=node.querySelector('KF'))===null||_node$querySelector0===void 0?void 0:_node$querySelector0.textContent)||'',HelpFile:((_node$querySelector1=node.querySelector('HelpFile'))===null||_node$querySelector1===void 0?void 0:_node$querySelector1.textContent)||'',currency:((_node$querySelector10=node.querySelector('currency'))===null||_node$querySelector10===void 0?void 0:_node$querySelector10.textContent)||'',IPT:parseFloat(((_node$querySelector11=node.querySelector('IPT'))===null||_node$querySelector11===void 0?void 0:_node$querySelector11.textContent)||'0'),IPTRate:parseFloat(((_node$querySelector12=node.querySelector('IPTRate'))===null||_node$querySelector12===void 0?void 0:_node$querySelector12.textContent)||'0'),GrossPrice:parseFloat(((_node$querySelector13=node.querySelector('GrossPrice'))===null||_node$querySelector13===void 0?void 0:_node$querySelector13.textContent)||'0'),screeningPremium:parseFloat(((_node$querySelector14=node.querySelector('screeningPremium'))===null||_node$querySelector14===void 0?void 0:_node$querySelector14.textContent)||'0'),IconURL:((_node$querySelector15=node.querySelector('IconURL'))===null||_node$querySelector15===void 0?void 0:_node$querySelector15.textContent)||'',SchemaID:parseInt(((_node$querySelector16=node.querySelector('SchemaID'))===null||_node$querySelector16===void 0?void 0:_node$querySelector16.textContent)||'0'),PolicyTypeID:parseInt(((_node$querySelector17=node.querySelector('PolicyTypeID'))===null||_node$querySelector17===void 0?void 0:_node$querySelector17.textContent)||'0'),DestinationID:parseInt(((_node$querySelector18=node.querySelector('DestinationID'))===null||_node$querySelector18===void 0?void 0:_node$querySelector18.textContent)||'0'),PackageID:parseInt(((_node$querySelector19=node.querySelector('PackageID'))===null||_node$querySelector19===void 0?void 0:_node$querySelector19.textContent)||'0'),MaxAgeAgebandID:parseInt(((_node$querySelector20=node.querySelector('MaxAgeAgebandID'))===null||_node$querySelector20===void 0?void 0:_node$querySelector20.textContent)||'0'),ScreeningID:parseInt(((_node$querySelector21=node.querySelector('ScreeningID'))===null||_node$querySelector21===void 0?void 0:_node$querySelector21.textContent)||'0'),groupPerProduct:((_node$querySelector22=node.querySelector('groupPerProduct'))===null||_node$querySelector22===void 0?void 0:_node$querySelector22.textContent)==='true',priceOrder:parseInt(((_node$querySelector23=node.querySelector('priceOrder'))===null||_node$querySelector23===void 0?void 0:_node$querySelector23.textContent)||'0'),IPID:((_node$querySelector24=node.querySelector('IPID'))===null||_node$querySelector24===void 0?void 0:_node$querySelector24.textContent)||'',typePolicyName:((_node$querySelector25=node.querySelector('typePolicyName'))===null||_node$querySelector25===void 0?void 0:_node$querySelector25.textContent)||'',typePackageName:((_node$querySelector26=node.querySelector('typePackageName'))===null||_node$querySelector26===void 0?void 0:_node$querySelector26.textContent)||'',currencyHTMLEncoded:((_node$querySelector27=node.querySelector('currencyHTMLEncoded'))===null||_node$querySelector27===void 0?void 0:_node$querySelector27.textContent)||'',AlterationID:((_node$querySelector28=node.querySelector('AlterationID'))===null||_node$querySelector28===void 0?void 0:_node$querySelector28.textContent)||'',packageName:((_node$querySelector29=node.querySelector('packageName'))===null||_node$querySelector29===void 0?void 0:_node$querySelector29.textContent)||'',isAnnual:parseInt(((_node$querySelector30=node.querySelector('isAnnual'))===null||_node$querySelector30===void 0?void 0:_node$querySelector30.textContent)||'0'),isBestBuy:parseInt(((_node$querySelector31=node.querySelector('isBestBuy'))===null||_node$querySelector31===void 0?void 0:_node$querySelector31.textContent)||'0'),maxDaysPerTrip:parseInt(((_node$querySelector32=node.querySelector('maxDaysPerTrip'))===null||_node$querySelector32===void 0?void 0:_node$querySelector32.textContent)||'0'),isBestBuyText:((_node$querySelector33=node.querySelector('isBestBuyText'))===null||_node$querySelector33===void 0?void 0:_node$querySelector33.textContent)||'',isBestBuyLocation:parseInt(((_node$querySelector34=node.querySelector('isBestBuyLocation'))===null||_node$querySelector34===void 0?void 0:_node$querySelector34.textContent)||'0'),numberToSort:parseFloat(((_node$querySelector35=node.querySelector('numberToSort'))===null||_node$querySelector35===void 0?void 0:_node$querySelector35.textContent)||'0'),coverLevel:parseInt(((_node$querySelector36=node.querySelector('coverLevel'))===null||_node$querySelector36===void 0?void 0:_node$querySelector36.textContent)||'0'),Discount:parseFloat(((_node$querySelector37=node.querySelector('Discount'))===null||_node$querySelector37===void 0?void 0:_node$querySelector37.textContent)||'0'),netUW:parseFloat(((_node$querySelector38=node.querySelector('netUW'))===null||_node$querySelector38===void 0?void 0:_node$querySelector38.textContent)||'0'),wbComm:parseFloat(((_node$querySelector39=node.querySelector('wbComm'))===null||_node$querySelector39===void 0?void 0:_node$querySelector39.textContent)||'0'),agentComm:parseFloat(((_node$querySelector40=node.querySelector('agentComm'))===null||_node$querySelector40===void 0?void 0:_node$querySelector40.textContent)||'0'),screeningPremiumPerPersonCSV:((_node$querySelector41=node.querySelector('screeningPremiumPerPersonCSV'))===null||_node$querySelector41===void 0?void 0:_node$querySelector41.textContent)||'',screeningPremiumExcIPTPerPersonCSV:((_node$querySelector42=node.querySelector('screeningPremiumExcIPTPerPersonCSV'))===null||_node$querySelector42===void 0?void 0:_node$querySelector42.textContent)||'',isNotCoveredPerPersonCSV:((_node$querySelector43=node.querySelector('isNotCoveredPerPersonCSV'))===null||_node$querySelector43===void 0?void 0:_node$querySelector43.textContent)||'',policytypeShortName:((_node$querySelector44=node.querySelector('policytypeShortName'))===null||_node$querySelector44===void 0?void 0:_node$querySelector44.textContent)||'',SummaryCovers:[]};// Parse SummaryCovers\nconst summaryCoversNode=node.querySelector('SummaryCovers');if(summaryCoversNode){const summaryCoverNodes=summaryCoversNode.querySelectorAll('summaryCover');const summaryCovers=[];summaryCoverNodes.forEach(coverNode=>{var _coverNode$querySelec,_coverNode$querySelec2,_coverNode$querySelec3,_coverNode$querySelec4;const rawLimit=((_coverNode$querySelec=coverNode.querySelector('Limit'))===null||_coverNode$querySelec===void 0?void 0:_coverNode$querySelec.textContent)||'';const rawExcess=((_coverNode$querySelec2=coverNode.querySelector('Excess'))===null||_coverNode$querySelec2===void 0?void 0:_coverNode$querySelec2.textContent)||'';summaryCovers.push({name:((_coverNode$querySelec3=coverNode.querySelector('name'))===null||_coverNode$querySelec3===void 0?void 0:_coverNode$querySelec3.textContent)||'',Limit:formatCurrencyLimit(rawLimit),Excess:formatCurrencyLimit(rawExcess),position:parseInt(((_coverNode$querySelec4=coverNode.querySelector('position'))===null||_coverNode$querySelec4===void 0?void 0:_coverNode$querySelec4.textContent)||'0')});});result.SummaryCovers=summaryCovers;}quoteResults.push(result);});return{Message:message,quoteResults};}catch(error){console.error('Error parsing quote response:',error);throw new Error(\"Failed to parse quote response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseScreeningQuestionsResponse(xmlText){try{var _xmlDoc$querySelector2;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector2=xmlDoc.querySelector('Message'))===null||_xmlDoc$querySelector2===void 0?void 0:_xmlDoc$querySelector2.textContent)||'';const screeningQuestions=[];const questionNodes=xmlDoc.querySelectorAll('screeningQuestion');questionNodes.forEach(node=>{var _node$querySelector45,_node$querySelector46,_node$querySelector47,_node$querySelector48,_node$querySelector49,_node$querySelector50,_node$querySelector51,_node$querySelector52;const question={questionNumber:parseInt(((_node$querySelector45=node.querySelector('questionNumber'))===null||_node$querySelector45===void 0?void 0:_node$querySelector45.textContent)||'0'),question:((_node$querySelector46=node.querySelector('question'))===null||_node$querySelector46===void 0?void 0:_node$querySelector46.textContent)||'',yesMessage:((_node$querySelector47=node.querySelector('yesMessage'))===null||_node$querySelector47===void 0?void 0:_node$querySelector47.textContent)||'',noMessage:((_node$querySelector48=node.querySelector('noMessage'))===null||_node$querySelector48===void 0?void 0:_node$querySelector48.textContent)||'',yesAction:((_node$querySelector49=node.querySelector('yesAction'))===null||_node$querySelector49===void 0?void 0:_node$querySelector49.textContent)||'',noAction:((_node$querySelector50=node.querySelector('noAction'))===null||_node$querySelector50===void 0?void 0:_node$querySelector50.textContent)||'',yesActionText:((_node$querySelector51=node.querySelector('yesActionText'))===null||_node$querySelector51===void 0?void 0:_node$querySelector51.textContent)||'',noActionText:((_node$querySelector52=node.querySelector('noActionText'))===null||_node$querySelector52===void 0?void 0:_node$querySelector52.textContent)||''};screeningQuestions.push(question);});return{Message:message,screeningQuestions};}catch(error){console.error('Error parsing screening questions response:',error);throw new Error(\"Failed to parse screening questions response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseSavePolicyResponse(xmlText){try{var _xmlDoc$querySelector3,_xmlDoc$querySelector4,_xmlDoc$querySelector5,_xmlDoc$querySelector6,_xmlDoc$querySelector7,_xmlDoc$querySelector8;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}return{Message:((_xmlDoc$querySelector3=xmlDoc.querySelector('Message'))===null||_xmlDoc$querySelector3===void 0?void 0:_xmlDoc$querySelector3.textContent)||'',policySaved:((_xmlDoc$querySelector4=xmlDoc.querySelector('policySaved'))===null||_xmlDoc$querySelector4===void 0?void 0:_xmlDoc$querySelector4.textContent)||'No',policyID:((_xmlDoc$querySelector5=xmlDoc.querySelector('policyID'))===null||_xmlDoc$querySelector5===void 0?void 0:_xmlDoc$querySelector5.textContent)||'',certificate:((_xmlDoc$querySelector6=xmlDoc.querySelector('certificate'))===null||_xmlDoc$querySelector6===void 0?void 0:_xmlDoc$querySelector6.textContent)||'',PW:((_xmlDoc$querySelector7=xmlDoc.querySelector('PW'))===null||_xmlDoc$querySelector7===void 0?void 0:_xmlDoc$querySelector7.textContent)||'',SI:((_xmlDoc$querySelector8=xmlDoc.querySelector('SI'))===null||_xmlDoc$querySelector8===void 0?void 0:_xmlDoc$querySelector8.textContent)||''};}catch(error){console.error('Error parsing save policy response:',error);throw new Error(\"Failed to parse save policy response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseProductListResponse(xmlText){try{var _xmlDoc$querySelector9,_xmlDoc$querySelector0;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector9=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector9===void 0?void 0:_xmlDoc$querySelector9.textContent)||'';const resultID=parseInt(((_xmlDoc$querySelector0=xmlDoc.querySelector('errorID'))===null||_xmlDoc$querySelector0===void 0?void 0:_xmlDoc$querySelector0.textContent)||'0');const schemas=[];const schemaNodes=xmlDoc.querySelectorAll('Schema');schemaNodes.forEach(node=>{var _node$querySelector53,_node$querySelector54;const schema={SchemaID:parseInt(((_node$querySelector53=node.querySelector('SchemaID'))===null||_node$querySelector53===void 0?void 0:_node$querySelector53.textContent)||'0'),SchemaName:((_node$querySelector54=node.querySelector('SchemaName'))===null||_node$querySelector54===void 0?void 0:_node$querySelector54.textContent)||''};schemas.push(schema);});return{Message:message,ResultID:resultID,Schemas:schemas};}catch(error){console.error('Error parsing product list response:',error);throw new Error(\"Failed to parse product list response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parsePolicyTypeResponse(xmlText){try{var _xmlDoc$querySelector1,_xmlDoc$querySelector10;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector1=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector1===void 0?void 0:_xmlDoc$querySelector1.textContent)||'';const resultID=parseInt(((_xmlDoc$querySelector10=xmlDoc.querySelector('errorID'))===null||_xmlDoc$querySelector10===void 0?void 0:_xmlDoc$querySelector10.textContent)||'0');const policyTypes=[];const policyTypeNodes=xmlDoc.querySelectorAll('TypePolicy');policyTypeNodes.forEach(node=>{var _node$querySelector55,_node$querySelector56,_node$querySelector57;const policyType={TypePolicyID:((_node$querySelector55=node.querySelector('TypePolicyID'))===null||_node$querySelector55===void 0?void 0:_node$querySelector55.textContent)||'',TypePolicyName:((_node$querySelector56=node.querySelector('Name'))===null||_node$querySelector56===void 0?void 0:_node$querySelector56.textContent)||'',// Changed from TypePolicyName to Name\nDescription:((_node$querySelector57=node.querySelector('IsAnnual'))===null||_node$querySelector57===void 0?void 0:_node$querySelector57.textContent)==='1'?'Annual Policy':'Single Trip Policy'};policyTypes.push(policyType);});return{Message:message,ResultID:resultID,PolicyTypes:policyTypes};}catch(error){console.error('Error parsing policy type response:',error);throw new Error(\"Failed to parse policy type response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parsePolicyTypeDestinationResponse(xmlText){try{var _xmlDoc$querySelector11,_xmlDoc$querySelector12;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector11=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector11===void 0?void 0:_xmlDoc$querySelector11.textContent)||'';const resultID=parseInt(((_xmlDoc$querySelector12=xmlDoc.querySelector('errorID'))===null||_xmlDoc$querySelector12===void 0?void 0:_xmlDoc$querySelector12.textContent)||'0');const policyTypeDestinations=[];const destinationNodes=xmlDoc.querySelectorAll('PolicyTypeDestination');destinationNodes.forEach(node=>{var _node$querySelector58,_node$querySelector59,_node$querySelector60;const destination={TypePolicyDestinationID:((_node$querySelector58=node.querySelector('TypePolicyDestinationID'))===null||_node$querySelector58===void 0?void 0:_node$querySelector58.textContent)||'',Name:((_node$querySelector59=node.querySelector('Name'))===null||_node$querySelector59===void 0?void 0:_node$querySelector59.textContent)||'',PolicyTypeID:((_node$querySelector60=node.querySelector('PolicyTypeID'))===null||_node$querySelector60===void 0?void 0:_node$querySelector60.textContent)||''};policyTypeDestinations.push(destination);});return{Message:message,ResultID:resultID,PolicyTypeDestinations:policyTypeDestinations};}catch(error){console.error('Error parsing policy type destination response:',error);throw new Error(\"Failed to parse policy type destination response: \".concat(error instanceof Error?error.message:'Unknown error'));}}}/**\n * Main Terracotta Service Class\n */export class TerracottaService{constructor(){let userID=arguments.length>0&&arguments[0]!==undefined?arguments[0]:TERRACOTTA_USER_ID;let userCode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:TERRACOTTA_USER_CODE;this.userID=void 0;this.userCode=void 0;this.userID=userID;this.userCode=userCode;}static getInstance(userID,userCode){if(!TerracottaService.instance){TerracottaService.instance=new TerracottaService(userID||TERRACOTTA_USER_ID,userCode||TERRACOTTA_USER_CODE);}return TerracottaService.instance;}/**\n   * Generic SOAP request method\n   */async makeSOAPRequest(method,requestBody){const soapEnvelope=SOAPBuilder.createEnvelope(requestBody);console.log('Making SOAP request via proxy to:',\"\".concat(PROXY_BASE_URL,\"/\").concat(method));console.log('SOAP Envelope:',soapEnvelope);try{const response=await fetch(\"\".concat(PROXY_BASE_URL,\"/\").concat(method),{method:'POST',headers:{'Content-Type':'text/xml; charset=utf-8'},body:soapEnvelope});console.log('SOAP Response Status:',response.status,response.statusText);const responseText=await response.text();console.log('SOAP Response Body:',responseText);if(!response.ok){throw new Error(\"SOAP request failed: \".concat(response.status,\" \").concat(response.statusText));}return responseText;}catch(error){console.error('Proxy request failed:',error);throw new Error(\"Failed to connect to Terracotta API via proxy: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * Test connection with HelloWorld method\n   */async testConnection(){try{const soapBody=\"\\n        <HelloWorld xmlns=\\\"WS-IntegratedQuote\\\">\\n        </HelloWorld>\";const responseText=await this.makeSOAPRequest('HelloWorld',soapBody);console.log('Connection test successful:',responseText);return true;}catch(error){console.error('Connection test failed:',error);return false;}}/**\n   * Get available policy types for a specific schema\n   */async getUserProductTypePolicy(schemaId){try{const userID=parseInt(this.userID)||parseInt(TERRACOTTA_USER_ID);const userCode=parseInt(this.userCode)||parseInt(TERRACOTTA_USER_CODE);console.log('getUserProductTypePolicy - schemaId:',schemaId,'userID:',userID,'userCode:',userCode);const soapBody=\"\\n        <GetUserProductTypePolicy xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(userID,\"</userID>\\n          <userCode>\").concat(userCode,\"</userCode>\\n          <schemaId>\").concat(schemaId,\"</schemaId>\\n        </GetUserProductTypePolicy>\");const responseText=await this.makeSOAPRequest('GetUserProductTypePolicy',soapBody);return XMLParser.parsePolicyTypeResponse(responseText);}catch(error){console.error('Error in getUserProductTypePolicy:',error);throw new Error(\"Failed to get policy types: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * Get available destinations for a specific schema\n   */async getUserProductDestination(schemaId){try{const userID=parseInt(this.userID)||parseInt(TERRACOTTA_USER_ID);const userCode=parseInt(this.userCode)||parseInt(TERRACOTTA_USER_CODE);console.log('getUserProductDestination - schemaId:',schemaId,'userID:',userID,'userCode:',userCode);const soapBody=\"\\n        <GetUserProductDestination xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(userID,\"</userID>\\n          <userCode>\").concat(userCode,\"</userCode>\\n          <schemaId>\").concat(schemaId,\"</schemaId>\\n        </GetUserProductDestination>\");const responseText=await this.makeSOAPRequest('GetUserProductDestination',soapBody);return XMLParser.parsePolicyTypeDestinationResponse(responseText);}catch(error){console.error('Error in getUserProductDestination:',error);throw new Error(\"Failed to get policy type destinations: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * Get available products for the user\n   */async getUserProductList(){try{const userID=parseInt(this.userID)||parseInt(TERRACOTTA_USER_ID);const userCode=parseInt(this.userCode)||parseInt(TERRACOTTA_USER_CODE);console.log('getUserProductList - userID:',userID,'userCode:',userCode);console.log('getUserProductList - this.userID:',this.userID,'this.userCode:',this.userCode);const soapBody=\"\\n        <GetUserProductList xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(userID,\"</userID>\\n          <userCode>\").concat(userCode,\"</userCode>\\n        </GetUserProductList>\");const responseText=await this.makeSOAPRequest('GetUserProductList',soapBody);return XMLParser.parseProductListResponse(responseText);}catch(error){console.error('Error in getUserProductList:',error);throw new Error(\"Failed to get user product list: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 1. Request for quotations\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\n   */async provideQuotation(request){try{console.log('🚀 Building SOAP request for ProvideQuotation...');console.log('📦 Request object:',request);const quoteDetailsXML=SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);console.log('📄 Quote Details XML:',quoteDetailsXML);const soapBody=\"\\n        <ProvideQuotation xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          \").concat(quoteDetailsXML,\"\\n        </ProvideQuotation>\");console.log('📤 Complete SOAP Body:',soapBody);console.log('🌐 Sending SOAP request to:',\"\".concat(PROXY_BASE_URL,\"/ProvideQuotation\"));const responseText=await this.makeSOAPRequest('ProvideQuotation',soapBody);console.log('📥 Raw SOAP Response received');console.log('📄 Response length:',responseText.length,'characters');console.log('📄 First 500 chars of response:',responseText.substring(0,500));const parsedResponse=XMLParser.parseQuoteResponse(responseText);console.log('✅ Parsed response:',parsedResponse);return parsedResponse;}catch(error){console.error('❌ Error in provideQuotation:',error);console.error('❌ Error type:',error instanceof Error?error.constructor.name:typeof error);console.error('❌ Error message:',error instanceof Error?error.message:String(error));throw new Error(\"Failed to get quotes from Terracotta: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 3. Obtain Screening Questions\n   * Calls ScreeningQuestions to get screening questions for the selected quote\n   */async getScreeningQuestions(quoteID){try{const soapBody=\"\\n        <ScreeningQuestions xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(this.userID)||parseInt(TERRACOTTA_USER_ID),\"</userID>\\n          <userCode>\").concat(parseInt(this.userCode)||parseInt(TERRACOTTA_USER_CODE),\"</userCode>\\n          <quoteID>\").concat(quoteID,\"</quoteID>\\n        </ScreeningQuestions>\");const responseText=await this.makeSOAPRequest('ScreeningQuestions',soapBody);return XMLParser.parseScreeningQuestionsResponse(responseText);}catch(error){console.error('Error in getScreeningQuestions:',error);throw new Error(\"Failed to get screening questions: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 2. Update quotes with additional covers\n   * Calls ProvideQuotationWithAlterations to get quotes with specific alterations/add-ons\n   * This method can only be called AFTER obtaining a quote reference from ProvideQuotation\n   */async provideQuotationWithAlterations(request){try{console.log('🚀 Building SOAP request for ProvideQuotationWithAlterations...');console.log('📦 Request object:',request);const specificQuoteDetailsXML=SOAPBuilder.buildSpecificQuoteDetailsXML(request.specificQuoteDetails);console.log('📄 Specific Quote Details XML:',specificQuoteDetailsXML);const soapBody=\"\\n        <ProvideQuotationWithAlterations xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          <quoteID>\").concat(request.quoteID,\"</quoteID>\\n          \").concat(specificQuoteDetailsXML,\"\\n        </ProvideQuotationWithAlterations>\");console.log('📤 Complete SOAP Body:',soapBody);console.log('🌐 Sending SOAP request to:',\"\".concat(PROXY_BASE_URL,\"/ProvideQuotationWithAlterations\"));const responseText=await this.makeSOAPRequest('ProvideQuotationWithAlterations',soapBody);console.log('📥 Raw SOAP Response received');console.log('📄 Response length:',responseText.length,'characters');console.log('📄 First 500 chars of response:',responseText.substring(0,500));const parsedResponse=XMLParser.parseQuoteResponse(responseText);console.log('✅ Parsed response:',parsedResponse);return parsedResponse;}catch(error){console.error('❌ Error in provideQuotationWithAlterations:',error);console.error('❌ Error type:',error instanceof Error?error.constructor.name:typeof error);console.error('❌ Error message:',error instanceof Error?error.message:String(error));throw new Error(\"Failed to get quotes with alterations from Terracotta: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * 3. Save a quote as a Live policy\n   * Calls SavePolicyDetails to convert the quote into a live policy\n   */async savePolicyDetails(request){try{const screeningAnswersXML=SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);const soapBody=\"\\n        <SavePolicyDetails xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          <quoteID>\").concat(request.quoteID,\"</quoteID>\\n          \").concat(screeningAnswersXML,\"\\n          \").concat(request.medicalScreeningReference?\"<medicalScreeningReference>\".concat(request.medicalScreeningReference,\"</medicalScreeningReference>\"):'',\"\\n        </SavePolicyDetails>\");const responseText=await this.makeSOAPRequest('SavePolicyDetails',soapBody);return XMLParser.parseSavePolicyResponse(responseText);}catch(error){console.error('Error in savePolicyDetails:',error);throw new Error(\"Failed to save policy details: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\n   * Utility method to convert frontend data to Terracotta format\n   */static convertToTerracottaFormat(formData,availablePolicyTypes){var _formData$billingAddr,_formData$contactAddr,_formData$billingAddr2,_formData$contactAddr2,_formData$travelers$,_formData$travelers$2;console.log('Converting form data to Terracotta format:',formData);// Convert travelers to Terracotta format using actual user data\nconst travelers=formData.travelers.map((traveler,index)=>{// Prioritize date of birth over age for accuracy\nconst dateOfBirth=traveler.dateOfBirth||calculateDateOfBirth(parseInt(traveler.age));const calculatedAge=traveler.dateOfBirth?calculateAgeFromDateOfBirth(traveler.dateOfBirth):parseInt(traveler.age);console.log(\"Traveler \".concat(index+1,\": DOB=\").concat(dateOfBirth,\", Age=\").concat(calculatedAge));return{TravellerNumber:index+1,Title:traveler.title||'Mr',// Use actual title from form\nFirstName:traveler.firstName,LastName:traveler.lastName,DateOfBirth:formatDateForTerracotta(dateOfBirth),Age:calculatedAge,AgebandID:getAgebandID(calculatedAge),TitleID:getTitleID(traveler.title||'Mr'),minAge:calculatedAge,maxAge:calculatedAge,ScreeningInformation:null};});// Convert contact details using actual user data\nconst contactDetails={Address:((_formData$billingAddr=formData.billingAddress)===null||_formData$billingAddr===void 0?void 0:_formData$billingAddr.street)||((_formData$contactAddr=formData.contactAddress)===null||_formData$contactAddr===void 0?void 0:_formData$contactAddr.street)||'123 Main Street',Postcode:((_formData$billingAddr2=formData.billingAddress)===null||_formData$billingAddr2===void 0?void 0:_formData$billingAddr2.postalCode)||((_formData$contactAddr2=formData.contactAddress)===null||_formData$contactAddr2===void 0?void 0:_formData$contactAddr2.postalCode)||'12345',Email:((_formData$travelers$=formData.travelers[0])===null||_formData$travelers$===void 0?void 0:_formData$travelers$.email)||formData.contactEmail||'test@example.com',Telephone:((_formData$travelers$2=formData.travelers[0])===null||_formData$travelers$2===void 0?void 0:_formData$travelers$2.phone)||formData.contactPhone||'+30123456789',VehicleMakeModel:formData.vehicleMakeModel,VehicleLicensePlate:formData.vehicleLicensePlate,VehicleYearManufacture:formData.vehicleYearManufacture};// Convert trip details using actual user data\nconst quoteDetails={ResidenceID:getResidenceID(formData.countryOfResidence),TypePolicyID:getTypePolicyID(formData.tripType,availablePolicyTypes),TypePackageID:'1',// Fixed value as requested (string)\nDestination:formData.destination||'Europe',StartDate:formatDateForTerracotta(formData.startDate),EndDate:formatDateForTerracotta(formData.endDate),Travellers:travelers,ContactDetails:contactDetails,includeAnnualQuotes:formData.tripType==='annual'?1:0,includeUpsell:0,// Simplified for now\ncurrencyID:1,// EUR\nschemaIDFilter:'717'// Use schema 717\n};console.log('Converted Terracotta request:',quoteDetails);// Use fixed values as requested\nreturn{userID:'4072',userCode:'111427',quoteDetails};}}/**\n * Utility functions for data conversion\n */_TerracottaService=TerracottaService;TerracottaService.instance=void 0;function formatDateForTerracotta(dateString){if(!dateString)return'';// Handle different date formats\nif(dateString.includes('/')){// Handle DD/MM/YYYY format\nconst parts=dateString.split('/');if(parts.length===3){const[day,month,year]=parts;return\"\".concat(year,\"/\").concat(month,\"/\").concat(day);}}// Handle YYYY-MM-DD format\nif(dateString.includes('-')){return dateString.replace(/-/g,'/');}return dateString;}function calculateDateOfBirth(age){const currentYear=new Date().getFullYear();const birthYear=currentYear-age;// Use January 1st as default date\nreturn\"\".concat(birthYear,\"/01/01\");}function calculateAgeFromDateOfBirth(dateOfBirth){const birthDate=new Date(dateOfBirth);const today=new Date();let age=today.getFullYear()-birthDate.getFullYear();const monthDiff=today.getMonth()-birthDate.getMonth();if(monthDiff<0||monthDiff===0&&today.getDate()<birthDate.getDate()){age--;}return Math.max(0,age);}function getResidenceID(country){// Map countries to Terracotta Residence IDs\n// Based on Terracotta API - Greece is ResidenceID 24\nconst residenceMap={'Greece':'24',// Correct ResidenceID for Greece\n'Austria':'4','Belgium':'6','Bulgaria':'10','Croatia (Hrvatska)':'14','Czech Republic':'16','Denmark':'17','Estonia':'20','Finland':'21','France':'22','Germany':'23','Hungary':'27','Iceland':'28','Italy':'33','Latvia':'38','Liechtenstein':'40','Lithuania':'41','Luxembourg':'42','Malta':'93','Netherlands':'47','Norway':'49','Poland':'53','Portugal':'54','Republic of Cyprus':'283','Republic of Ireland':'19','Romania':'55','Slovak Republic':'59','Slovenia':'60','Spain':'62','Sweden':'63'};return residenceMap[country]||'24';// Default to Greece\n}function getTypePolicyID(tripType,availablePolicyTypes){// If we have SOAP data, use it to find the correct TypePolicyID\nif(availablePolicyTypes&&availablePolicyTypes.length>0){const policyType=availablePolicyTypes.find(pt=>{const name=pt.TypePolicyName.toLowerCase();switch(tripType){case'single':return name.includes('single')&&!name.includes('annual');case'annual':return name.includes('annual')||name.includes('multi-trip');case'longstay':return name.includes('longstay')||name.includes('long stay');case'comprehensive':return name.includes('comprehensive');default:return false;}});if(policyType){console.log(\"\\u2705 Found TypePolicyID \".concat(policyType.TypePolicyID,\" for trip type '\").concat(tripType,\"' (\").concat(policyType.TypePolicyName,\")\"));return policyType.TypePolicyID;}}// Fallback to hardcoded mappings if SOAP data not available\nconsole.log(\"\\u26A0\\uFE0F Using fallback mapping for trip type '\".concat(tripType,\"'\"));const policyMap={'single':'2',// Single Trip TypePolicyID\n'annual':'23',// Annual Multi-Trip TypePolicyID\n'longstay':'3',// Longstay TypePolicyID\n'comprehensive':'2'// Use Single Trip as default\n};return policyMap[tripType]||'2';// Default to Single Trip TypePolicyID\n}function getTypePackageID(tripType){// Use correct Package IDs (not SchemaIDs)\n// Package IDs are typically 1, 2, 3, etc. for different coverage levels\nconst packageMap={'single':'1',// Basic package for single trip\n'annual':'1',// Basic package for annual\n'comprehensive':'2'// Higher coverage package\n};return packageMap[tripType]||'1';// Default to basic package\n}function getAgebandID(age){// Map age to Terracotta Ageband ID\nif(age<=17)return 1;if(age<=30)return 2;if(age<=40)return 3;if(age<=50)return 4;if(age<=60)return 5;if(age<=70)return 6;return 7;// 70+\n}function getTitleID(title){// Map title to Terracotta Title ID\nconst titleMap={'Mr':1,'Mrs':2,'Miss':3,'Ms':4,'Dr':5,'Prof':6};return titleMap[title]||1;// Default to Mr\n}function getCurrencyID(currency){// Map currency to Terracotta Currency ID\nconst currencyMap={'EUR':1,'USD':2,'GBP':3,'CHF':4};return currencyMap[currency]||1;// Default to EUR\n}export default TerracottaService;","map":{"version":3,"names":["DOMParser","window","XMDOMParser","require","TERRACOTTA_BASE_URL","PROXY_BASE_URL","TERRACOTTA_USER_ID","TERRACOTTA_USER_CODE","formatCurrencyLimit","htmlString","textarea","document","createElement","innerHTML","decoded","value","replace","match","currency","number","formattedNumber","parseInt","toLocaleString","concat","SOAPBuilder","createEnvelope","body","buildTravelerXML","traveler","TravellerNumber","Title","FirstName","LastName","DateOfBirth","Age","AgebandID","TitleID","minAge","maxAge","AlterationID","msPrice","msPriceExcIPT","msConditions","buildContactDetailsXML","contact","Address","Postcode","Email","Telephone","VehicleMakeModel","VehicleLicensePlate","VehicleYearManufacture","buildQuoteDetailsXML","details","travelersXML","Travellers","map","join","contactXML","ContactDetails","ResidenceID","TypePolicyID","TypePackageID","Destination","StartDate","EndDate","includeAnnualQuotes","undefined","includeUpsell","currencyID","schemaIDFilter","buildScreeningAnswersXML","answers","answer","questionNumber","buildEligibilityAnswersXML","buildDynamicDetailsXML","detail","Position","FieldName","FieldValue","FieldSize","buildSpecificQuoteDetailsXML","dynamicDetailsXML","DynamicDetails","screeningAnswersXML","screeningQuestionAnswers","eligibilityAnswersXML","EligibilityQuestionAnswers","XMLParser","getXMLParser","parseQuoteResponse","xmlText","_xmlDoc$querySelector","parser","xmlDoc","parseFromString","parseError","querySelector","Error","textContent","message","quoteResults","quoteResultNodes","querySelectorAll","forEach","node","_node$querySelector","_node$querySelector2","_node$querySelector3","_node$querySelector4","_node$querySelector5","_node$querySelector6","_node$querySelector7","_node$querySelector8","_node$querySelector9","_node$querySelector0","_node$querySelector1","_node$querySelector10","_node$querySelector11","_node$querySelector12","_node$querySelector13","_node$querySelector14","_node$querySelector15","_node$querySelector16","_node$querySelector17","_node$querySelector18","_node$querySelector19","_node$querySelector20","_node$querySelector21","_node$querySelector22","_node$querySelector23","_node$querySelector24","_node$querySelector25","_node$querySelector26","_node$querySelector27","_node$querySelector28","_node$querySelector29","_node$querySelector30","_node$querySelector31","_node$querySelector32","_node$querySelector33","_node$querySelector34","_node$querySelector35","_node$querySelector36","_node$querySelector37","_node$querySelector38","_node$querySelector39","_node$querySelector40","_node$querySelector41","_node$querySelector42","_node$querySelector43","_node$querySelector44","quoteID","result","QuoteID","schemaName","policytypeName","residenceName","destinationName","startDate","endDate","SI","PW","KF","HelpFile","IPT","parseFloat","IPTRate","GrossPrice","screeningPremium","IconURL","SchemaID","PolicyTypeID","DestinationID","PackageID","MaxAgeAgebandID","ScreeningID","groupPerProduct","priceOrder","IPID","typePolicyName","typePackageName","currencyHTMLEncoded","packageName","isAnnual","isBestBuy","maxDaysPerTrip","isBestBuyText","isBestBuyLocation","numberToSort","coverLevel","Discount","netUW","wbComm","agentComm","screeningPremiumPerPersonCSV","screeningPremiumExcIPTPerPersonCSV","isNotCoveredPerPersonCSV","policytypeShortName","SummaryCovers","summaryCoversNode","summaryCoverNodes","summaryCovers","coverNode","_coverNode$querySelec","_coverNode$querySelec2","_coverNode$querySelec3","_coverNode$querySelec4","rawLimit","rawExcess","push","name","Limit","Excess","position","Message","error","console","parseScreeningQuestionsResponse","_xmlDoc$querySelector2","screeningQuestions","questionNodes","_node$querySelector45","_node$querySelector46","_node$querySelector47","_node$querySelector48","_node$querySelector49","_node$querySelector50","_node$querySelector51","_node$querySelector52","question","yesMessage","noMessage","yesAction","noAction","yesActionText","noActionText","parseSavePolicyResponse","_xmlDoc$querySelector3","_xmlDoc$querySelector4","_xmlDoc$querySelector5","_xmlDoc$querySelector6","_xmlDoc$querySelector7","_xmlDoc$querySelector8","policySaved","policyID","certificate","parseProductListResponse","_xmlDoc$querySelector9","_xmlDoc$querySelector0","resultID","schemas","schemaNodes","_node$querySelector53","_node$querySelector54","schema","SchemaName","ResultID","Schemas","parsePolicyTypeResponse","_xmlDoc$querySelector1","_xmlDoc$querySelector10","policyTypes","policyTypeNodes","_node$querySelector55","_node$querySelector56","_node$querySelector57","policyType","TypePolicyName","Description","PolicyTypes","parsePolicyTypeDestinationResponse","_xmlDoc$querySelector11","_xmlDoc$querySelector12","policyTypeDestinations","destinationNodes","_node$querySelector58","_node$querySelector59","_node$querySelector60","destination","TypePolicyDestinationID","Name","PolicyTypeDestinations","TerracottaService","constructor","userID","arguments","length","userCode","getInstance","instance","makeSOAPRequest","method","requestBody","soapEnvelope","log","response","fetch","headers","status","statusText","responseText","text","ok","testConnection","soapBody","getUserProductTypePolicy","schemaId","getUserProductDestination","getUserProductList","provideQuotation","request","quoteDetailsXML","quoteDetails","substring","parsedResponse","String","getScreeningQuestions","provideQuotationWithAlterations","specificQuoteDetailsXML","specificQuoteDetails","savePolicyDetails","medicalScreeningReference","convertToTerracottaFormat","formData","availablePolicyTypes","_formData$billingAddr","_formData$contactAddr","_formData$billingAddr2","_formData$contactAddr2","_formData$travelers$","_formData$travelers$2","travelers","index","dateOfBirth","calculateDateOfBirth","age","calculatedAge","calculateAgeFromDateOfBirth","title","firstName","lastName","formatDateForTerracotta","getAgebandID","getTitleID","ScreeningInformation","contactDetails","billingAddress","street","contactAddress","postalCode","email","contactEmail","phone","contactPhone","vehicleMakeModel","vehicleLicensePlate","vehicleYearManufacture","getResidenceID","countryOfResidence","getTypePolicyID","tripType","_TerracottaService","dateString","includes","parts","split","day","month","year","currentYear","Date","getFullYear","birthYear","birthDate","today","monthDiff","getMonth","getDate","Math","max","country","residenceMap","find","pt","toLowerCase","policyMap","getTypePackageID","packageMap","titleMap","getCurrencyID","currencyMap"],"sources":["C:/Users/laptop-123/TravelInsurance_Demo_2/src/services/terracottaService.ts"],"sourcesContent":["/**\n * Terracotta Insurance Quote Integration Service\n * \n * This service handles all communication with the Terracotta Integrated Quote web service\n * using SOAP protocol. It provides methods for:\n * - Requesting quotes (ProvideQuotation)\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\n * - Getting screening questions (ScreeningQuestions)\n * - Saving policy details (SavePolicyDetails)\n */\n\n// Import xmldom for Node.js XML parsing\nlet DOMParser: any;\nif (typeof window === 'undefined') {\n  // Node.js environment\n  const { DOMParser: XMDOMParser } = require('xmldom');\n  DOMParser = XMDOMParser;\n} else {\n  // Browser environment\n  DOMParser = window.DOMParser;\n}\n\n// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL = 'https://www.asuaonline.com/ws/integratedquote.asmx';\nconst PROXY_BASE_URL = 'http://localhost:3001/api/terracotta';\nconst TERRACOTTA_USER_ID = '4072';\nconst TERRACOTTA_USER_CODE = '111427';\n\n// TypeScript interfaces for Terracotta API data structures\n\nexport interface TerracottaPolicyType {\n  TypePolicyID: string;\n  TypePolicyName: string;\n  Description?: string;\n}\n\nexport interface TerracottaPolicyTypeDestination {\n  TypePolicyDestinationID: string;\n  Name: string;\n  PolicyTypeID?: string;\n}\n\nexport interface TerracottaPolicyTypeDestinationResponse {\n  Message: string;\n  ResultID: number;\n  PolicyTypeDestinations: TerracottaPolicyTypeDestination[];\n}\n\nexport interface TerracottaPolicyTypeResponse {\n  Message: string;\n  ResultID: number;\n  PolicyTypes: TerracottaPolicyType[];\n}\n\nexport interface TerracottaTraveler {\n  TravellerNumber: number;\n  Title: string;\n  FirstName: string;\n  LastName: string;\n  DateOfBirth: string; // Format: YYYY/MM/DD\n  Age: number;\n  AgebandID?: number;\n  TitleID?: number;\n  minAge?: number;\n  maxAge?: number;\n  AlterationID?: string;\n  msPrice?: number;\n  msPriceExcIPT?: number;\n  msConditions?: string;\n  ScreeningInformation?: any;\n}\n\nexport interface TerracottaContactDetails {\n  Address: string;\n  Postcode: string;\n  Email: string;\n  Telephone: string;\n  VehicleMakeModel?: string;\n  VehicleLicensePlate?: string;\n  VehicleYearManufacture?: string;\n}\n\nexport interface TerracottaQuoteDetails {\n  ResidenceID: string;\n  TypePolicyID: string; // Comma-separated list of policy type IDs\n  TypePackageID: string;\n  Destination: string;\n  StartDate: string; // Format: YYYY/MM/DD\n  EndDate: string; // Format: YYYY/MM/DD\n  Travellers: TerracottaTraveler[];\n  ContactDetails: TerracottaContactDetails;\n  includeAnnualQuotes?: number;\n  includeUpsell?: number;\n  alterionGenericID?: string;\n  voucherCode?: string;\n  isCYTI?: boolean;\n  currencyID?: number;\n  groupPerProduct?: boolean;\n  priceOrder?: number;\n  schemaIDFilter?: string;\n  useCoverLevelUpsell?: boolean;\n  sellOnBehalfOf?: number;\n  customerUniqueID?: number;\n  quoteVisitAuditID?: number;\n}\n\nexport interface TerracottaQuoteRequest {\n  userID: string;\n  userCode: string;\n  quoteDetails: TerracottaQuoteDetails;\n}\n\nexport interface TerracottaDynamicDetail {\n  Position: number;\n  FieldName: string;\n  FieldValue: string;\n  FieldSize: number;\n}\n\nexport interface TerracottaEligibilityQuestionAnswer {\n  questionNumber: number;\n  answer: 'yes' | 'no';\n}\n\nexport interface TerracottaQuoteWithAlterationsRequest {\n  userID: string;\n  userCode: string;\n  quoteID: string; // Note: lowercase 'q' as per documentation\n  specificQuoteDetails: {\n    AlterationID: string; // Comma-separated list of alteration IDs\n    Travellers: TerracottaTraveler[];\n    ContactDetails: TerracottaContactDetails;\n    DynamicDetails?: TerracottaDynamicDetail[];\n    screeningQuestionAnswers?: TerracottaScreeningQuestionAnswer[];\n    EligibilityQuestionAnswers?: TerracottaEligibilityQuestionAnswer[];\n  };\n}\n\nexport interface SummaryCover {\n  name: string;\n  Limit: string;\n  Excess: string;\n  position?: number;\n}\n\nexport interface TerracottaQuoteResult {\n  QuoteID: string;\n  schemaName: string;\n  policytypeName: string;\n  residenceName: string;\n  destinationName: string;\n  startDate: string;\n  endDate: string;\n  SI: string; // Summary of cover PDF URL\n  PW: string; // Policy wording PDF URL\n  KF: string;\n  HelpFile: string;\n  currency: string;\n  IPT: number; // IPT amount\n  IPTRate: number;\n  GrossPrice: number; // Quote price\n  screeningPremium: number;\n  IconURL: string;\n  SchemaID: number;\n  PolicyTypeID: number;\n  DestinationID: number;\n  PackageID: number;\n  MaxAgeAgebandID: number;\n  ScreeningID: number;\n  groupPerProduct: boolean;\n  priceOrder: number;\n  IPID: string;\n  typePolicyName: string;\n  typePackageName: string;\n  currencyHTMLEncoded: string;\n  AlterationID: string;\n  packageName: string;\n  isAnnual: number;\n  isBestBuy: number;\n  maxDaysPerTrip: number;\n  isBestBuyText: string;\n  isBestBuyLocation: number;\n  numberToSort: number;\n  coverLevel: number;\n  Discount: number;\n  netUW: number;\n  wbComm: number;\n  agentComm: number;\n  screeningPremiumPerPersonCSV: string;\n  screeningPremiumExcIPTPerPersonCSV: string;\n  isNotCoveredPerPersonCSV: string;\n  policytypeShortName: string;\n  SummaryCovers?: SummaryCover[];\n}\n\nexport interface TerracottaQuoteResponse {\n  Message: string;\n  quoteResults: TerracottaQuoteResult[];\n}\n\nexport interface TerracottaScreeningQuestionAnswer {\n  questionNumber: number;\n  answer: 'yes' | 'no';\n}\n\nexport interface TerracottaSavePolicyRequest {\n  userID: string;\n  userCode: string;\n  quoteID: string;\n  screeningQuestionAnswers: TerracottaScreeningQuestionAnswer[];\n  medicalScreeningReference?: string;\n}\n\nexport interface TerracottaSavePolicyResponse {\n  Message: string;\n  policySaved: 'Yes' | 'No';\n  policyID: string;\n  certificate: string; // URL for policy certificate\n  PW: string; // Policy wording PDF URL\n  SI: string; // Summary of cover PDF URL\n}\n\nexport interface TerracottaScreeningQuestion {\n  questionNumber: number;\n  question: string;\n  yesMessage: string;\n  noMessage: string;\n  yesAction: string;\n  noAction: string;\n  yesActionText: string;\n  noActionText: string;\n}\n\nexport interface TerracottaScreeningQuestionsResponse {\n  Message: string;\n  screeningQuestions: TerracottaScreeningQuestion[];\n}\n\nexport interface TerracottaProduct {\n  SchemaID: number;\n  SchemaName: string;\n}\n\nexport interface TerracottaProductListResponse {\n  Message: string;\n  ResultID: number;\n  Schemas: TerracottaProduct[];\n}\n\n/**\n * Helper function to decode HTML entities and format currency\n */\nfunction formatCurrencyLimit(htmlString: string): string {\n  if (!htmlString) return '';\n  \n  // Decode HTML entities\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = htmlString;\n  let decoded = textarea.value;\n  \n  // Additional manual replacements for common entities\n  decoded = decoded\n    .replace(/&euro;/gi, '€')\n    .replace(/&pound;/gi, '£')\n    .replace(/&dollar;/gi, '$')\n    .replace(/&amp;/gi, '&')\n    .replace(/&lt;/gi, '<')\n    .replace(/&gt;/gi, '>')\n    .replace(/&quot;/gi, '\"')\n    .replace(/&#39;/gi, \"'\");\n  \n  // Format numbers with thousand separators\n  // Match patterns like €32000 or euro32000 and add commas\n  decoded = decoded.replace(/([€£$]|euro|pound|dollar)?\\s*(\\d{4,})/gi, (match, currency, number) => {\n    const formattedNumber = parseInt(number).toLocaleString('en-US');\n    return currency ? `${currency}${formattedNumber}` : formattedNumber;\n  });\n  \n  // Fix spacing: \"Up to€32,000\" -> \"Up to €32,000\"\n  decoded = decoded.replace(/(\\w)([€£$])/g, '$1 $2');\n  \n  return decoded;\n}\n\n/**\n * SOAP XML Builder utility functions\n */\nclass SOAPBuilder {\n  static createEnvelope(body: string): string {\n    return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    ${body}\n  </soap:Body>\n</soap:Envelope>`;\n  }\n\n  static buildTravelerXML(traveler: TerracottaTraveler): string {\n    return `\n      <Traveller>\n        <TravellerNumber>${traveler.TravellerNumber}</TravellerNumber>\n        <Title>${traveler.Title}</Title>\n        <FirstName>${traveler.FirstName}</FirstName>\n        <LastName>${traveler.LastName}</LastName>\n        <DateOfBirth>${traveler.DateOfBirth}</DateOfBirth>\n        <Age>${traveler.Age}</Age>\n        <AgebandID>${traveler.AgebandID || 0}</AgebandID>\n        <TitleID>${traveler.TitleID || 0}</TitleID>\n        <minAge>${traveler.minAge || traveler.Age}</minAge>\n        <maxAge>${traveler.maxAge || traveler.Age}</maxAge>\n        <AlterationID>${traveler.AlterationID || ''}</AlterationID>\n        <msPrice>${traveler.msPrice || 0}</msPrice>\n        <msPriceExcIPT>${traveler.msPriceExcIPT || 0}</msPriceExcIPT>\n        <msConditions>${traveler.msConditions || ''}</msConditions>\n        <ScreeningInformation xsi:nil=\"true\" />\n      </Traveller>`;\n  }\n\n  static buildContactDetailsXML(contact: TerracottaContactDetails): string {\n    return `\n      <ContactDetails>\n        <Address>${contact.Address}</Address>\n        <Postcode>${contact.Postcode}</Postcode>\n        <Email>${contact.Email}</Email>\n        <Telephone>${contact.Telephone}</Telephone>\n        ${contact.VehicleMakeModel ? `<VehicleMakeModel>${contact.VehicleMakeModel}</VehicleMakeModel>` : ''}\n        ${contact.VehicleLicensePlate ? `<VehicleLicensePlate>${contact.VehicleLicensePlate}</VehicleLicensePlate>` : ''}\n        ${contact.VehicleYearManufacture ? `<VehicleYearManufacture>${contact.VehicleYearManufacture}</VehicleYearManufacture>` : ''}\n      </ContactDetails>`;\n  }\n\n  static buildQuoteDetailsXML(details: TerracottaQuoteDetails): string {\n    const travelersXML = details.Travellers.map(traveler => \n      this.buildTravelerXML(traveler)\n    ).join('');\n\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n\n    return `\n      <quoteDetails>\n        <ResidenceID>${parseInt(details.ResidenceID) || 1}</ResidenceID>\n        <TypePolicyID>${details.TypePolicyID}</TypePolicyID>\n        <TypePackageID>${parseInt(details.TypePackageID) || 1}</TypePackageID>\n        <Destination>${details.Destination}</Destination>\n        <StartDate>${details.StartDate}</StartDate>\n        <EndDate>${details.EndDate}</EndDate>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${details.includeAnnualQuotes !== undefined ? `<includeAnnualQuotes>${details.includeAnnualQuotes}</includeAnnualQuotes>` : ''}\n        ${details.includeUpsell !== undefined ? `<includeUpsell>${details.includeUpsell}</includeUpsell>` : ''}\n        ${details.currencyID ? `<currencyID>${details.currencyID}</currencyID>` : ''}\n        ${details.schemaIDFilter ? `<schemaIDFilter>${details.schemaIDFilter}</schemaIDFilter>` : ''}\n      </quoteDetails>`;\n  }\n\n  static buildScreeningAnswersXML(answers: TerracottaScreeningQuestionAnswer[]): string {\n    return '<screeningQuestionAnswers>' + \n      answers.map(answer => `\n        <screeningQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </screeningQuestionAnswer>`\n      ).join('') + '</screeningQuestionAnswers>';\n  }\n\n  static buildEligibilityAnswersXML(answers: TerracottaEligibilityQuestionAnswer[]): string {\n    return '<EligibilityQuestionAnswers>' + \n      answers.map(answer => `\n        <eligibilityQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </eligibilityQuestionAnswer>`\n      ).join('') + '</EligibilityQuestionAnswers>';\n  }\n\n  static buildDynamicDetailsXML(details: TerracottaDynamicDetail[]): string {\n    return '<DynamicDetails>' + \n      details.map(detail => `\n        <DynamicDetail_SavedValue>\n          <Position>${detail.Position}</Position>\n          <FieldName>${detail.FieldName}</FieldName>\n          <FieldValue>${detail.FieldValue}</FieldValue>\n          <FieldSize>${detail.FieldSize}</FieldSize>\n        </DynamicDetail_SavedValue>`\n      ).join('') + '</DynamicDetails>';\n  }\n\n  static buildSpecificQuoteDetailsXML(details: any): string {\n    const travelersXML = details.Travellers.map((traveler: TerracottaTraveler) => \n      this.buildTravelerXML(traveler)\n    ).join('');\n\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    \n    const dynamicDetailsXML = details.DynamicDetails ? \n      this.buildDynamicDetailsXML(details.DynamicDetails) : '';\n    \n    const screeningAnswersXML = details.screeningQuestionAnswers ? \n      this.buildScreeningAnswersXML(details.screeningQuestionAnswers) : '';\n    \n    const eligibilityAnswersXML = details.EligibilityQuestionAnswers ? \n      this.buildEligibilityAnswersXML(details.EligibilityQuestionAnswers) : '';\n\n    return `\n      <specificQuoteDetails>\n        <AlterationID>${details.AlterationID}</AlterationID>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${dynamicDetailsXML}\n        ${screeningAnswersXML}\n        ${eligibilityAnswersXML}\n      </specificQuoteDetails>`;\n  }\n}\n\n/**\n * XML Parser utility functions\n */\nclass XMLParser {\n  static getXMLParser(): any {\n    return new DOMParser();\n  }\n\n\n  static parseQuoteResponse(xmlText: string): TerracottaQuoteResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      // Check for parsing errors\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const quoteResults: TerracottaQuoteResult[] = [];\n\n      // Select only child quoteResults, not the parent container\n      const quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationResult > quoteResults > quoteResults');\n      quoteResultNodes.forEach((node: any) => {\n        // Only process nodes that have QuoteID (skip empty parent nodes)\n        const quoteID = node.querySelector('QuoteID')?.textContent || '';\n        if (!quoteID) return; // Skip empty nodes\n        \n        const result: TerracottaQuoteResult = {\n          QuoteID: quoteID,\n          schemaName: node.querySelector('schemaName')?.textContent || '',\n          policytypeName: node.querySelector('policytypeName')?.textContent || '',\n          residenceName: node.querySelector('residenceName')?.textContent || '',\n          destinationName: node.querySelector('destinationName')?.textContent || '',\n          startDate: node.querySelector('startDate')?.textContent || '',\n          endDate: node.querySelector('endDate')?.textContent || '',\n          SI: node.querySelector('SI')?.textContent || '',\n          PW: node.querySelector('PW')?.textContent || '',\n          KF: node.querySelector('KF')?.textContent || '',\n          HelpFile: node.querySelector('HelpFile')?.textContent || '',\n          currency: node.querySelector('currency')?.textContent || '',\n          IPT: parseFloat(node.querySelector('IPT')?.textContent || '0'),\n          IPTRate: parseFloat(node.querySelector('IPTRate')?.textContent || '0'),\n          GrossPrice: parseFloat(node.querySelector('GrossPrice')?.textContent || '0'),\n          screeningPremium: parseFloat(node.querySelector('screeningPremium')?.textContent || '0'),\n          IconURL: node.querySelector('IconURL')?.textContent || '',\n          SchemaID: parseInt(node.querySelector('SchemaID')?.textContent || '0'),\n          PolicyTypeID: parseInt(node.querySelector('PolicyTypeID')?.textContent || '0'),\n          DestinationID: parseInt(node.querySelector('DestinationID')?.textContent || '0'),\n          PackageID: parseInt(node.querySelector('PackageID')?.textContent || '0'),\n          MaxAgeAgebandID: parseInt(node.querySelector('MaxAgeAgebandID')?.textContent || '0'),\n          ScreeningID: parseInt(node.querySelector('ScreeningID')?.textContent || '0'),\n          groupPerProduct: node.querySelector('groupPerProduct')?.textContent === 'true',\n          priceOrder: parseInt(node.querySelector('priceOrder')?.textContent || '0'),\n          IPID: node.querySelector('IPID')?.textContent || '',\n          typePolicyName: node.querySelector('typePolicyName')?.textContent || '',\n          typePackageName: node.querySelector('typePackageName')?.textContent || '',\n          currencyHTMLEncoded: node.querySelector('currencyHTMLEncoded')?.textContent || '',\n          AlterationID: node.querySelector('AlterationID')?.textContent || '',\n          packageName: node.querySelector('packageName')?.textContent || '',\n          isAnnual: parseInt(node.querySelector('isAnnual')?.textContent || '0'),\n          isBestBuy: parseInt(node.querySelector('isBestBuy')?.textContent || '0'),\n          maxDaysPerTrip: parseInt(node.querySelector('maxDaysPerTrip')?.textContent || '0'),\n          isBestBuyText: node.querySelector('isBestBuyText')?.textContent || '',\n          isBestBuyLocation: parseInt(node.querySelector('isBestBuyLocation')?.textContent || '0'),\n          numberToSort: parseFloat(node.querySelector('numberToSort')?.textContent || '0'),\n          coverLevel: parseInt(node.querySelector('coverLevel')?.textContent || '0'),\n          Discount: parseFloat(node.querySelector('Discount')?.textContent || '0'),\n          netUW: parseFloat(node.querySelector('netUW')?.textContent || '0'),\n          wbComm: parseFloat(node.querySelector('wbComm')?.textContent || '0'),\n          agentComm: parseFloat(node.querySelector('agentComm')?.textContent || '0'),\n          screeningPremiumPerPersonCSV: node.querySelector('screeningPremiumPerPersonCSV')?.textContent || '',\n          screeningPremiumExcIPTPerPersonCSV: node.querySelector('screeningPremiumExcIPTPerPersonCSV')?.textContent || '',\n          isNotCoveredPerPersonCSV: node.querySelector('isNotCoveredPerPersonCSV')?.textContent || '',\n          policytypeShortName: node.querySelector('policytypeShortName')?.textContent || '',\n          SummaryCovers: []\n        };\n        \n        // Parse SummaryCovers\n        const summaryCoversNode = node.querySelector('SummaryCovers');\n        if (summaryCoversNode) {\n          const summaryCoverNodes = summaryCoversNode.querySelectorAll('summaryCover');\n          const summaryCovers: SummaryCover[] = [];\n          summaryCoverNodes.forEach((coverNode: any) => {\n            const rawLimit = coverNode.querySelector('Limit')?.textContent || '';\n            const rawExcess = coverNode.querySelector('Excess')?.textContent || '';\n            \n            summaryCovers.push({\n              name: coverNode.querySelector('name')?.textContent || '',\n              Limit: formatCurrencyLimit(rawLimit),\n              Excess: formatCurrencyLimit(rawExcess),\n              position: parseInt(coverNode.querySelector('position')?.textContent || '0')\n            });\n          });\n          result.SummaryCovers = summaryCovers;\n        }\n        \n        quoteResults.push(result);\n      });\n\n      return { Message: message, quoteResults };\n    } catch (error) {\n      console.error('Error parsing quote response:', error);\n      throw new Error(`Failed to parse quote response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseScreeningQuestionsResponse(xmlText: string): TerracottaScreeningQuestionsResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('Message')?.textContent || '';\n      const screeningQuestions: TerracottaScreeningQuestion[] = [];\n\n      const questionNodes = xmlDoc.querySelectorAll('screeningQuestion');\n      questionNodes.forEach((node: any) => {\n        const question: TerracottaScreeningQuestion = {\n          questionNumber: parseInt(node.querySelector('questionNumber')?.textContent || '0'),\n          question: node.querySelector('question')?.textContent || '',\n          yesMessage: node.querySelector('yesMessage')?.textContent || '',\n          noMessage: node.querySelector('noMessage')?.textContent || '',\n          yesAction: node.querySelector('yesAction')?.textContent || '',\n          noAction: node.querySelector('noAction')?.textContent || '',\n          yesActionText: node.querySelector('yesActionText')?.textContent || '',\n          noActionText: node.querySelector('noActionText')?.textContent || ''\n        };\n        screeningQuestions.push(question);\n      });\n\n      return { Message: message, screeningQuestions };\n    } catch (error) {\n      console.error('Error parsing screening questions response:', error);\n      throw new Error(`Failed to parse screening questions response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseSavePolicyResponse(xmlText: string): TerracottaSavePolicyResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      return {\n        Message: xmlDoc.querySelector('Message')?.textContent || '',\n        policySaved: xmlDoc.querySelector('policySaved')?.textContent as 'Yes' | 'No' || 'No',\n        policyID: xmlDoc.querySelector('policyID')?.textContent || '',\n        certificate: xmlDoc.querySelector('certificate')?.textContent || '',\n        PW: xmlDoc.querySelector('PW')?.textContent || '',\n        SI: xmlDoc.querySelector('SI')?.textContent || ''\n      };\n    } catch (error) {\n      console.error('Error parsing save policy response:', error);\n      throw new Error(`Failed to parse save policy response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseProductListResponse(xmlText: string): TerracottaProductListResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const schemas: TerracottaProduct[] = [];\n\n      const schemaNodes = xmlDoc.querySelectorAll('Schema');\n      schemaNodes.forEach((node: any) => {\n        const schema: TerracottaProduct = {\n          SchemaID: parseInt(node.querySelector('SchemaID')?.textContent || '0'),\n          SchemaName: node.querySelector('SchemaName')?.textContent || ''\n        };\n        schemas.push(schema);\n      });\n\n      return { Message: message, ResultID: resultID, Schemas: schemas };\n    } catch (error) {\n      console.error('Error parsing product list response:', error);\n      throw new Error(`Failed to parse product list response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parsePolicyTypeResponse(xmlText: string): TerracottaPolicyTypeResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const policyTypes: TerracottaPolicyType[] = [];\n\n      const policyTypeNodes = xmlDoc.querySelectorAll('TypePolicy');\n      policyTypeNodes.forEach((node: any) => {\n        const policyType: TerracottaPolicyType = {\n          TypePolicyID: node.querySelector('TypePolicyID')?.textContent || '',\n          TypePolicyName: node.querySelector('Name')?.textContent || '', // Changed from TypePolicyName to Name\n          Description: node.querySelector('IsAnnual')?.textContent === '1' ? 'Annual Policy' : 'Single Trip Policy'\n        };\n        policyTypes.push(policyType);\n      });\n\n      return { Message: message, ResultID: resultID, PolicyTypes: policyTypes };\n    } catch (error) {\n      console.error('Error parsing policy type response:', error);\n      throw new Error(`Failed to parse policy type response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parsePolicyTypeDestinationResponse(xmlText: string): TerracottaPolicyTypeDestinationResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const policyTypeDestinations: TerracottaPolicyTypeDestination[] = [];\n\n      const destinationNodes = xmlDoc.querySelectorAll('PolicyTypeDestination');\n      destinationNodes.forEach((node: any) => {\n        const destination: TerracottaPolicyTypeDestination = {\n          TypePolicyDestinationID: node.querySelector('TypePolicyDestinationID')?.textContent || '',\n          Name: node.querySelector('Name')?.textContent || '',\n          PolicyTypeID: node.querySelector('PolicyTypeID')?.textContent || ''\n        };\n        policyTypeDestinations.push(destination);\n      });\n\n      return { Message: message, ResultID: resultID, PolicyTypeDestinations: policyTypeDestinations };\n    } catch (error) {\n      console.error('Error parsing policy type destination response:', error);\n      throw new Error(`Failed to parse policy type destination response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Main Terracotta Service Class\n */\nexport class TerracottaService {\n  private static instance: TerracottaService;\n  private userID: string;\n  private userCode: string;\n\n  constructor(userID: string = TERRACOTTA_USER_ID, userCode: string = TERRACOTTA_USER_CODE) {\n    this.userID = userID;\n    this.userCode = userCode;\n  }\n\n  static getInstance(userID?: string, userCode?: string): TerracottaService {\n    if (!TerracottaService.instance) {\n      TerracottaService.instance = new TerracottaService(\n        userID || TERRACOTTA_USER_ID, \n        userCode || TERRACOTTA_USER_CODE\n      );\n    }\n    return TerracottaService.instance;\n  }\n\n  /**\n   * Generic SOAP request method\n   */\n  private async makeSOAPRequest(method: string, requestBody: string): Promise<string> {\n    const soapEnvelope = SOAPBuilder.createEnvelope(requestBody);\n    \n    console.log('Making SOAP request via proxy to:', `${PROXY_BASE_URL}/${method}`);\n    console.log('SOAP Envelope:', soapEnvelope);\n    \n    try {\n      const response = await fetch(`${PROXY_BASE_URL}/${method}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/xml; charset=utf-8'\n        },\n        body: soapEnvelope\n      });\n\n      console.log('SOAP Response Status:', response.status, response.statusText);\n      const responseText = await response.text();\n      console.log('SOAP Response Body:', responseText);\n\n      if (!response.ok) {\n        throw new Error(`SOAP request failed: ${response.status} ${response.statusText}`);\n      }\n\n      return responseText;\n    } catch (error) {\n      console.error('Proxy request failed:', error);\n      throw new Error(`Failed to connect to Terracotta API via proxy: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Test connection with HelloWorld method\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const soapBody = `\n        <HelloWorld xmlns=\"WS-IntegratedQuote\">\n        </HelloWorld>`;\n\n      const responseText = await this.makeSOAPRequest('HelloWorld', soapBody);\n      console.log('Connection test successful:', responseText);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get available policy types for a specific schema\n   */\n  async getUserProductTypePolicy(schemaId: string): Promise<TerracottaPolicyTypeResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductTypePolicy - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      \n      const soapBody = `\n        <GetUserProductTypePolicy xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductTypePolicy>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductTypePolicy', soapBody);\n      return XMLParser.parsePolicyTypeResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductTypePolicy:', error);\n      throw new Error(`Failed to get policy types: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available destinations for a specific schema\n   */\n  async getUserProductDestination(schemaId: string): Promise<TerracottaPolicyTypeDestinationResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductDestination - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      \n      const soapBody = `\n        <GetUserProductDestination xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductDestination>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductDestination', soapBody);\n      return XMLParser.parsePolicyTypeDestinationResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductDestination:', error);\n      throw new Error(`Failed to get policy type destinations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available products for the user\n   */\n  async getUserProductList(): Promise<TerracottaProductListResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductList - userID:', userID, 'userCode:', userCode);\n      console.log('getUserProductList - this.userID:', this.userID, 'this.userCode:', this.userCode);\n      \n      const soapBody = `\n        <GetUserProductList xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n        </GetUserProductList>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductList', soapBody);\n      return XMLParser.parseProductListResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductList:', error);\n      throw new Error(`Failed to get user product list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 1. Request for quotations\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\n   */\n  async provideQuotation(request: TerracottaQuoteRequest): Promise<TerracottaQuoteResponse> {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotation...');\n      console.log('📦 Request object:', request);\n      \n      const quoteDetailsXML = SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);\n      console.log('📄 Quote Details XML:', quoteDetailsXML);\n      \n      const soapBody = `\n        <ProvideQuotation xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          ${quoteDetailsXML}\n        </ProvideQuotation>`;\n\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotation`);\n      \n      const responseText = await this.makeSOAPRequest('ProvideQuotation', soapBody);\n      \n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      \n      const parsedResponse = XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotation:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Obtain Screening Questions\n   * Calls ScreeningQuestions to get screening questions for the selected quote\n   */\n  async getScreeningQuestions(quoteID: string): Promise<TerracottaScreeningQuestionsResponse> {\n    try {\n      const soapBody = `\n        <ScreeningQuestions xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID)}</userID>\n          <userCode>${parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE)}</userCode>\n          <quoteID>${quoteID}</quoteID>\n        </ScreeningQuestions>`;\n\n      const responseText = await this.makeSOAPRequest('ScreeningQuestions', soapBody);\n      return XMLParser.parseScreeningQuestionsResponse(responseText);\n    } catch (error) {\n      console.error('Error in getScreeningQuestions:', error);\n      throw new Error(`Failed to get screening questions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 2. Update quotes with additional covers\n   * Calls ProvideQuotationWithAlterations to get quotes with specific alterations/add-ons\n   * This method can only be called AFTER obtaining a quote reference from ProvideQuotation\n   */\n  async provideQuotationWithAlterations(request: TerracottaQuoteWithAlterationsRequest): Promise<TerracottaQuoteResponse> {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotationWithAlterations...');\n      console.log('📦 Request object:', request);\n      \n      const specificQuoteDetailsXML = SOAPBuilder.buildSpecificQuoteDetailsXML(request.specificQuoteDetails);\n      console.log('📄 Specific Quote Details XML:', specificQuoteDetailsXML);\n      \n      const soapBody = `\n        <ProvideQuotationWithAlterations xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${specificQuoteDetailsXML}\n        </ProvideQuotationWithAlterations>`;\n\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotationWithAlterations`);\n      \n      const responseText = await this.makeSOAPRequest('ProvideQuotationWithAlterations', soapBody);\n      \n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      \n      const parsedResponse = XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotationWithAlterations:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes with alterations from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Save a quote as a Live policy\n   * Calls SavePolicyDetails to convert the quote into a live policy\n   */\n  async savePolicyDetails(request: TerracottaSavePolicyRequest): Promise<TerracottaSavePolicyResponse> {\n    try {\n      const screeningAnswersXML = SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);\n      \n      const soapBody = `\n        <SavePolicyDetails xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${screeningAnswersXML}\n          ${request.medicalScreeningReference ? `<medicalScreeningReference>${request.medicalScreeningReference}</medicalScreeningReference>` : ''}\n        </SavePolicyDetails>`;\n\n      const responseText = await this.makeSOAPRequest('SavePolicyDetails', soapBody);\n      return XMLParser.parseSavePolicyResponse(responseText);\n    } catch (error) {\n      console.error('Error in savePolicyDetails:', error);\n      throw new Error(`Failed to save policy details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Utility method to convert frontend data to Terracotta format\n   */\n  static convertToTerracottaFormat(formData: any, availablePolicyTypes?: TerracottaPolicyType[]): TerracottaQuoteRequest {\n    console.log('Converting form data to Terracotta format:', formData);\n    \n    // Convert travelers to Terracotta format using actual user data\n    const travelers: TerracottaTraveler[] = formData.travelers.map((traveler: any, index: number) => {\n      // Prioritize date of birth over age for accuracy\n      const dateOfBirth = traveler.dateOfBirth || calculateDateOfBirth(parseInt(traveler.age));\n      const calculatedAge = traveler.dateOfBirth ? \n        calculateAgeFromDateOfBirth(traveler.dateOfBirth) : \n        parseInt(traveler.age);\n      \n      console.log(`Traveler ${index + 1}: DOB=${dateOfBirth}, Age=${calculatedAge}`);\n      \n      return {\n        TravellerNumber: index + 1,\n        Title: traveler.title || 'Mr', // Use actual title from form\n        FirstName: traveler.firstName,\n        LastName: traveler.lastName,\n        DateOfBirth: formatDateForTerracotta(dateOfBirth),\n        Age: calculatedAge,\n        AgebandID: getAgebandID(calculatedAge),\n        TitleID: getTitleID(traveler.title || 'Mr'),\n        minAge: calculatedAge,\n        maxAge: calculatedAge,\n        ScreeningInformation: null\n      };\n    });\n\n    // Convert contact details using actual user data\n    const contactDetails: TerracottaContactDetails = {\n      Address: formData.billingAddress?.street || formData.contactAddress?.street || '123 Main Street',\n      Postcode: formData.billingAddress?.postalCode || formData.contactAddress?.postalCode || '12345',\n      Email: formData.travelers[0]?.email || formData.contactEmail || 'test@example.com',\n      Telephone: formData.travelers[0]?.phone || formData.contactPhone || '+30123456789',\n      VehicleMakeModel: formData.vehicleMakeModel,\n      VehicleLicensePlate: formData.vehicleLicensePlate,\n      VehicleYearManufacture: formData.vehicleYearManufacture\n    };\n\n           // Convert trip details using actual user data\n           const quoteDetails: TerracottaQuoteDetails = {\n             ResidenceID: getResidenceID(formData.countryOfResidence),\n             TypePolicyID: getTypePolicyID(formData.tripType, availablePolicyTypes),\n             TypePackageID: '1', // Fixed value as requested (string)\n             Destination: formData.destination || 'Europe',\n             StartDate: formatDateForTerracotta(formData.startDate),\n             EndDate: formatDateForTerracotta(formData.endDate),\n             Travellers: travelers,\n             ContactDetails: contactDetails,\n             includeAnnualQuotes: formData.tripType === 'annual' ? 1 : 0,\n             includeUpsell: 0, // Simplified for now\n             currencyID: 1, // EUR\n             schemaIDFilter: '717' // Use schema 717\n           };\n\n    console.log('Converted Terracotta request:', quoteDetails);\n    \n    // Use fixed values as requested\n    return {\n      userID: '4072',\n      userCode: '111427',\n      quoteDetails\n    };\n  }\n}\n\n/**\n * Utility functions for data conversion\n */\n\nfunction formatDateForTerracotta(dateString: string): string {\n  if (!dateString) return '';\n  \n  // Handle different date formats\n  if (dateString.includes('/')) {\n    // Handle DD/MM/YYYY format\n    const parts = dateString.split('/');\n    if (parts.length === 3) {\n      const [day, month, year] = parts;\n      return `${year}/${month}/${day}`;\n    }\n  }\n  \n  // Handle YYYY-MM-DD format\n  if (dateString.includes('-')) {\n    return dateString.replace(/-/g, '/');\n  }\n  \n  return dateString;\n}\n\nfunction calculateDateOfBirth(age: number): string {\n  const currentYear = new Date().getFullYear();\n  const birthYear = currentYear - age;\n  // Use January 1st as default date\n  return `${birthYear}/01/01`;\n}\n\nfunction calculateAgeFromDateOfBirth(dateOfBirth: string): number {\n  const birthDate = new Date(dateOfBirth);\n  const today = new Date();\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  \n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  \n  return Math.max(0, age);\n}\n\nfunction getResidenceID(country: string): string {\n  // Map countries to Terracotta Residence IDs\n  // Based on Terracotta API - Greece is ResidenceID 24\n  const residenceMap: { [key: string]: string } = {\n    'Greece': '24',     // Correct ResidenceID for Greece\n    'Austria': '4',\n    'Belgium': '6',\n    'Bulgaria': '10',\n    'Croatia (Hrvatska)': '14',\n    'Czech Republic': '16',\n    'Denmark': '17',\n    'Estonia': '20',\n    'Finland': '21',\n    'France': '22',\n    'Germany': '23',\n    'Hungary': '27',\n    'Iceland': '28',\n    'Italy': '33',\n    'Latvia': '38',\n    'Liechtenstein': '40',\n    'Lithuania': '41',\n    'Luxembourg': '42',\n    'Malta': '93',\n    'Netherlands': '47',\n    'Norway': '49',\n    'Poland': '53',\n    'Portugal': '54',\n    'Republic of Cyprus': '283',\n    'Republic of Ireland': '19',\n    'Romania': '55',\n    'Slovak Republic': '59',\n    'Slovenia': '60',\n    'Spain': '62',\n    'Sweden': '63'\n  };\n  \n  return residenceMap[country] || '24'; // Default to Greece\n}\n\nfunction getTypePolicyID(tripType: string, availablePolicyTypes?: TerracottaPolicyType[]): string {\n  // If we have SOAP data, use it to find the correct TypePolicyID\n  if (availablePolicyTypes && availablePolicyTypes.length > 0) {\n    const policyType = availablePolicyTypes.find(pt => {\n      const name = pt.TypePolicyName.toLowerCase();\n      switch (tripType) {\n        case 'single':\n          return name.includes('single') && !name.includes('annual');\n        case 'annual':\n          return name.includes('annual') || name.includes('multi-trip');\n        case 'longstay':\n          return name.includes('longstay') || name.includes('long stay');\n        case 'comprehensive':\n          return name.includes('comprehensive');\n        default:\n          return false;\n      }\n    });\n    \n    if (policyType) {\n      console.log(`✅ Found TypePolicyID ${policyType.TypePolicyID} for trip type '${tripType}' (${policyType.TypePolicyName})`);\n      return policyType.TypePolicyID;\n    }\n  }\n  \n  // Fallback to hardcoded mappings if SOAP data not available\n  console.log(`⚠️ Using fallback mapping for trip type '${tripType}'`);\n  const policyMap: { [key: string]: string } = {\n    'single': '2',        // Single Trip TypePolicyID\n    'annual': '23',       // Annual Multi-Trip TypePolicyID\n    'longstay': '3',      // Longstay TypePolicyID\n    'comprehensive': '2'  // Use Single Trip as default\n  };\n  \n  return policyMap[tripType] || '2'; // Default to Single Trip TypePolicyID\n}\n\nfunction getTypePackageID(tripType: string): string {\n  // Use correct Package IDs (not SchemaIDs)\n  // Package IDs are typically 1, 2, 3, etc. for different coverage levels\n  const packageMap: { [key: string]: string } = {\n    'single': '1',        // Basic package for single trip\n    'annual': '1',        // Basic package for annual\n    'comprehensive': '2'  // Higher coverage package\n  };\n  \n  return packageMap[tripType] || '1'; // Default to basic package\n}\n\nfunction getAgebandID(age: number): number {\n  // Map age to Terracotta Ageband ID\n  if (age <= 17) return 1;\n  if (age <= 30) return 2;\n  if (age <= 40) return 3;\n  if (age <= 50) return 4;\n  if (age <= 60) return 5;\n  if (age <= 70) return 6;\n  return 7; // 70+\n}\n\nfunction getTitleID(title: string): number {\n  // Map title to Terracotta Title ID\n  const titleMap: { [key: string]: number } = {\n    'Mr': 1,\n    'Mrs': 2,\n    'Miss': 3,\n    'Ms': 4,\n    'Dr': 5,\n    'Prof': 6\n  };\n  \n  return titleMap[title] || 1; // Default to Mr\n}\n\nfunction getCurrencyID(currency: string): number {\n  // Map currency to Terracotta Currency ID\n  const currencyMap: { [key: string]: number } = {\n    'EUR': 1,\n    'USD': 2,\n    'GBP': 3,\n    'CHF': 4\n  };\n  \n  return currencyMap[currency] || 1; // Default to EUR\n}\n\nexport default TerracottaService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}