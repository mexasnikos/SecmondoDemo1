{"ast":null,"code":"var _TerracottaService;\n/**\n * Terracotta Insurance Quote Integration Service\n * \n * This service handles all communication with the Terracotta Integrated Quote web service\n * using SOAP protocol. It provides methods for:\n * - Requesting quotes (ProvideQuotation)\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\n * - Getting screening questions (ScreeningQuestions)\n * - Saving policy details (SavePolicyDetails)\n */\n\n// Import xmldom for Node.js XML parsing\nlet DOMParser;\nif (typeof window === 'undefined') {\n  // Node.js environment\n  const {\n    DOMParser: XMDOMParser\n  } = require('xmldom');\n  DOMParser = XMDOMParser;\n} else {\n  // Browser environment\n  DOMParser = window.DOMParser;\n}\n\n// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL = 'https://www.asuaonline.com/ws/integratedquote.asmx';\nconst PROXY_BASE_URL = 'http://localhost:3001/api/terracotta';\nconst TERRACOTTA_USER_ID = '4072';\nconst TERRACOTTA_USER_CODE = '111427';\n\n// TypeScript interfaces for Terracotta API data structures\n\n/**\n * Helper function to decode HTML entities and format currency\n */\nfunction formatCurrencyLimit(htmlString) {\n  if (!htmlString) return '';\n\n  // Decode HTML entities\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = htmlString;\n  let decoded = textarea.value;\n\n  // Additional manual replacements for common entities\n  decoded = decoded.replace(/&euro;/gi, '€').replace(/&pound;/gi, '£').replace(/&dollar;/gi, '$').replace(/&amp;/gi, '&').replace(/&lt;/gi, '<').replace(/&gt;/gi, '>').replace(/&quot;/gi, '\"').replace(/&#39;/gi, \"'\");\n\n  // Format numbers with thousand separators\n  // Match patterns like €32000 or euro32000 and add commas\n  decoded = decoded.replace(/([€£$]|euro|pound|dollar)?\\s*(\\d{4,})/gi, (match, currency, number) => {\n    const formattedNumber = parseInt(number).toLocaleString('en-US');\n    return currency ? `${currency}${formattedNumber}` : formattedNumber;\n  });\n\n  // Fix spacing: \"Up to€32,000\" -> \"Up to €32,000\"\n  decoded = decoded.replace(/(\\w)([€£$])/g, '$1 $2');\n  return decoded;\n}\n\n/**\n * SOAP XML Builder utility functions\n */\nclass SOAPBuilder {\n  static createEnvelope(body) {\n    return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    ${body}\n  </soap:Body>\n</soap:Envelope>`;\n  }\n  static buildTravelerXML(traveler) {\n    return `\n      <Traveller>\n        <TravellerNumber>${traveler.TravellerNumber}</TravellerNumber>\n        <Title>${traveler.Title}</Title>\n        <FirstName>${traveler.FirstName}</FirstName>\n        <LastName>${traveler.LastName}</LastName>\n        <DateOfBirth>${traveler.DateOfBirth}</DateOfBirth>\n        <Age>${traveler.Age}</Age>\n        <AgebandID>${traveler.AgebandID || 0}</AgebandID>\n        <TitleID>${traveler.TitleID || 0}</TitleID>\n        <minAge>${traveler.minAge || traveler.Age}</minAge>\n        <maxAge>${traveler.maxAge || traveler.Age}</maxAge>\n        <AlterationID>${traveler.AlterationID || ''}</AlterationID>\n        <msPrice>${traveler.msPrice || 0}</msPrice>\n        <msPriceExcIPT>${traveler.msPriceExcIPT || 0}</msPriceExcIPT>\n        <msConditions>${traveler.msConditions || ''}</msConditions>\n        <ScreeningInformation xsi:nil=\"true\" />\n      </Traveller>`;\n  }\n  static buildContactDetailsXML(contact) {\n    return `\n      <ContactDetails>\n        <Address>${contact.Address}</Address>\n        <Postcode>${contact.Postcode}</Postcode>\n        <Email>${contact.Email}</Email>\n        <Telephone>${contact.Telephone}</Telephone>\n        ${contact.VehicleMakeModel ? `<VehicleMakeModel>${contact.VehicleMakeModel}</VehicleMakeModel>` : ''}\n        ${contact.VehicleLicensePlate ? `<VehicleLicensePlate>${contact.VehicleLicensePlate}</VehicleLicensePlate>` : ''}\n        ${contact.VehicleYearManufacture ? `<VehicleYearManufacture>${contact.VehicleYearManufacture}</VehicleYearManufacture>` : ''}\n      </ContactDetails>`;\n  }\n  static buildQuoteDetailsXML(details) {\n    const travelersXML = details.Travellers.map(traveler => this.buildTravelerXML(traveler)).join('');\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    return `\n      <quoteDetails>\n        <ResidenceID>${parseInt(details.ResidenceID) || 1}</ResidenceID>\n        <TypePolicyID>${details.TypePolicyID}</TypePolicyID>\n        <TypePackageID>${parseInt(details.TypePackageID) || 1}</TypePackageID>\n        <Destination>${details.Destination}</Destination>\n        <StartDate>${details.StartDate}</StartDate>\n        <EndDate>${details.EndDate}</EndDate>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${details.includeAnnualQuotes !== undefined ? `<includeAnnualQuotes>${details.includeAnnualQuotes}</includeAnnualQuotes>` : ''}\n        ${details.includeUpsell !== undefined ? `<includeUpsell>${details.includeUpsell}</includeUpsell>` : ''}\n        ${details.currencyID ? `<currencyID>${details.currencyID}</currencyID>` : ''}\n        ${details.schemaIDFilter ? `<schemaIDFilter>${details.schemaIDFilter}</schemaIDFilter>` : ''}\n      </quoteDetails>`;\n  }\n  static buildScreeningAnswersXML(answers) {\n    return '<screeningQuestionAnswers>' + answers.map(answer => `\n        <screeningQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </screeningQuestionAnswer>`).join('') + '</screeningQuestionAnswers>';\n  }\n  static buildEligibilityAnswersXML(answers) {\n    return '<EligibilityQuestionAnswers>' + answers.map(answer => `\n        <eligibilityQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </eligibilityQuestionAnswer>`).join('') + '</EligibilityQuestionAnswers>';\n  }\n  static buildDynamicDetailsXML(details) {\n    return '<DynamicDetails>' + details.map(detail => `\n        <DynamicDetail_SavedValue>\n          <Position>${detail.Position}</Position>\n          <FieldName>${detail.FieldName}</FieldName>\n          <FieldValue>${detail.FieldValue}</FieldValue>\n          <FieldSize>${detail.FieldSize}</FieldSize>\n        </DynamicDetail_SavedValue>`).join('') + '</DynamicDetails>';\n  }\n  static buildSpecificQuoteDetailsXML(details) {\n    const travelersXML = details.Travellers.map(traveler => this.buildTravelerXML(traveler)).join('');\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    const dynamicDetailsXML = details.DynamicDetails ? this.buildDynamicDetailsXML(details.DynamicDetails) : '';\n    const screeningAnswersXML = details.screeningQuestionAnswers ? this.buildScreeningAnswersXML(details.screeningQuestionAnswers) : '';\n    const eligibilityAnswersXML = details.EligibilityQuestionAnswers ? this.buildEligibilityAnswersXML(details.EligibilityQuestionAnswers) : '';\n    return `\n      <specificQuoteDetails>\n        <AlterationID>${details.AlterationID}</AlterationID>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${dynamicDetailsXML}\n        ${screeningAnswersXML}\n        ${eligibilityAnswersXML}\n      </specificQuoteDetails>`;\n  }\n}\n\n/**\n * XML Parser utility functions\n */\nclass XMLParser {\n  static getXMLParser() {\n    return new DOMParser();\n  }\n  static parseQuoteResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n\n      // Check for parsing errors\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector === void 0 ? void 0 : _xmlDoc$querySelector.textContent) || '';\n      const quoteResults = [];\n\n      // Select only child quoteResults, not the parent container\n      // Handle both ProvideQuotation and ProvideQuotationWithAlterations responses\n      let quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationResult > quoteResults > quoteResults');\n\n      // If not found, try ProvideQuotationWithAlterationsResult\n      if (quoteResultNodes.length === 0) {\n        quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationWithAlterationsResult > quoteResults > quoteResults');\n      }\n\n      // If still not found, try without the parent Result element\n      if (quoteResultNodes.length === 0) {\n        quoteResultNodes = xmlDoc.querySelectorAll('quoteResults > quoteResults');\n      }\n      console.log(`📊 Found ${quoteResultNodes.length} quote result nodes in XML`);\n      quoteResultNodes.forEach(node => {\n        var _node$querySelector, _node$querySelector2, _node$querySelector3, _node$querySelector4, _node$querySelector5, _node$querySelector6, _node$querySelector7, _node$querySelector8, _node$querySelector9, _node$querySelector0, _node$querySelector1, _node$querySelector10, _node$querySelector11, _node$querySelector12, _node$querySelector13, _node$querySelector14, _node$querySelector15, _node$querySelector16, _node$querySelector17, _node$querySelector18, _node$querySelector19, _node$querySelector20, _node$querySelector21, _node$querySelector22, _node$querySelector23, _node$querySelector24, _node$querySelector25, _node$querySelector26, _node$querySelector27, _node$querySelector28, _node$querySelector29, _node$querySelector30, _node$querySelector31, _node$querySelector32, _node$querySelector33, _node$querySelector34, _node$querySelector35, _node$querySelector36, _node$querySelector37, _node$querySelector38, _node$querySelector39, _node$querySelector40, _node$querySelector41, _node$querySelector42, _node$querySelector43, _node$querySelector44;\n        // Only process nodes that have QuoteID (skip empty parent nodes)\n        const quoteID = ((_node$querySelector = node.querySelector('QuoteID')) === null || _node$querySelector === void 0 ? void 0 : _node$querySelector.textContent) || '';\n        if (!quoteID) {\n          console.log('⚠️ Skipping node without QuoteID');\n          return; // Skip empty nodes\n        }\n        console.log(`✅ Processing quote result with QuoteID: ${quoteID}`);\n        const grossPriceText = ((_node$querySelector2 = node.querySelector('GrossPrice')) === null || _node$querySelector2 === void 0 ? void 0 : _node$querySelector2.textContent) || '0';\n        const grossPriceValue = parseFloat(grossPriceText);\n        console.log(`💰 Extracted GrossPrice: ${grossPriceText} -> ${grossPriceValue}`);\n        const result = {\n          QuoteID: quoteID,\n          schemaName: ((_node$querySelector3 = node.querySelector('schemaName')) === null || _node$querySelector3 === void 0 ? void 0 : _node$querySelector3.textContent) || '',\n          policytypeName: ((_node$querySelector4 = node.querySelector('policytypeName')) === null || _node$querySelector4 === void 0 ? void 0 : _node$querySelector4.textContent) || '',\n          residenceName: ((_node$querySelector5 = node.querySelector('residenceName')) === null || _node$querySelector5 === void 0 ? void 0 : _node$querySelector5.textContent) || '',\n          destinationName: ((_node$querySelector6 = node.querySelector('destinationName')) === null || _node$querySelector6 === void 0 ? void 0 : _node$querySelector6.textContent) || '',\n          startDate: ((_node$querySelector7 = node.querySelector('startDate')) === null || _node$querySelector7 === void 0 ? void 0 : _node$querySelector7.textContent) || '',\n          endDate: ((_node$querySelector8 = node.querySelector('endDate')) === null || _node$querySelector8 === void 0 ? void 0 : _node$querySelector8.textContent) || '',\n          SI: ((_node$querySelector9 = node.querySelector('SI')) === null || _node$querySelector9 === void 0 ? void 0 : _node$querySelector9.textContent) || '',\n          PW: ((_node$querySelector0 = node.querySelector('PW')) === null || _node$querySelector0 === void 0 ? void 0 : _node$querySelector0.textContent) || '',\n          KF: ((_node$querySelector1 = node.querySelector('KF')) === null || _node$querySelector1 === void 0 ? void 0 : _node$querySelector1.textContent) || '',\n          HelpFile: ((_node$querySelector10 = node.querySelector('HelpFile')) === null || _node$querySelector10 === void 0 ? void 0 : _node$querySelector10.textContent) || '',\n          currency: ((_node$querySelector11 = node.querySelector('currency')) === null || _node$querySelector11 === void 0 ? void 0 : _node$querySelector11.textContent) || '',\n          IPT: parseFloat(((_node$querySelector12 = node.querySelector('IPT')) === null || _node$querySelector12 === void 0 ? void 0 : _node$querySelector12.textContent) || '0'),\n          IPTRate: parseFloat(((_node$querySelector13 = node.querySelector('IPTRate')) === null || _node$querySelector13 === void 0 ? void 0 : _node$querySelector13.textContent) || '0'),\n          GrossPrice: grossPriceValue,\n          screeningPremium: parseFloat(((_node$querySelector14 = node.querySelector('screeningPremium')) === null || _node$querySelector14 === void 0 ? void 0 : _node$querySelector14.textContent) || '0'),\n          IconURL: ((_node$querySelector15 = node.querySelector('IconURL')) === null || _node$querySelector15 === void 0 ? void 0 : _node$querySelector15.textContent) || '',\n          SchemaID: parseInt(((_node$querySelector16 = node.querySelector('SchemaID')) === null || _node$querySelector16 === void 0 ? void 0 : _node$querySelector16.textContent) || '0'),\n          PolicyTypeID: parseInt(((_node$querySelector17 = node.querySelector('PolicyTypeID')) === null || _node$querySelector17 === void 0 ? void 0 : _node$querySelector17.textContent) || '0'),\n          DestinationID: parseInt(((_node$querySelector18 = node.querySelector('DestinationID')) === null || _node$querySelector18 === void 0 ? void 0 : _node$querySelector18.textContent) || '0'),\n          PackageID: parseInt(((_node$querySelector19 = node.querySelector('PackageID')) === null || _node$querySelector19 === void 0 ? void 0 : _node$querySelector19.textContent) || '0'),\n          MaxAgeAgebandID: parseInt(((_node$querySelector20 = node.querySelector('MaxAgeAgebandID')) === null || _node$querySelector20 === void 0 ? void 0 : _node$querySelector20.textContent) || '0'),\n          ScreeningID: parseInt(((_node$querySelector21 = node.querySelector('ScreeningID')) === null || _node$querySelector21 === void 0 ? void 0 : _node$querySelector21.textContent) || '0'),\n          groupPerProduct: ((_node$querySelector22 = node.querySelector('groupPerProduct')) === null || _node$querySelector22 === void 0 ? void 0 : _node$querySelector22.textContent) === 'true',\n          priceOrder: parseInt(((_node$querySelector23 = node.querySelector('priceOrder')) === null || _node$querySelector23 === void 0 ? void 0 : _node$querySelector23.textContent) || '0'),\n          IPID: ((_node$querySelector24 = node.querySelector('IPID')) === null || _node$querySelector24 === void 0 ? void 0 : _node$querySelector24.textContent) || '',\n          typePolicyName: ((_node$querySelector25 = node.querySelector('typePolicyName')) === null || _node$querySelector25 === void 0 ? void 0 : _node$querySelector25.textContent) || '',\n          typePackageName: ((_node$querySelector26 = node.querySelector('typePackageName')) === null || _node$querySelector26 === void 0 ? void 0 : _node$querySelector26.textContent) || '',\n          currencyHTMLEncoded: ((_node$querySelector27 = node.querySelector('currencyHTMLEncoded')) === null || _node$querySelector27 === void 0 ? void 0 : _node$querySelector27.textContent) || '',\n          AlterationID: ((_node$querySelector28 = node.querySelector('AlterationID')) === null || _node$querySelector28 === void 0 ? void 0 : _node$querySelector28.textContent) || '',\n          packageName: ((_node$querySelector29 = node.querySelector('packageName')) === null || _node$querySelector29 === void 0 ? void 0 : _node$querySelector29.textContent) || '',\n          isAnnual: parseInt(((_node$querySelector30 = node.querySelector('isAnnual')) === null || _node$querySelector30 === void 0 ? void 0 : _node$querySelector30.textContent) || '0'),\n          isBestBuy: parseInt(((_node$querySelector31 = node.querySelector('isBestBuy')) === null || _node$querySelector31 === void 0 ? void 0 : _node$querySelector31.textContent) || '0'),\n          maxDaysPerTrip: parseInt(((_node$querySelector32 = node.querySelector('maxDaysPerTrip')) === null || _node$querySelector32 === void 0 ? void 0 : _node$querySelector32.textContent) || '0'),\n          isBestBuyText: ((_node$querySelector33 = node.querySelector('isBestBuyText')) === null || _node$querySelector33 === void 0 ? void 0 : _node$querySelector33.textContent) || '',\n          isBestBuyLocation: parseInt(((_node$querySelector34 = node.querySelector('isBestBuyLocation')) === null || _node$querySelector34 === void 0 ? void 0 : _node$querySelector34.textContent) || '0'),\n          numberToSort: parseFloat(((_node$querySelector35 = node.querySelector('numberToSort')) === null || _node$querySelector35 === void 0 ? void 0 : _node$querySelector35.textContent) || '0'),\n          coverLevel: parseInt(((_node$querySelector36 = node.querySelector('coverLevel')) === null || _node$querySelector36 === void 0 ? void 0 : _node$querySelector36.textContent) || '0'),\n          Discount: parseFloat(((_node$querySelector37 = node.querySelector('Discount')) === null || _node$querySelector37 === void 0 ? void 0 : _node$querySelector37.textContent) || '0'),\n          netUW: parseFloat(((_node$querySelector38 = node.querySelector('netUW')) === null || _node$querySelector38 === void 0 ? void 0 : _node$querySelector38.textContent) || '0'),\n          wbComm: parseFloat(((_node$querySelector39 = node.querySelector('wbComm')) === null || _node$querySelector39 === void 0 ? void 0 : _node$querySelector39.textContent) || '0'),\n          agentComm: parseFloat(((_node$querySelector40 = node.querySelector('agentComm')) === null || _node$querySelector40 === void 0 ? void 0 : _node$querySelector40.textContent) || '0'),\n          screeningPremiumPerPersonCSV: ((_node$querySelector41 = node.querySelector('screeningPremiumPerPersonCSV')) === null || _node$querySelector41 === void 0 ? void 0 : _node$querySelector41.textContent) || '',\n          screeningPremiumExcIPTPerPersonCSV: ((_node$querySelector42 = node.querySelector('screeningPremiumExcIPTPerPersonCSV')) === null || _node$querySelector42 === void 0 ? void 0 : _node$querySelector42.textContent) || '',\n          isNotCoveredPerPersonCSV: ((_node$querySelector43 = node.querySelector('isNotCoveredPerPersonCSV')) === null || _node$querySelector43 === void 0 ? void 0 : _node$querySelector43.textContent) || '',\n          policytypeShortName: ((_node$querySelector44 = node.querySelector('policytypeShortName')) === null || _node$querySelector44 === void 0 ? void 0 : _node$querySelector44.textContent) || '',\n          SummaryCovers: []\n        };\n\n        // Parse SummaryCovers\n        const summaryCoversNode = node.querySelector('SummaryCovers');\n        if (summaryCoversNode) {\n          const summaryCoverNodes = summaryCoversNode.querySelectorAll('summaryCover');\n          const summaryCovers = [];\n          summaryCoverNodes.forEach(coverNode => {\n            var _coverNode$querySelec, _coverNode$querySelec2, _coverNode$querySelec3, _coverNode$querySelec4;\n            const rawLimit = ((_coverNode$querySelec = coverNode.querySelector('Limit')) === null || _coverNode$querySelec === void 0 ? void 0 : _coverNode$querySelec.textContent) || '';\n            const rawExcess = ((_coverNode$querySelec2 = coverNode.querySelector('Excess')) === null || _coverNode$querySelec2 === void 0 ? void 0 : _coverNode$querySelec2.textContent) || '';\n            summaryCovers.push({\n              name: ((_coverNode$querySelec3 = coverNode.querySelector('name')) === null || _coverNode$querySelec3 === void 0 ? void 0 : _coverNode$querySelec3.textContent) || '',\n              Limit: formatCurrencyLimit(rawLimit),\n              Excess: formatCurrencyLimit(rawExcess),\n              position: parseInt(((_coverNode$querySelec4 = coverNode.querySelector('position')) === null || _coverNode$querySelec4 === void 0 ? void 0 : _coverNode$querySelec4.textContent) || '0')\n            });\n          });\n          result.SummaryCovers = summaryCovers;\n        }\n        quoteResults.push(result);\n      });\n      return {\n        Message: message,\n        quoteResults\n      };\n    } catch (error) {\n      console.error('Error parsing quote response:', error);\n      throw new Error(`Failed to parse quote response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseScreeningQuestionsResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector2;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector2 = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector2 === void 0 ? void 0 : _xmlDoc$querySelector2.textContent) || '';\n      const screeningQuestions = [];\n      const questionNodes = xmlDoc.querySelectorAll('screeningQuestion');\n      questionNodes.forEach(node => {\n        var _node$querySelector45, _node$querySelector46, _node$querySelector47, _node$querySelector48, _node$querySelector49, _node$querySelector50, _node$querySelector51, _node$querySelector52;\n        const question = {\n          questionNumber: parseInt(((_node$querySelector45 = node.querySelector('questionNumber')) === null || _node$querySelector45 === void 0 ? void 0 : _node$querySelector45.textContent) || '0'),\n          question: ((_node$querySelector46 = node.querySelector('Question')) === null || _node$querySelector46 === void 0 ? void 0 : _node$querySelector46.textContent) || '',\n          // Capital Q to match API response\n          yesMessage: ((_node$querySelector47 = node.querySelector('yesMessage')) === null || _node$querySelector47 === void 0 ? void 0 : _node$querySelector47.textContent) || '',\n          noMessage: ((_node$querySelector48 = node.querySelector('noMessage')) === null || _node$querySelector48 === void 0 ? void 0 : _node$querySelector48.textContent) || '',\n          yesAction: ((_node$querySelector49 = node.querySelector('yesAction')) === null || _node$querySelector49 === void 0 ? void 0 : _node$querySelector49.textContent) || '',\n          noAction: ((_node$querySelector50 = node.querySelector('noAction')) === null || _node$querySelector50 === void 0 ? void 0 : _node$querySelector50.textContent) || '',\n          yesActionText: ((_node$querySelector51 = node.querySelector('yesActionText')) === null || _node$querySelector51 === void 0 ? void 0 : _node$querySelector51.textContent) || '',\n          noActionText: ((_node$querySelector52 = node.querySelector('noActionText')) === null || _node$querySelector52 === void 0 ? void 0 : _node$querySelector52.textContent) || ''\n        };\n        screeningQuestions.push(question);\n      });\n      return {\n        Message: message,\n        screeningQuestions\n      };\n    } catch (error) {\n      console.error('Error parsing screening questions response:', error);\n      throw new Error(`Failed to parse screening questions response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseEmailPolicyDocumentsResponse(xmlText) {\n    try {\n      var _messageNode$textCont, _emailSentNode$textCo;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      console.log('🔍 Full EmailPolicyDocuments XML Response:', xmlText);\n\n      // Check for success indicators\n      const messageNode = xmlDoc.querySelector('Message, message');\n      const emailSentNode = xmlDoc.querySelector('emailSent, EmailSent, success, Success');\n      const message = (messageNode === null || messageNode === void 0 ? void 0 : (_messageNode$textCont = messageNode.textContent) === null || _messageNode$textCont === void 0 ? void 0 : _messageNode$textCont.trim()) || '';\n      const emailSentValue = (emailSentNode === null || emailSentNode === void 0 ? void 0 : (_emailSentNode$textCo = emailSentNode.textContent) === null || _emailSentNode$textCo === void 0 ? void 0 : _emailSentNode$textCo.trim()) || '';\n\n      // Determine if email was sent successfully\n      const emailSent = emailSentValue.toLowerCase() === 'true' || emailSentValue.toLowerCase() === 'yes' || message.toLowerCase().includes('success') || message.toLowerCase().includes('sent');\n      console.log('📧 Email sent status:', emailSent);\n      console.log('📧 Response message:', message);\n      return {\n        emailSent,\n        message\n      };\n    } catch (error) {\n      console.error('❌ Error parsing EmailPolicyDocuments response:', error);\n      throw new Error(`Failed to parse EmailPolicyDocuments response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseSavePolicyResponse(xmlText) {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      // Log the full XML for debugging\n      console.log('🔍 Full SavePolicyDetails XML Response:', xmlText);\n\n      // Try different possible XML structures and field names\n      const messageNode = xmlDoc.querySelector('Message, message');\n      const policySavedNode = xmlDoc.querySelector('policySaved, PolicySaved');\n      const policyIDNode = xmlDoc.querySelector('policyID, PolicyID');\n\n      // Try multiple variations for certificate\n      const certificateNode = xmlDoc.querySelector('certificate, Certificate, cert, Cert, CertificateURL, certificateURL');\n      const pwNode = xmlDoc.querySelector('PW, pw, PolicyWording, policyWording');\n      const siNode = xmlDoc.querySelector('SI, si, SummaryInsurance, summaryInsurance, SummaryCover, summaryCover');\n      const kfNode = xmlDoc.querySelector('KF, kf, KeyFacts, keyFacts');\n      const ipidNode = xmlDoc.querySelector('IPID, ipid');\n      const message = (messageNode === null || messageNode === void 0 ? void 0 : messageNode.textContent) || '';\n      const policySavedRaw = (policySavedNode === null || policySavedNode === void 0 ? void 0 : policySavedNode.textContent) || 'No';\n      // Handle both \"Yes\"/\"No\" and \"true\"/\"false\" formats\n      const policySaved = policySavedRaw === 'true' ? 'Yes' : policySavedRaw === 'false' ? 'No' : policySavedRaw;\n      const policyID = (policyIDNode === null || policyIDNode === void 0 ? void 0 : policyIDNode.textContent) || '';\n      const certificate = (certificateNode === null || certificateNode === void 0 ? void 0 : certificateNode.textContent) || '';\n      const pw = (pwNode === null || pwNode === void 0 ? void 0 : pwNode.textContent) || '';\n      const si = (siNode === null || siNode === void 0 ? void 0 : siNode.textContent) || '';\n      const kf = (kfNode === null || kfNode === void 0 ? void 0 : kfNode.textContent) || '';\n      const ipid = (ipidNode === null || ipidNode === void 0 ? void 0 : ipidNode.textContent) || '';\n      console.log('📋 Parsed SavePolicyDetails fields:');\n      console.log('  - Message:', message);\n      console.log('  - policySaved (raw):', policySavedRaw);\n      console.log('  - policySaved (normalized):', policySaved);\n      console.log('  - policyID:', policyID);\n      console.log('  - certificate:', certificate || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - PW:', pw || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - SI:', si || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - KF:', kf || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - IPID:', ipid || '⚠️ EMPTY/NOT FOUND');\n\n      // List all XML nodes for debugging\n      console.log('📋 All XML element names in response:');\n      const allElements = xmlDoc.querySelectorAll('*');\n      const elementNames = Array.from(allElements).map(el => el.tagName);\n      console.log('  Available elements:', Array.from(new Set(elementNames)).join(', '));\n      return {\n        Message: message,\n        policySaved: policySaved,\n        policyID: policyID,\n        certificate: certificate,\n        PW: pw,\n        SI: si,\n        KF: kf,\n        IPID: ipid\n      };\n    } catch (error) {\n      console.error('Error parsing save policy response:', error);\n      throw new Error(`Failed to parse save policy response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parseProductListResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector3, _xmlDoc$querySelector4;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector3 = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector3 === void 0 ? void 0 : _xmlDoc$querySelector3.textContent) || '';\n      const resultID = parseInt(((_xmlDoc$querySelector4 = xmlDoc.querySelector('errorID')) === null || _xmlDoc$querySelector4 === void 0 ? void 0 : _xmlDoc$querySelector4.textContent) || '0');\n      const schemas = [];\n      const schemaNodes = xmlDoc.querySelectorAll('Schema');\n      schemaNodes.forEach(node => {\n        var _node$querySelector53, _node$querySelector54;\n        const schema = {\n          SchemaID: parseInt(((_node$querySelector53 = node.querySelector('SchemaID')) === null || _node$querySelector53 === void 0 ? void 0 : _node$querySelector53.textContent) || '0'),\n          SchemaName: ((_node$querySelector54 = node.querySelector('SchemaName')) === null || _node$querySelector54 === void 0 ? void 0 : _node$querySelector54.textContent) || ''\n        };\n        schemas.push(schema);\n      });\n      return {\n        Message: message,\n        ResultID: resultID,\n        Schemas: schemas\n      };\n    } catch (error) {\n      console.error('Error parsing product list response:', error);\n      throw new Error(`Failed to parse product list response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parsePolicyTypeResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector5, _xmlDoc$querySelector6;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector5 = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector5 === void 0 ? void 0 : _xmlDoc$querySelector5.textContent) || '';\n      const resultID = parseInt(((_xmlDoc$querySelector6 = xmlDoc.querySelector('errorID')) === null || _xmlDoc$querySelector6 === void 0 ? void 0 : _xmlDoc$querySelector6.textContent) || '0');\n      const policyTypes = [];\n      const policyTypeNodes = xmlDoc.querySelectorAll('TypePolicy');\n      policyTypeNodes.forEach(node => {\n        var _node$querySelector55, _node$querySelector56, _node$querySelector57;\n        const policyType = {\n          TypePolicyID: ((_node$querySelector55 = node.querySelector('TypePolicyID')) === null || _node$querySelector55 === void 0 ? void 0 : _node$querySelector55.textContent) || '',\n          TypePolicyName: ((_node$querySelector56 = node.querySelector('Name')) === null || _node$querySelector56 === void 0 ? void 0 : _node$querySelector56.textContent) || '',\n          // Changed from TypePolicyName to Name\n          Description: ((_node$querySelector57 = node.querySelector('IsAnnual')) === null || _node$querySelector57 === void 0 ? void 0 : _node$querySelector57.textContent) === '1' ? 'Annual Policy' : 'Single Trip Policy'\n        };\n        policyTypes.push(policyType);\n      });\n      return {\n        Message: message,\n        ResultID: resultID,\n        PolicyTypes: policyTypes\n      };\n    } catch (error) {\n      console.error('Error parsing policy type response:', error);\n      throw new Error(`Failed to parse policy type response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n  static parsePolicyTypeDestinationResponse(xmlText) {\n    try {\n      var _xmlDoc$querySelector7, _xmlDoc$querySelector8;\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n      const message = ((_xmlDoc$querySelector7 = xmlDoc.querySelector('message')) === null || _xmlDoc$querySelector7 === void 0 ? void 0 : _xmlDoc$querySelector7.textContent) || '';\n      const resultID = parseInt(((_xmlDoc$querySelector8 = xmlDoc.querySelector('errorID')) === null || _xmlDoc$querySelector8 === void 0 ? void 0 : _xmlDoc$querySelector8.textContent) || '0');\n      const policyTypeDestinations = [];\n      const destinationNodes = xmlDoc.querySelectorAll('PolicyTypeDestination');\n      destinationNodes.forEach(node => {\n        var _node$querySelector58, _node$querySelector59, _node$querySelector60;\n        const destination = {\n          TypePolicyDestinationID: ((_node$querySelector58 = node.querySelector('TypePolicyDestinationID')) === null || _node$querySelector58 === void 0 ? void 0 : _node$querySelector58.textContent) || '',\n          Name: ((_node$querySelector59 = node.querySelector('Name')) === null || _node$querySelector59 === void 0 ? void 0 : _node$querySelector59.textContent) || '',\n          PolicyTypeID: ((_node$querySelector60 = node.querySelector('PolicyTypeID')) === null || _node$querySelector60 === void 0 ? void 0 : _node$querySelector60.textContent) || ''\n        };\n        policyTypeDestinations.push(destination);\n      });\n      return {\n        Message: message,\n        ResultID: resultID,\n        PolicyTypeDestinations: policyTypeDestinations\n      };\n    } catch (error) {\n      console.error('Error parsing policy type destination response:', error);\n      throw new Error(`Failed to parse policy type destination response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Main Terracotta Service Class\n */\nexport class TerracottaService {\n  constructor(userID = TERRACOTTA_USER_ID, userCode = TERRACOTTA_USER_CODE) {\n    this.userID = void 0;\n    this.userCode = void 0;\n    this.userID = userID;\n    this.userCode = userCode;\n  }\n  static getInstance(userID, userCode) {\n    if (!TerracottaService.instance) {\n      TerracottaService.instance = new TerracottaService(userID || TERRACOTTA_USER_ID, userCode || TERRACOTTA_USER_CODE);\n    }\n    return TerracottaService.instance;\n  }\n\n  /**\n   * Generic SOAP request method\n   */\n  async makeSOAPRequest(method, requestBody) {\n    const soapEnvelope = SOAPBuilder.createEnvelope(requestBody);\n    console.log('Making SOAP request via proxy to:', `${PROXY_BASE_URL}/${method}`);\n    console.log('SOAP Envelope:', soapEnvelope);\n    try {\n      const response = await fetch(`${PROXY_BASE_URL}/${method}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/xml; charset=utf-8'\n        },\n        body: soapEnvelope\n      });\n      console.log('SOAP Response Status:', response.status, response.statusText);\n      const responseText = await response.text();\n      console.log('SOAP Response Body:', responseText);\n      if (!response.ok) {\n        throw new Error(`SOAP request failed: ${response.status} ${response.statusText}`);\n      }\n      return responseText;\n    } catch (error) {\n      console.error('Proxy request failed:', error);\n      throw new Error(`Failed to connect to Terracotta API via proxy: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Test connection with HelloWorld method\n   */\n  async testConnection() {\n    try {\n      const soapBody = `\n        <HelloWorld xmlns=\"WS-IntegratedQuote\">\n        </HelloWorld>`;\n      const responseText = await this.makeSOAPRequest('HelloWorld', soapBody);\n      console.log('Connection test successful:', responseText);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get available policy types for a specific schema\n   */\n  async getUserProductTypePolicy(schemaId) {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      console.log('getUserProductTypePolicy - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      const soapBody = `\n        <GetUserProductTypePolicy xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductTypePolicy>`;\n      const responseText = await this.makeSOAPRequest('GetUserProductTypePolicy', soapBody);\n      return XMLParser.parsePolicyTypeResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductTypePolicy:', error);\n      throw new Error(`Failed to get policy types: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available destinations for a specific schema\n   */\n  async getUserProductDestination(schemaId) {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      console.log('getUserProductDestination - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      const soapBody = `\n        <GetUserProductDestination xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductDestination>`;\n      const responseText = await this.makeSOAPRequest('GetUserProductDestination', soapBody);\n      return XMLParser.parsePolicyTypeDestinationResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductDestination:', error);\n      throw new Error(`Failed to get policy type destinations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available products for the user\n   */\n  async getUserProductList() {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      console.log('getUserProductList - userID:', userID, 'userCode:', userCode);\n      console.log('getUserProductList - this.userID:', this.userID, 'this.userCode:', this.userCode);\n      const soapBody = `\n        <GetUserProductList xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n        </GetUserProductList>`;\n      const responseText = await this.makeSOAPRequest('GetUserProductList', soapBody);\n      return XMLParser.parseProductListResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductList:', error);\n      throw new Error(`Failed to get user product list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 1. Request for quotations\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\n   */\n  async provideQuotation(request) {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotation...');\n      console.log('📦 Request object:', request);\n      const quoteDetailsXML = SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);\n      console.log('📄 Quote Details XML:', quoteDetailsXML);\n      const soapBody = `\n        <ProvideQuotation xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          ${quoteDetailsXML}\n        </ProvideQuotation>`;\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotation`);\n      const responseText = await this.makeSOAPRequest('ProvideQuotation', soapBody);\n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      const parsedResponse = XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotation:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Obtain Screening Questions\n   * Calls ScreeningQuestions to get screening questions for the selected quote\n   */\n  async getScreeningQuestions(quoteID) {\n    try {\n      var _parsed$screeningQues;\n      console.log('🔄 Building SOAP request for ScreeningQuestions...');\n      console.log('📦 QuoteID:', quoteID);\n      console.log('👤 UserID:', this.userID, 'UserCode:', this.userCode);\n      const soapBody = `\n        <ScreeningQuestions xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID)}</userID>\n          <userCode>${parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE)}</userCode>\n          <quoteID>${quoteID}</quoteID>\n        </ScreeningQuestions>`;\n      console.log('📤 SOAP Body for ScreeningQuestions:', soapBody);\n      const responseText = await this.makeSOAPRequest('ScreeningQuestions', soapBody);\n      console.log('📥 Raw Response from ScreeningQuestions:', responseText.substring(0, 1000));\n      const parsed = XMLParser.parseScreeningQuestionsResponse(responseText);\n      console.log('✅ Parsed Screening Questions Response:', parsed);\n      console.log('📋 Number of questions:', ((_parsed$screeningQues = parsed.screeningQuestions) === null || _parsed$screeningQues === void 0 ? void 0 : _parsed$screeningQues.length) || 0);\n      if (parsed.screeningQuestions && parsed.screeningQuestions.length > 0) {\n        console.log('📝 Questions details:');\n        parsed.screeningQuestions.forEach((q, idx) => {\n          console.log(`  ${idx + 1}. Q${q.questionNumber}: ${q.question}`);\n        });\n      }\n      return parsed;\n    } catch (error) {\n      console.error('❌ Error in getScreeningQuestions:', error);\n      console.error('Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get screening questions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 2. Update quotes with additional covers\n   * Calls ProvideQuotationWithAlterations to get quotes with specific alterations/add-ons\n   * This method can only be called AFTER obtaining a quote reference from ProvideQuotation\n   */\n  async provideQuotationWithAlterations(request) {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotationWithAlterations...');\n      console.log('📦 Request object:', request);\n      const specificQuoteDetailsXML = SOAPBuilder.buildSpecificQuoteDetailsXML(request.specificQuoteDetails);\n      console.log('📄 Specific Quote Details XML:', specificQuoteDetailsXML);\n      const soapBody = `\n        <ProvideQuotationWithAlterations xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${specificQuoteDetailsXML}\n        </ProvideQuotationWithAlterations>`;\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotationWithAlterations`);\n      const responseText = await this.makeSOAPRequest('ProvideQuotationWithAlterations', soapBody);\n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      const parsedResponse = XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotationWithAlterations:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes with alterations from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Save a quote as a Live policy\n   * Calls SavePolicyDetails to convert the quote into a live policy\n   */\n  async savePolicyDetails(request) {\n    try {\n      console.log('🚀 Building SOAP request for SavePolicyDetails...');\n      console.log('📦 Request object:', request);\n      console.log('👥 Travelers in request:', JSON.stringify(request.travelers, null, 2));\n      console.log('📧 Contact Details in request:', JSON.stringify(request.contactDetails, null, 2));\n      const screeningAnswersXML = SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);\n\n      // Build travelers XML if provided\n      if (request.travelers && request.travelers.length > 0) {\n        console.log(`🔨 Building XML for ${request.travelers.length} traveler(s)...`);\n        request.travelers.forEach((t, idx) => {\n          console.log(`  Traveler ${idx + 1}: ${t.Title} ${t.FirstName} ${t.LastName}, Age: ${t.Age}, DOB: ${t.DateOfBirth}`);\n        });\n      }\n      const travelersXML = request.travelers && request.travelers.length > 0 ? request.travelers.map(traveler => SOAPBuilder.buildTravelerXML(traveler)).join('') : '';\n\n      // Build contact details XML if provided\n      const contactDetailsXML = request.contactDetails ? SOAPBuilder.buildContactDetailsXML(request.contactDetails) : '';\n      const soapBody = `\n        <SavePolicyDetails xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${screeningAnswersXML}\n          ${request.medicalScreeningReference ? `<medicalScreeningReference>${request.medicalScreeningReference}</medicalScreeningReference>` : '<medicalScreeningReference>string</medicalScreeningReference>'}\n          ${request.useDefaultAnswers !== undefined ? `<useDefaultAnswers>${request.useDefaultAnswers}</useDefaultAnswers>` : '<useDefaultAnswers>1</useDefaultAnswers>'}\n          ${travelersXML}\n          ${contactDetailsXML}\n        </SavePolicyDetails>`;\n      console.log('📤 Complete SOAP Body for SavePolicyDetails:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/SavePolicyDetails`);\n      const responseText = await this.makeSOAPRequest('SavePolicyDetails', soapBody);\n      console.log('📥 Raw SOAP Response from SavePolicyDetails:', responseText);\n      const parsedResponse = XMLParser.parseSavePolicyResponse(responseText);\n      console.log('✅ Parsed SavePolicyDetails response:', parsedResponse);\n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in savePolicyDetails:', error);\n      throw new Error(`Failed to save policy details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 4. Email Policy Documents\n   * Calls EmailPolicyDocuments to send policy documents to the policy holder's email\n   */\n  async emailPolicyDocuments(request) {\n    try {\n      console.log('🚀 Building SOAP request for EmailPolicyDocuments...');\n      console.log('📦 Request object:', request);\n      const soapBody = `\n        <EmailPolicyDocuments xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <policyID>${request.policyID}</policyID>\n          <emailAddress>${request.emailAddress}</emailAddress>\n        </EmailPolicyDocuments>`;\n      console.log('📤 Complete SOAP Body for EmailPolicyDocuments:', soapBody);\n      console.log('📧 Sending policy documents to:', request.emailAddress);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/EmailPolicyDocuments`);\n      const responseText = await this.makeSOAPRequest('EmailPolicyDocuments', soapBody);\n      console.log('📥 Raw SOAP Response from EmailPolicyDocuments:', responseText);\n      const parsedResponse = XMLParser.parseEmailPolicyDocumentsResponse(responseText);\n      console.log('✅ Parsed EmailPolicyDocuments response:', parsedResponse);\n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in emailPolicyDocuments:', error);\n      throw new Error(`Failed to email policy documents: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Utility method to convert frontend data to Terracotta format\n   */\n  static convertToTerracottaFormat(formData, availablePolicyTypes) {\n    console.log('Converting form data to Terracotta format:', formData);\n\n    // Use DUMMY data for travelers to get quotation\n    // Real traveler data will be collected later in the payment step\n    const travelers = Array.from({\n      length: formData.numberOfTravelers || 1\n    }, (_, index) => {\n      const dummyAge = 30; // Default dummy age\n      const dummyDateOfBirth = calculateDateOfBirth(dummyAge);\n      console.log(`Traveler ${index + 1} (DUMMY): DOB=${dummyDateOfBirth}, Age=${dummyAge}`);\n      return {\n        TravellerNumber: index + 1,\n        Title: 'Mr',\n        // Dummy title\n        FirstName: 'John',\n        // Dummy first name\n        LastName: 'Doe',\n        // Dummy last name\n        DateOfBirth: formatDateForTerracotta(dummyDateOfBirth),\n        Age: dummyAge,\n        AgebandID: getAgebandID(dummyAge),\n        TitleID: getTitleID('Mr'),\n        minAge: dummyAge,\n        maxAge: dummyAge,\n        ScreeningInformation: null\n      };\n    });\n\n    // Use DUMMY contact details to get quotation\n    // Real contact details will be collected later in the payment step\n    const contactDetails = {\n      Address: '123 Main Street',\n      // Dummy address\n      Postcode: '12345',\n      // Dummy postcode\n      Email: 'customer@example.com',\n      // Dummy email\n      Telephone: '+302101234567',\n      // Dummy telephone\n      VehicleMakeModel: formData.vehicleMakeModel,\n      VehicleLicensePlate: formData.vehicleLicensePlate,\n      VehicleYearManufacture: formData.vehicleYearManufacture\n    };\n\n    // Convert trip details using actual user data\n    const quoteDetails = {\n      ResidenceID: getResidenceID(formData.countryOfResidence),\n      TypePolicyID: getTypePolicyID(formData.tripType, availablePolicyTypes),\n      TypePackageID: '1',\n      // Fixed value as requested (string)\n      Destination: formData.destination || 'Europe',\n      StartDate: formatDateForTerracotta(formData.startDate),\n      EndDate: formatDateForTerracotta(formData.endDate),\n      Travellers: travelers,\n      ContactDetails: contactDetails,\n      includeAnnualQuotes: formData.tripType === 'annual' ? 1 : 0,\n      includeUpsell: 0,\n      // Simplified for now\n      currencyID: 1,\n      // EUR\n      schemaIDFilter: '717' // Use schema 717\n    };\n    console.log('Converted Terracotta request:', quoteDetails);\n\n    // Use fixed values as requested\n    return {\n      userID: '4072',\n      userCode: '111427',\n      quoteDetails\n    };\n  }\n}\n\n/**\n * Utility functions for data conversion\n */\n_TerracottaService = TerracottaService;\nTerracottaService.instance = void 0;\nfunction formatDateForTerracotta(dateString) {\n  if (!dateString) return '';\n\n  // Handle different date formats\n  if (dateString.includes('/')) {\n    // Handle DD/MM/YYYY format\n    const parts = dateString.split('/');\n    if (parts.length === 3) {\n      const [day, month, year] = parts;\n      return `${year}/${month}/${day}`;\n    }\n  }\n\n  // Handle YYYY-MM-DD format\n  if (dateString.includes('-')) {\n    return dateString.replace(/-/g, '/');\n  }\n  return dateString;\n}\nfunction calculateDateOfBirth(age) {\n  const currentYear = new Date().getFullYear();\n  const birthYear = currentYear - age;\n  // Use January 1st as default date\n  return `${birthYear}/01/01`;\n}\nfunction calculateAgeFromDateOfBirth(dateOfBirth) {\n  const birthDate = new Date(dateOfBirth);\n  const today = new Date();\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  if (monthDiff < 0 || monthDiff === 0 && today.getDate() < birthDate.getDate()) {\n    age--;\n  }\n  return Math.max(0, age);\n}\nexport function getResidenceID(country) {\n  // Map countries to Terracotta Residence IDs\n  // Based on Terracotta API - Greece is ResidenceID 24\n  const residenceMap = {\n    'Greece': '24',\n    // Correct ResidenceID for Greece\n    'Austria': '4',\n    'Belgium': '6',\n    'Bulgaria': '10',\n    'Croatia (Hrvatska)': '14',\n    'Czech Republic': '16',\n    'Denmark': '17',\n    'Estonia': '20',\n    'Finland': '21',\n    'France': '22',\n    'Germany': '23',\n    'Hungary': '27',\n    'Iceland': '28',\n    'Italy': '33',\n    'Latvia': '38',\n    'Liechtenstein': '40',\n    'Lithuania': '41',\n    'Luxembourg': '42',\n    'Malta': '93',\n    'Netherlands': '47',\n    'Norway': '49',\n    'Poland': '53',\n    'Portugal': '54',\n    'Republic of Cyprus': '283',\n    'Republic of Ireland': '19',\n    'Romania': '55',\n    'Slovak Republic': '59',\n    'Slovenia': '60',\n    'Spain': '62',\n    'Sweden': '63'\n  };\n  return residenceMap[country] || '24'; // Default to Greece\n}\nexport function getTypePolicyID(tripType, availablePolicyTypes) {\n  // If we have SOAP data, use it to find the correct TypePolicyID\n  if (availablePolicyTypes && availablePolicyTypes.length > 0) {\n    const policyType = availablePolicyTypes.find(pt => {\n      const name = pt.TypePolicyName.toLowerCase();\n      switch (tripType) {\n        case 'single':\n          return name.includes('single') && !name.includes('annual');\n        case 'annual':\n          return name.includes('annual') || name.includes('multi-trip');\n        case 'longstay':\n          return name.includes('longstay') || name.includes('long stay');\n        case 'comprehensive':\n          return name.includes('comprehensive');\n        default:\n          return false;\n      }\n    });\n    if (policyType) {\n      console.log(`✅ Found TypePolicyID ${policyType.TypePolicyID} for trip type '${tripType}' (${policyType.TypePolicyName})`);\n      return policyType.TypePolicyID;\n    }\n  }\n\n  // Fallback to hardcoded mappings if SOAP data not available\n  console.log(`⚠️ Using fallback mapping for trip type '${tripType}'`);\n  const policyMap = {\n    'single': '2',\n    // Single Trip TypePolicyID\n    'annual': '23',\n    // Annual Multi-Trip TypePolicyID\n    'longstay': '3',\n    // Longstay TypePolicyID\n    'comprehensive': '2' // Use Single Trip as default\n  };\n  return policyMap[tripType] || '2'; // Default to Single Trip TypePolicyID\n}\nfunction getTypePackageID(tripType) {\n  // Use correct Package IDs (not SchemaIDs)\n  // Package IDs are typically 1, 2, 3, etc. for different coverage levels\n  const packageMap = {\n    'single': '1',\n    // Basic package for single trip\n    'annual': '1',\n    // Basic package for annual\n    'comprehensive': '2' // Higher coverage package\n  };\n  return packageMap[tripType] || '1'; // Default to basic package\n}\nexport function getAgebandID(age) {\n  // Map age to Terracotta Ageband ID\n  if (age <= 17) return 1;\n  if (age <= 30) return 2;\n  if (age <= 40) return 3;\n  if (age <= 50) return 4;\n  if (age <= 60) return 5;\n  if (age <= 70) return 6;\n  return 7; // 70+\n}\nexport function getTitleID(title) {\n  // Map title to Terracotta Title ID\n  const titleMap = {\n    'Mr': 1,\n    'Mrs': 2,\n    'Miss': 3,\n    'Ms': 4,\n    'Dr': 5,\n    'Prof': 6\n  };\n  return titleMap[title] || 1; // Default to Mr\n}\nfunction getCurrencyID(currency) {\n  // Map currency to Terracotta Currency ID\n  const currencyMap = {\n    'EUR': 1,\n    'USD': 2,\n    'GBP': 3,\n    'CHF': 4\n  };\n  return currencyMap[currency] || 1; // Default to EUR\n}\nexport default TerracottaService;","map":{"version":3,"names":["DOMParser","window","XMDOMParser","require","TERRACOTTA_BASE_URL","PROXY_BASE_URL","TERRACOTTA_USER_ID","TERRACOTTA_USER_CODE","formatCurrencyLimit","htmlString","textarea","document","createElement","innerHTML","decoded","value","replace","match","currency","number","formattedNumber","parseInt","toLocaleString","SOAPBuilder","createEnvelope","body","buildTravelerXML","traveler","TravellerNumber","Title","FirstName","LastName","DateOfBirth","Age","AgebandID","TitleID","minAge","maxAge","AlterationID","msPrice","msPriceExcIPT","msConditions","buildContactDetailsXML","contact","Address","Postcode","Email","Telephone","VehicleMakeModel","VehicleLicensePlate","VehicleYearManufacture","buildQuoteDetailsXML","details","travelersXML","Travellers","map","join","contactXML","ContactDetails","ResidenceID","TypePolicyID","TypePackageID","Destination","StartDate","EndDate","includeAnnualQuotes","undefined","includeUpsell","currencyID","schemaIDFilter","buildScreeningAnswersXML","answers","answer","questionNumber","buildEligibilityAnswersXML","buildDynamicDetailsXML","detail","Position","FieldName","FieldValue","FieldSize","buildSpecificQuoteDetailsXML","dynamicDetailsXML","DynamicDetails","screeningAnswersXML","screeningQuestionAnswers","eligibilityAnswersXML","EligibilityQuestionAnswers","XMLParser","getXMLParser","parseQuoteResponse","xmlText","_xmlDoc$querySelector","parser","xmlDoc","parseFromString","parseError","querySelector","Error","textContent","message","quoteResults","quoteResultNodes","querySelectorAll","length","console","log","forEach","node","_node$querySelector","_node$querySelector2","_node$querySelector3","_node$querySelector4","_node$querySelector5","_node$querySelector6","_node$querySelector7","_node$querySelector8","_node$querySelector9","_node$querySelector0","_node$querySelector1","_node$querySelector10","_node$querySelector11","_node$querySelector12","_node$querySelector13","_node$querySelector14","_node$querySelector15","_node$querySelector16","_node$querySelector17","_node$querySelector18","_node$querySelector19","_node$querySelector20","_node$querySelector21","_node$querySelector22","_node$querySelector23","_node$querySelector24","_node$querySelector25","_node$querySelector26","_node$querySelector27","_node$querySelector28","_node$querySelector29","_node$querySelector30","_node$querySelector31","_node$querySelector32","_node$querySelector33","_node$querySelector34","_node$querySelector35","_node$querySelector36","_node$querySelector37","_node$querySelector38","_node$querySelector39","_node$querySelector40","_node$querySelector41","_node$querySelector42","_node$querySelector43","_node$querySelector44","quoteID","grossPriceText","grossPriceValue","parseFloat","result","QuoteID","schemaName","policytypeName","residenceName","destinationName","startDate","endDate","SI","PW","KF","HelpFile","IPT","IPTRate","GrossPrice","screeningPremium","IconURL","SchemaID","PolicyTypeID","DestinationID","PackageID","MaxAgeAgebandID","ScreeningID","groupPerProduct","priceOrder","IPID","typePolicyName","typePackageName","currencyHTMLEncoded","packageName","isAnnual","isBestBuy","maxDaysPerTrip","isBestBuyText","isBestBuyLocation","numberToSort","coverLevel","Discount","netUW","wbComm","agentComm","screeningPremiumPerPersonCSV","screeningPremiumExcIPTPerPersonCSV","isNotCoveredPerPersonCSV","policytypeShortName","SummaryCovers","summaryCoversNode","summaryCoverNodes","summaryCovers","coverNode","_coverNode$querySelec","_coverNode$querySelec2","_coverNode$querySelec3","_coverNode$querySelec4","rawLimit","rawExcess","push","name","Limit","Excess","position","Message","error","parseScreeningQuestionsResponse","_xmlDoc$querySelector2","screeningQuestions","questionNodes","_node$querySelector45","_node$querySelector46","_node$querySelector47","_node$querySelector48","_node$querySelector49","_node$querySelector50","_node$querySelector51","_node$querySelector52","question","yesMessage","noMessage","yesAction","noAction","yesActionText","noActionText","parseEmailPolicyDocumentsResponse","_messageNode$textCont","_emailSentNode$textCo","messageNode","emailSentNode","trim","emailSentValue","emailSent","toLowerCase","includes","parseSavePolicyResponse","policySavedNode","policyIDNode","certificateNode","pwNode","siNode","kfNode","ipidNode","policySavedRaw","policySaved","policyID","certificate","pw","si","kf","ipid","allElements","elementNames","Array","from","el","tagName","Set","parseProductListResponse","_xmlDoc$querySelector3","_xmlDoc$querySelector4","resultID","schemas","schemaNodes","_node$querySelector53","_node$querySelector54","schema","SchemaName","ResultID","Schemas","parsePolicyTypeResponse","_xmlDoc$querySelector5","_xmlDoc$querySelector6","policyTypes","policyTypeNodes","_node$querySelector55","_node$querySelector56","_node$querySelector57","policyType","TypePolicyName","Description","PolicyTypes","parsePolicyTypeDestinationResponse","_xmlDoc$querySelector7","_xmlDoc$querySelector8","policyTypeDestinations","destinationNodes","_node$querySelector58","_node$querySelector59","_node$querySelector60","destination","TypePolicyDestinationID","Name","PolicyTypeDestinations","TerracottaService","constructor","userID","userCode","getInstance","instance","makeSOAPRequest","method","requestBody","soapEnvelope","response","fetch","headers","status","statusText","responseText","text","ok","testConnection","soapBody","getUserProductTypePolicy","schemaId","getUserProductDestination","getUserProductList","provideQuotation","request","quoteDetailsXML","quoteDetails","substring","parsedResponse","String","getScreeningQuestions","_parsed$screeningQues","parsed","q","idx","provideQuotationWithAlterations","specificQuoteDetailsXML","specificQuoteDetails","savePolicyDetails","JSON","stringify","travelers","contactDetails","t","contactDetailsXML","medicalScreeningReference","useDefaultAnswers","emailPolicyDocuments","emailAddress","convertToTerracottaFormat","formData","availablePolicyTypes","numberOfTravelers","_","index","dummyAge","dummyDateOfBirth","calculateDateOfBirth","formatDateForTerracotta","getAgebandID","getTitleID","ScreeningInformation","vehicleMakeModel","vehicleLicensePlate","vehicleYearManufacture","getResidenceID","countryOfResidence","getTypePolicyID","tripType","_TerracottaService","dateString","parts","split","day","month","year","age","currentYear","Date","getFullYear","birthYear","calculateAgeFromDateOfBirth","dateOfBirth","birthDate","today","monthDiff","getMonth","getDate","Math","max","country","residenceMap","find","pt","policyMap","getTypePackageID","packageMap","title","titleMap","getCurrencyID","currencyMap"],"sources":["C:/Users/laptop-123/TravelInsurance_Demo_2/src/services/terracottaService.ts"],"sourcesContent":["/**\n * Terracotta Insurance Quote Integration Service\n * \n * This service handles all communication with the Terracotta Integrated Quote web service\n * using SOAP protocol. It provides methods for:\n * - Requesting quotes (ProvideQuotation)\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\n * - Getting screening questions (ScreeningQuestions)\n * - Saving policy details (SavePolicyDetails)\n */\n\n// Import xmldom for Node.js XML parsing\nlet DOMParser: any;\nif (typeof window === 'undefined') {\n  // Node.js environment\n  const { DOMParser: XMDOMParser } = require('xmldom');\n  DOMParser = XMDOMParser;\n} else {\n  // Browser environment\n  DOMParser = window.DOMParser;\n}\n\n// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL = 'https://www.asuaonline.com/ws/integratedquote.asmx';\nconst PROXY_BASE_URL = 'http://localhost:3001/api/terracotta';\nconst TERRACOTTA_USER_ID = '4072';\nconst TERRACOTTA_USER_CODE = '111427';\n\n// TypeScript interfaces for Terracotta API data structures\n\nexport interface TerracottaPolicyType {\n  TypePolicyID: string;\n  TypePolicyName: string;\n  Description?: string;\n}\n\nexport interface TerracottaPolicyTypeDestination {\n  TypePolicyDestinationID: string;\n  Name: string;\n  PolicyTypeID?: string;\n}\n\nexport interface TerracottaPolicyTypeDestinationResponse {\n  Message: string;\n  ResultID: number;\n  PolicyTypeDestinations: TerracottaPolicyTypeDestination[];\n}\n\nexport interface TerracottaPolicyTypeResponse {\n  Message: string;\n  ResultID: number;\n  PolicyTypes: TerracottaPolicyType[];\n}\n\nexport interface TerracottaTraveler {\n  TravellerNumber: number;\n  Title: string;\n  FirstName: string;\n  LastName: string;\n  DateOfBirth: string; // Format: YYYY/MM/DD\n  Age: number;\n  AgebandID?: number;\n  TitleID?: number;\n  minAge?: number;\n  maxAge?: number;\n  AlterationID?: string;\n  msPrice?: number;\n  msPriceExcIPT?: number;\n  msConditions?: string;\n  ScreeningInformation?: any;\n}\n\nexport interface TerracottaContactDetails {\n  Address: string;\n  Postcode: string;\n  Email: string;\n  Telephone: string;\n  VehicleMakeModel?: string;\n  VehicleLicensePlate?: string;\n  VehicleYearManufacture?: string;\n}\n\nexport interface TerracottaQuoteDetails {\n  ResidenceID: string;\n  TypePolicyID: string; // Comma-separated list of policy type IDs\n  TypePackageID: string;\n  Destination: string;\n  StartDate: string; // Format: YYYY/MM/DD\n  EndDate: string; // Format: YYYY/MM/DD\n  Travellers: TerracottaTraveler[];\n  ContactDetails: TerracottaContactDetails;\n  includeAnnualQuotes?: number;\n  includeUpsell?: number;\n  alterionGenericID?: string;\n  voucherCode?: string;\n  isCYTI?: boolean;\n  currencyID?: number;\n  groupPerProduct?: boolean;\n  priceOrder?: number;\n  schemaIDFilter?: string;\n  useCoverLevelUpsell?: boolean;\n  sellOnBehalfOf?: number;\n  customerUniqueID?: number;\n  quoteVisitAuditID?: number;\n}\n\nexport interface TerracottaQuoteRequest {\n  userID: string;\n  userCode: string;\n  quoteDetails: TerracottaQuoteDetails;\n}\n\nexport interface TerracottaDynamicDetail {\n  Position: number;\n  FieldName: string;\n  FieldValue: string;\n  FieldSize: number;\n}\n\nexport interface TerracottaEligibilityQuestionAnswer {\n  questionNumber: number;\n  answer: 'yes' | 'no';\n}\n\nexport interface TerracottaQuoteWithAlterationsRequest {\n  userID: string;\n  userCode: string;\n  quoteID: string; // Note: lowercase 'q' as per documentation\n  specificQuoteDetails: {\n    AlterationID: string; // Comma-separated list of alteration IDs\n    Travellers: TerracottaTraveler[];\n    ContactDetails: TerracottaContactDetails;\n    DynamicDetails?: TerracottaDynamicDetail[];\n    screeningQuestionAnswers?: TerracottaScreeningQuestionAnswer[];\n    EligibilityQuestionAnswers?: TerracottaEligibilityQuestionAnswer[];\n  };\n}\n\nexport interface SummaryCover {\n  name: string;\n  Limit: string;\n  Excess: string;\n  position?: number;\n}\n\nexport interface TerracottaQuoteResult {\n  QuoteID: string;\n  schemaName: string;\n  policytypeName: string;\n  residenceName: string;\n  destinationName: string;\n  startDate: string;\n  endDate: string;\n  SI: string; // Summary of cover PDF URL\n  PW: string; // Policy wording PDF URL\n  KF: string;\n  HelpFile: string;\n  currency: string;\n  IPT: number; // IPT amount\n  IPTRate: number;\n  GrossPrice: number; // Quote price\n  screeningPremium: number;\n  IconURL: string;\n  SchemaID: number;\n  PolicyTypeID: number;\n  DestinationID: number;\n  PackageID: number;\n  MaxAgeAgebandID: number;\n  ScreeningID: number;\n  groupPerProduct: boolean;\n  priceOrder: number;\n  IPID: string;\n  typePolicyName: string;\n  typePackageName: string;\n  currencyHTMLEncoded: string;\n  AlterationID: string;\n  packageName: string;\n  isAnnual: number;\n  isBestBuy: number;\n  maxDaysPerTrip: number;\n  isBestBuyText: string;\n  isBestBuyLocation: number;\n  numberToSort: number;\n  coverLevel: number;\n  Discount: number;\n  netUW: number;\n  wbComm: number;\n  agentComm: number;\n  screeningPremiumPerPersonCSV: string;\n  screeningPremiumExcIPTPerPersonCSV: string;\n  isNotCoveredPerPersonCSV: string;\n  policytypeShortName: string;\n  SummaryCovers?: SummaryCover[];\n}\n\nexport interface TerracottaQuoteResponse {\n  Message: string;\n  quoteResults: TerracottaQuoteResult[];\n}\n\nexport interface TerracottaScreeningQuestionAnswer {\n  questionNumber: number;\n  answer: 'yes' | 'no';\n}\n\nexport interface TerracottaSavePolicyRequest {\n  userID: string;\n  userCode: string;\n  quoteID: string;\n  screeningQuestionAnswers: TerracottaScreeningQuestionAnswer[];\n  medicalScreeningReference?: string;\n  useDefaultAnswers?: number;\n  travelers?: TerracottaTraveler[];\n  contactDetails?: TerracottaContactDetails;\n}\n\nexport interface TerracottaEmailPolicyDocumentsRequest {\n  userID: string;\n  userCode: string;\n  policyID: string;\n  emailAddress: string;\n}\n\nexport interface TerracottaEmailPolicyDocumentsResponse {\n  emailSent: boolean;\n  message?: string;\n}\n\nexport interface TerracottaSavePolicyResponse {\n  Message: string;\n  policySaved: 'Yes' | 'No' | 'true' | 'false';\n  policyID: string;\n  certificate: string; // URL for policy certificate\n  PW: string; // Policy wording PDF URL\n  SI: string; // Summary of cover PDF URL\n  KF?: string; // Key Facts PDF URL\n  IPID?: string; // Insurance Product Information Document URL\n}\n\nexport interface TerracottaScreeningQuestion {\n  questionNumber: number;\n  question: string;\n  yesMessage: string;\n  noMessage: string;\n  yesAction: string;\n  noAction: string;\n  yesActionText: string;\n  noActionText: string;\n}\n\nexport interface TerracottaScreeningQuestionsResponse {\n  Message: string;\n  screeningQuestions: TerracottaScreeningQuestion[];\n}\n\nexport interface TerracottaProduct {\n  SchemaID: number;\n  SchemaName: string;\n}\n\nexport interface TerracottaProductListResponse {\n  Message: string;\n  ResultID: number;\n  Schemas: TerracottaProduct[];\n}\n\n/**\n * Helper function to decode HTML entities and format currency\n */\nfunction formatCurrencyLimit(htmlString: string): string {\n  if (!htmlString) return '';\n  \n  // Decode HTML entities\n  const textarea = document.createElement('textarea');\n  textarea.innerHTML = htmlString;\n  let decoded = textarea.value;\n  \n  // Additional manual replacements for common entities\n  decoded = decoded\n    .replace(/&euro;/gi, '€')\n    .replace(/&pound;/gi, '£')\n    .replace(/&dollar;/gi, '$')\n    .replace(/&amp;/gi, '&')\n    .replace(/&lt;/gi, '<')\n    .replace(/&gt;/gi, '>')\n    .replace(/&quot;/gi, '\"')\n    .replace(/&#39;/gi, \"'\");\n  \n  // Format numbers with thousand separators\n  // Match patterns like €32000 or euro32000 and add commas\n  decoded = decoded.replace(/([€£$]|euro|pound|dollar)?\\s*(\\d{4,})/gi, (match, currency, number) => {\n    const formattedNumber = parseInt(number).toLocaleString('en-US');\n    return currency ? `${currency}${formattedNumber}` : formattedNumber;\n  });\n  \n  // Fix spacing: \"Up to€32,000\" -> \"Up to €32,000\"\n  decoded = decoded.replace(/(\\w)([€£$])/g, '$1 $2');\n  \n  return decoded;\n}\n\n/**\n * SOAP XML Builder utility functions\n */\nclass SOAPBuilder {\n  static createEnvelope(body: string): string {\n    return `<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<soap:Envelope xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" \n               xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" \n               xmlns:soap=\"http://schemas.xmlsoap.org/soap/envelope/\">\n  <soap:Body>\n    ${body}\n  </soap:Body>\n</soap:Envelope>`;\n  }\n\n  static buildTravelerXML(traveler: TerracottaTraveler): string {\n    return `\n      <Traveller>\n        <TravellerNumber>${traveler.TravellerNumber}</TravellerNumber>\n        <Title>${traveler.Title}</Title>\n        <FirstName>${traveler.FirstName}</FirstName>\n        <LastName>${traveler.LastName}</LastName>\n        <DateOfBirth>${traveler.DateOfBirth}</DateOfBirth>\n        <Age>${traveler.Age}</Age>\n        <AgebandID>${traveler.AgebandID || 0}</AgebandID>\n        <TitleID>${traveler.TitleID || 0}</TitleID>\n        <minAge>${traveler.minAge || traveler.Age}</minAge>\n        <maxAge>${traveler.maxAge || traveler.Age}</maxAge>\n        <AlterationID>${traveler.AlterationID || ''}</AlterationID>\n        <msPrice>${traveler.msPrice || 0}</msPrice>\n        <msPriceExcIPT>${traveler.msPriceExcIPT || 0}</msPriceExcIPT>\n        <msConditions>${traveler.msConditions || ''}</msConditions>\n        <ScreeningInformation xsi:nil=\"true\" />\n      </Traveller>`;\n  }\n\n  static buildContactDetailsXML(contact: TerracottaContactDetails): string {\n    return `\n      <ContactDetails>\n        <Address>${contact.Address}</Address>\n        <Postcode>${contact.Postcode}</Postcode>\n        <Email>${contact.Email}</Email>\n        <Telephone>${contact.Telephone}</Telephone>\n        ${contact.VehicleMakeModel ? `<VehicleMakeModel>${contact.VehicleMakeModel}</VehicleMakeModel>` : ''}\n        ${contact.VehicleLicensePlate ? `<VehicleLicensePlate>${contact.VehicleLicensePlate}</VehicleLicensePlate>` : ''}\n        ${contact.VehicleYearManufacture ? `<VehicleYearManufacture>${contact.VehicleYearManufacture}</VehicleYearManufacture>` : ''}\n      </ContactDetails>`;\n  }\n\n  static buildQuoteDetailsXML(details: TerracottaQuoteDetails): string {\n    const travelersXML = details.Travellers.map(traveler => \n      this.buildTravelerXML(traveler)\n    ).join('');\n\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n\n    return `\n      <quoteDetails>\n        <ResidenceID>${parseInt(details.ResidenceID) || 1}</ResidenceID>\n        <TypePolicyID>${details.TypePolicyID}</TypePolicyID>\n        <TypePackageID>${parseInt(details.TypePackageID) || 1}</TypePackageID>\n        <Destination>${details.Destination}</Destination>\n        <StartDate>${details.StartDate}</StartDate>\n        <EndDate>${details.EndDate}</EndDate>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${details.includeAnnualQuotes !== undefined ? `<includeAnnualQuotes>${details.includeAnnualQuotes}</includeAnnualQuotes>` : ''}\n        ${details.includeUpsell !== undefined ? `<includeUpsell>${details.includeUpsell}</includeUpsell>` : ''}\n        ${details.currencyID ? `<currencyID>${details.currencyID}</currencyID>` : ''}\n        ${details.schemaIDFilter ? `<schemaIDFilter>${details.schemaIDFilter}</schemaIDFilter>` : ''}\n      </quoteDetails>`;\n  }\n\n  static buildScreeningAnswersXML(answers: TerracottaScreeningQuestionAnswer[]): string {\n    return '<screeningQuestionAnswers>' + \n      answers.map(answer => `\n        <screeningQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </screeningQuestionAnswer>`\n      ).join('') + '</screeningQuestionAnswers>';\n  }\n\n  static buildEligibilityAnswersXML(answers: TerracottaEligibilityQuestionAnswer[]): string {\n    return '<EligibilityQuestionAnswers>' + \n      answers.map(answer => `\n        <eligibilityQuestionAnswer>\n          <questionNumber>${answer.questionNumber}</questionNumber>\n          <answer>${answer.answer}</answer>\n        </eligibilityQuestionAnswer>`\n      ).join('') + '</EligibilityQuestionAnswers>';\n  }\n\n  static buildDynamicDetailsXML(details: TerracottaDynamicDetail[]): string {\n    return '<DynamicDetails>' + \n      details.map(detail => `\n        <DynamicDetail_SavedValue>\n          <Position>${detail.Position}</Position>\n          <FieldName>${detail.FieldName}</FieldName>\n          <FieldValue>${detail.FieldValue}</FieldValue>\n          <FieldSize>${detail.FieldSize}</FieldSize>\n        </DynamicDetail_SavedValue>`\n      ).join('') + '</DynamicDetails>';\n  }\n\n  static buildSpecificQuoteDetailsXML(details: any): string {\n    const travelersXML = details.Travellers.map((traveler: TerracottaTraveler) => \n      this.buildTravelerXML(traveler)\n    ).join('');\n\n    const contactXML = this.buildContactDetailsXML(details.ContactDetails);\n    \n    const dynamicDetailsXML = details.DynamicDetails ? \n      this.buildDynamicDetailsXML(details.DynamicDetails) : '';\n    \n    const screeningAnswersXML = details.screeningQuestionAnswers ? \n      this.buildScreeningAnswersXML(details.screeningQuestionAnswers) : '';\n    \n    const eligibilityAnswersXML = details.EligibilityQuestionAnswers ? \n      this.buildEligibilityAnswersXML(details.EligibilityQuestionAnswers) : '';\n\n    return `\n      <specificQuoteDetails>\n        <AlterationID>${details.AlterationID}</AlterationID>\n        <Travellers>\n          ${travelersXML}\n        </Travellers>\n        ${contactXML}\n        ${dynamicDetailsXML}\n        ${screeningAnswersXML}\n        ${eligibilityAnswersXML}\n      </specificQuoteDetails>`;\n  }\n}\n\n/**\n * XML Parser utility functions\n */\nclass XMLParser {\n  static getXMLParser(): any {\n    return new DOMParser();\n  }\n\n\n  static parseQuoteResponse(xmlText: string): TerracottaQuoteResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      // Check for parsing errors\n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const quoteResults: TerracottaQuoteResult[] = [];\n\n      // Select only child quoteResults, not the parent container\n      // Handle both ProvideQuotation and ProvideQuotationWithAlterations responses\n      let quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationResult > quoteResults > quoteResults');\n      \n      // If not found, try ProvideQuotationWithAlterationsResult\n      if (quoteResultNodes.length === 0) {\n        quoteResultNodes = xmlDoc.querySelectorAll('ProvideQuotationWithAlterationsResult > quoteResults > quoteResults');\n      }\n      \n      // If still not found, try without the parent Result element\n      if (quoteResultNodes.length === 0) {\n        quoteResultNodes = xmlDoc.querySelectorAll('quoteResults > quoteResults');\n      }\n      \n      console.log(`📊 Found ${quoteResultNodes.length} quote result nodes in XML`);\n      \n      quoteResultNodes.forEach((node: any) => {\n        // Only process nodes that have QuoteID (skip empty parent nodes)\n        const quoteID = node.querySelector('QuoteID')?.textContent || '';\n        if (!quoteID) {\n          console.log('⚠️ Skipping node without QuoteID');\n          return; // Skip empty nodes\n        }\n        console.log(`✅ Processing quote result with QuoteID: ${quoteID}`);\n        \n        const grossPriceText = node.querySelector('GrossPrice')?.textContent || '0';\n        const grossPriceValue = parseFloat(grossPriceText);\n        console.log(`💰 Extracted GrossPrice: ${grossPriceText} -> ${grossPriceValue}`);\n        \n        const result: TerracottaQuoteResult = {\n          QuoteID: quoteID,\n          schemaName: node.querySelector('schemaName')?.textContent || '',\n          policytypeName: node.querySelector('policytypeName')?.textContent || '',\n          residenceName: node.querySelector('residenceName')?.textContent || '',\n          destinationName: node.querySelector('destinationName')?.textContent || '',\n          startDate: node.querySelector('startDate')?.textContent || '',\n          endDate: node.querySelector('endDate')?.textContent || '',\n          SI: node.querySelector('SI')?.textContent || '',\n          PW: node.querySelector('PW')?.textContent || '',\n          KF: node.querySelector('KF')?.textContent || '',\n          HelpFile: node.querySelector('HelpFile')?.textContent || '',\n          currency: node.querySelector('currency')?.textContent || '',\n          IPT: parseFloat(node.querySelector('IPT')?.textContent || '0'),\n          IPTRate: parseFloat(node.querySelector('IPTRate')?.textContent || '0'),\n          GrossPrice: grossPriceValue,\n          screeningPremium: parseFloat(node.querySelector('screeningPremium')?.textContent || '0'),\n          IconURL: node.querySelector('IconURL')?.textContent || '',\n          SchemaID: parseInt(node.querySelector('SchemaID')?.textContent || '0'),\n          PolicyTypeID: parseInt(node.querySelector('PolicyTypeID')?.textContent || '0'),\n          DestinationID: parseInt(node.querySelector('DestinationID')?.textContent || '0'),\n          PackageID: parseInt(node.querySelector('PackageID')?.textContent || '0'),\n          MaxAgeAgebandID: parseInt(node.querySelector('MaxAgeAgebandID')?.textContent || '0'),\n          ScreeningID: parseInt(node.querySelector('ScreeningID')?.textContent || '0'),\n          groupPerProduct: node.querySelector('groupPerProduct')?.textContent === 'true',\n          priceOrder: parseInt(node.querySelector('priceOrder')?.textContent || '0'),\n          IPID: node.querySelector('IPID')?.textContent || '',\n          typePolicyName: node.querySelector('typePolicyName')?.textContent || '',\n          typePackageName: node.querySelector('typePackageName')?.textContent || '',\n          currencyHTMLEncoded: node.querySelector('currencyHTMLEncoded')?.textContent || '',\n          AlterationID: node.querySelector('AlterationID')?.textContent || '',\n          packageName: node.querySelector('packageName')?.textContent || '',\n          isAnnual: parseInt(node.querySelector('isAnnual')?.textContent || '0'),\n          isBestBuy: parseInt(node.querySelector('isBestBuy')?.textContent || '0'),\n          maxDaysPerTrip: parseInt(node.querySelector('maxDaysPerTrip')?.textContent || '0'),\n          isBestBuyText: node.querySelector('isBestBuyText')?.textContent || '',\n          isBestBuyLocation: parseInt(node.querySelector('isBestBuyLocation')?.textContent || '0'),\n          numberToSort: parseFloat(node.querySelector('numberToSort')?.textContent || '0'),\n          coverLevel: parseInt(node.querySelector('coverLevel')?.textContent || '0'),\n          Discount: parseFloat(node.querySelector('Discount')?.textContent || '0'),\n          netUW: parseFloat(node.querySelector('netUW')?.textContent || '0'),\n          wbComm: parseFloat(node.querySelector('wbComm')?.textContent || '0'),\n          agentComm: parseFloat(node.querySelector('agentComm')?.textContent || '0'),\n          screeningPremiumPerPersonCSV: node.querySelector('screeningPremiumPerPersonCSV')?.textContent || '',\n          screeningPremiumExcIPTPerPersonCSV: node.querySelector('screeningPremiumExcIPTPerPersonCSV')?.textContent || '',\n          isNotCoveredPerPersonCSV: node.querySelector('isNotCoveredPerPersonCSV')?.textContent || '',\n          policytypeShortName: node.querySelector('policytypeShortName')?.textContent || '',\n          SummaryCovers: []\n        };\n        \n        // Parse SummaryCovers\n        const summaryCoversNode = node.querySelector('SummaryCovers');\n        if (summaryCoversNode) {\n          const summaryCoverNodes = summaryCoversNode.querySelectorAll('summaryCover');\n          const summaryCovers: SummaryCover[] = [];\n          summaryCoverNodes.forEach((coverNode: any) => {\n            const rawLimit = coverNode.querySelector('Limit')?.textContent || '';\n            const rawExcess = coverNode.querySelector('Excess')?.textContent || '';\n            \n            summaryCovers.push({\n              name: coverNode.querySelector('name')?.textContent || '',\n              Limit: formatCurrencyLimit(rawLimit),\n              Excess: formatCurrencyLimit(rawExcess),\n              position: parseInt(coverNode.querySelector('position')?.textContent || '0')\n            });\n          });\n          result.SummaryCovers = summaryCovers;\n        }\n        \n        quoteResults.push(result);\n      });\n\n      return { Message: message, quoteResults };\n    } catch (error) {\n      console.error('Error parsing quote response:', error);\n      throw new Error(`Failed to parse quote response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseScreeningQuestionsResponse(xmlText: string): TerracottaScreeningQuestionsResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const screeningQuestions: TerracottaScreeningQuestion[] = [];\n\n      const questionNodes = xmlDoc.querySelectorAll('screeningQuestion');\n      questionNodes.forEach((node: any) => {\n        const question: TerracottaScreeningQuestion = {\n          questionNumber: parseInt(node.querySelector('questionNumber')?.textContent || '0'),\n          question: node.querySelector('Question')?.textContent || '',  // Capital Q to match API response\n          yesMessage: node.querySelector('yesMessage')?.textContent || '',\n          noMessage: node.querySelector('noMessage')?.textContent || '',\n          yesAction: node.querySelector('yesAction')?.textContent || '',\n          noAction: node.querySelector('noAction')?.textContent || '',\n          yesActionText: node.querySelector('yesActionText')?.textContent || '',\n          noActionText: node.querySelector('noActionText')?.textContent || ''\n        };\n        screeningQuestions.push(question);\n      });\n\n      return { Message: message, screeningQuestions };\n    } catch (error) {\n      console.error('Error parsing screening questions response:', error);\n      throw new Error(`Failed to parse screening questions response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseEmailPolicyDocumentsResponse(xmlText: string): TerracottaEmailPolicyDocumentsResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      console.log('🔍 Full EmailPolicyDocuments XML Response:', xmlText);\n      \n      // Check for success indicators\n      const messageNode = xmlDoc.querySelector('Message, message');\n      const emailSentNode = xmlDoc.querySelector('emailSent, EmailSent, success, Success');\n      \n      const message = messageNode?.textContent?.trim() || '';\n      const emailSentValue = emailSentNode?.textContent?.trim() || '';\n      \n      // Determine if email was sent successfully\n      const emailSent = \n        emailSentValue.toLowerCase() === 'true' || \n        emailSentValue.toLowerCase() === 'yes' ||\n        message.toLowerCase().includes('success') ||\n        message.toLowerCase().includes('sent');\n      \n      console.log('📧 Email sent status:', emailSent);\n      console.log('📧 Response message:', message);\n      \n      return {\n        emailSent,\n        message\n      };\n    } catch (error) {\n      console.error('❌ Error parsing EmailPolicyDocuments response:', error);\n      throw new Error(`Failed to parse EmailPolicyDocuments response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseSavePolicyResponse(xmlText: string): TerracottaSavePolicyResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      // Log the full XML for debugging\n      console.log('🔍 Full SavePolicyDetails XML Response:', xmlText);\n      \n      // Try different possible XML structures and field names\n      const messageNode = xmlDoc.querySelector('Message, message');\n      const policySavedNode = xmlDoc.querySelector('policySaved, PolicySaved');\n      const policyIDNode = xmlDoc.querySelector('policyID, PolicyID');\n      \n      // Try multiple variations for certificate\n      const certificateNode = xmlDoc.querySelector('certificate, Certificate, cert, Cert, CertificateURL, certificateURL');\n      const pwNode = xmlDoc.querySelector('PW, pw, PolicyWording, policyWording');\n      const siNode = xmlDoc.querySelector('SI, si, SummaryInsurance, summaryInsurance, SummaryCover, summaryCover');\n      const kfNode = xmlDoc.querySelector('KF, kf, KeyFacts, keyFacts');\n      const ipidNode = xmlDoc.querySelector('IPID, ipid');\n      \n      const message = messageNode?.textContent || '';\n      const policySavedRaw = policySavedNode?.textContent || 'No';\n      // Handle both \"Yes\"/\"No\" and \"true\"/\"false\" formats\n      const policySaved = (policySavedRaw === 'true' ? 'Yes' : policySavedRaw === 'false' ? 'No' : policySavedRaw) as 'Yes' | 'No' | 'true' | 'false';\n      const policyID = policyIDNode?.textContent || '';\n      const certificate = certificateNode?.textContent || '';\n      const pw = pwNode?.textContent || '';\n      const si = siNode?.textContent || '';\n      const kf = kfNode?.textContent || '';\n      const ipid = ipidNode?.textContent || '';\n      \n      console.log('📋 Parsed SavePolicyDetails fields:');\n      console.log('  - Message:', message);\n      console.log('  - policySaved (raw):', policySavedRaw);\n      console.log('  - policySaved (normalized):', policySaved);\n      console.log('  - policyID:', policyID);\n      console.log('  - certificate:', certificate || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - PW:', pw || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - SI:', si || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - KF:', kf || '⚠️ EMPTY/NOT FOUND');\n      console.log('  - IPID:', ipid || '⚠️ EMPTY/NOT FOUND');\n      \n      // List all XML nodes for debugging\n      console.log('📋 All XML element names in response:');\n      const allElements = xmlDoc.querySelectorAll('*');\n      const elementNames = Array.from(allElements as NodeListOf<Element>).map(el => el.tagName);\n      console.log('  Available elements:', Array.from(new Set(elementNames)).join(', '));\n\n      return {\n        Message: message,\n        policySaved: policySaved,\n        policyID: policyID,\n        certificate: certificate,\n        PW: pw,\n        SI: si,\n        KF: kf,\n        IPID: ipid\n      };\n    } catch (error) {\n      console.error('Error parsing save policy response:', error);\n      throw new Error(`Failed to parse save policy response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parseProductListResponse(xmlText: string): TerracottaProductListResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const schemas: TerracottaProduct[] = [];\n\n      const schemaNodes = xmlDoc.querySelectorAll('Schema');\n      schemaNodes.forEach((node: any) => {\n        const schema: TerracottaProduct = {\n          SchemaID: parseInt(node.querySelector('SchemaID')?.textContent || '0'),\n          SchemaName: node.querySelector('SchemaName')?.textContent || ''\n        };\n        schemas.push(schema);\n      });\n\n      return { Message: message, ResultID: resultID, Schemas: schemas };\n    } catch (error) {\n      console.error('Error parsing product list response:', error);\n      throw new Error(`Failed to parse product list response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parsePolicyTypeResponse(xmlText: string): TerracottaPolicyTypeResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const policyTypes: TerracottaPolicyType[] = [];\n\n      const policyTypeNodes = xmlDoc.querySelectorAll('TypePolicy');\n      policyTypeNodes.forEach((node: any) => {\n        const policyType: TerracottaPolicyType = {\n          TypePolicyID: node.querySelector('TypePolicyID')?.textContent || '',\n          TypePolicyName: node.querySelector('Name')?.textContent || '', // Changed from TypePolicyName to Name\n          Description: node.querySelector('IsAnnual')?.textContent === '1' ? 'Annual Policy' : 'Single Trip Policy'\n        };\n        policyTypes.push(policyType);\n      });\n\n      return { Message: message, ResultID: resultID, PolicyTypes: policyTypes };\n    } catch (error) {\n      console.error('Error parsing policy type response:', error);\n      throw new Error(`Failed to parse policy type response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  static parsePolicyTypeDestinationResponse(xmlText: string): TerracottaPolicyTypeDestinationResponse {\n    try {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(xmlText, 'text/xml');\n      \n      const parseError = xmlDoc.querySelector('parsererror');\n      if (parseError) {\n        throw new Error(`XML parsing error: ${parseError.textContent}`);\n      }\n\n      const message = xmlDoc.querySelector('message')?.textContent || '';\n      const resultID = parseInt(xmlDoc.querySelector('errorID')?.textContent || '0');\n      const policyTypeDestinations: TerracottaPolicyTypeDestination[] = [];\n\n      const destinationNodes = xmlDoc.querySelectorAll('PolicyTypeDestination');\n      destinationNodes.forEach((node: any) => {\n        const destination: TerracottaPolicyTypeDestination = {\n          TypePolicyDestinationID: node.querySelector('TypePolicyDestinationID')?.textContent || '',\n          Name: node.querySelector('Name')?.textContent || '',\n          PolicyTypeID: node.querySelector('PolicyTypeID')?.textContent || ''\n        };\n        policyTypeDestinations.push(destination);\n      });\n\n      return { Message: message, ResultID: resultID, PolicyTypeDestinations: policyTypeDestinations };\n    } catch (error) {\n      console.error('Error parsing policy type destination response:', error);\n      throw new Error(`Failed to parse policy type destination response: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n}\n\n/**\n * Main Terracotta Service Class\n */\nexport class TerracottaService {\n  private static instance: TerracottaService;\n  private userID: string;\n  private userCode: string;\n\n  constructor(userID: string = TERRACOTTA_USER_ID, userCode: string = TERRACOTTA_USER_CODE) {\n    this.userID = userID;\n    this.userCode = userCode;\n  }\n\n  static getInstance(userID?: string, userCode?: string): TerracottaService {\n    if (!TerracottaService.instance) {\n      TerracottaService.instance = new TerracottaService(\n        userID || TERRACOTTA_USER_ID, \n        userCode || TERRACOTTA_USER_CODE\n      );\n    }\n    return TerracottaService.instance;\n  }\n\n  /**\n   * Generic SOAP request method\n   */\n  private async makeSOAPRequest(method: string, requestBody: string): Promise<string> {\n    const soapEnvelope = SOAPBuilder.createEnvelope(requestBody);\n    \n    console.log('Making SOAP request via proxy to:', `${PROXY_BASE_URL}/${method}`);\n    console.log('SOAP Envelope:', soapEnvelope);\n    \n    try {\n      const response = await fetch(`${PROXY_BASE_URL}/${method}`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'text/xml; charset=utf-8'\n        },\n        body: soapEnvelope\n      });\n\n      console.log('SOAP Response Status:', response.status, response.statusText);\n      const responseText = await response.text();\n      console.log('SOAP Response Body:', responseText);\n\n      if (!response.ok) {\n        throw new Error(`SOAP request failed: ${response.status} ${response.statusText}`);\n      }\n\n      return responseText;\n    } catch (error) {\n      console.error('Proxy request failed:', error);\n      throw new Error(`Failed to connect to Terracotta API via proxy: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Test connection with HelloWorld method\n   */\n  async testConnection(): Promise<boolean> {\n    try {\n      const soapBody = `\n        <HelloWorld xmlns=\"WS-IntegratedQuote\">\n        </HelloWorld>`;\n\n      const responseText = await this.makeSOAPRequest('HelloWorld', soapBody);\n      console.log('Connection test successful:', responseText);\n      return true;\n    } catch (error) {\n      console.error('Connection test failed:', error);\n      return false;\n    }\n  }\n\n  /**\n   * Get available policy types for a specific schema\n   */\n  async getUserProductTypePolicy(schemaId: string): Promise<TerracottaPolicyTypeResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductTypePolicy - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      \n      const soapBody = `\n        <GetUserProductTypePolicy xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductTypePolicy>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductTypePolicy', soapBody);\n      return XMLParser.parsePolicyTypeResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductTypePolicy:', error);\n      throw new Error(`Failed to get policy types: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available destinations for a specific schema\n   */\n  async getUserProductDestination(schemaId: string): Promise<TerracottaPolicyTypeDestinationResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductDestination - schemaId:', schemaId, 'userID:', userID, 'userCode:', userCode);\n      \n      const soapBody = `\n        <GetUserProductDestination xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n          <schemaId>${schemaId}</schemaId>\n        </GetUserProductDestination>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductDestination', soapBody);\n      return XMLParser.parsePolicyTypeDestinationResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductDestination:', error);\n      throw new Error(`Failed to get policy type destinations: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Get available products for the user\n   */\n  async getUserProductList(): Promise<TerracottaProductListResponse> {\n    try {\n      const userID = parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID);\n      const userCode = parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE);\n      \n      console.log('getUserProductList - userID:', userID, 'userCode:', userCode);\n      console.log('getUserProductList - this.userID:', this.userID, 'this.userCode:', this.userCode);\n      \n      const soapBody = `\n        <GetUserProductList xmlns=\"WS-IntegratedQuote\">\n          <userID>${userID}</userID>\n          <userCode>${userCode}</userCode>\n        </GetUserProductList>`;\n\n      const responseText = await this.makeSOAPRequest('GetUserProductList', soapBody);\n      return XMLParser.parseProductListResponse(responseText);\n    } catch (error) {\n      console.error('Error in getUserProductList:', error);\n      throw new Error(`Failed to get user product list: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 1. Request for quotations\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\n   */\n  async provideQuotation(request: TerracottaQuoteRequest): Promise<TerracottaQuoteResponse> {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotation...');\n      console.log('📦 Request object:', request);\n      \n      const quoteDetailsXML = SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);\n      console.log('📄 Quote Details XML:', quoteDetailsXML);\n      \n      const soapBody = `\n        <ProvideQuotation xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          ${quoteDetailsXML}\n        </ProvideQuotation>`;\n\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotation`);\n      \n      const responseText = await this.makeSOAPRequest('ProvideQuotation', soapBody);\n      \n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      \n      const parsedResponse = XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotation:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Obtain Screening Questions\n   * Calls ScreeningQuestions to get screening questions for the selected quote\n   */\n  async getScreeningQuestions(quoteID: string): Promise<TerracottaScreeningQuestionsResponse> {\n    try {\n      console.log('🔄 Building SOAP request for ScreeningQuestions...');\n      console.log('📦 QuoteID:', quoteID);\n      console.log('👤 UserID:', this.userID, 'UserCode:', this.userCode);\n      \n      const soapBody = `\n        <ScreeningQuestions xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(this.userID) || parseInt(TERRACOTTA_USER_ID)}</userID>\n          <userCode>${parseInt(this.userCode) || parseInt(TERRACOTTA_USER_CODE)}</userCode>\n          <quoteID>${quoteID}</quoteID>\n        </ScreeningQuestions>`;\n\n      console.log('📤 SOAP Body for ScreeningQuestions:', soapBody);\n      \n      const responseText = await this.makeSOAPRequest('ScreeningQuestions', soapBody);\n      \n      console.log('📥 Raw Response from ScreeningQuestions:', responseText.substring(0, 1000));\n      \n      const parsed = XMLParser.parseScreeningQuestionsResponse(responseText);\n      console.log('✅ Parsed Screening Questions Response:', parsed);\n      console.log('📋 Number of questions:', parsed.screeningQuestions?.length || 0);\n      \n      if (parsed.screeningQuestions && parsed.screeningQuestions.length > 0) {\n        console.log('📝 Questions details:');\n        parsed.screeningQuestions.forEach((q, idx) => {\n          console.log(`  ${idx + 1}. Q${q.questionNumber}: ${q.question}`);\n        });\n      }\n      \n      return parsed;\n    } catch (error) {\n      console.error('❌ Error in getScreeningQuestions:', error);\n      console.error('Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get screening questions: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 2. Update quotes with additional covers\n   * Calls ProvideQuotationWithAlterations to get quotes with specific alterations/add-ons\n   * This method can only be called AFTER obtaining a quote reference from ProvideQuotation\n   */\n  async provideQuotationWithAlterations(request: TerracottaQuoteWithAlterationsRequest): Promise<TerracottaQuoteResponse> {\n    try {\n      console.log('🚀 Building SOAP request for ProvideQuotationWithAlterations...');\n      console.log('📦 Request object:', request);\n      \n      const specificQuoteDetailsXML = SOAPBuilder.buildSpecificQuoteDetailsXML(request.specificQuoteDetails);\n      console.log('📄 Specific Quote Details XML:', specificQuoteDetailsXML);\n      \n      const soapBody = `\n        <ProvideQuotationWithAlterations xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${specificQuoteDetailsXML}\n        </ProvideQuotationWithAlterations>`;\n\n      console.log('📤 Complete SOAP Body:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/ProvideQuotationWithAlterations`);\n      \n      const responseText = await this.makeSOAPRequest('ProvideQuotationWithAlterations', soapBody);\n      \n      console.log('📥 Raw SOAP Response received');\n      console.log('📄 Response length:', responseText.length, 'characters');\n      console.log('📄 First 500 chars of response:', responseText.substring(0, 500));\n      \n      const parsedResponse = XMLParser.parseQuoteResponse(responseText);\n      console.log('✅ Parsed response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in provideQuotationWithAlterations:', error);\n      console.error('❌ Error type:', error instanceof Error ? error.constructor.name : typeof error);\n      console.error('❌ Error message:', error instanceof Error ? error.message : String(error));\n      throw new Error(`Failed to get quotes with alterations from Terracotta: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 3. Save a quote as a Live policy\n   * Calls SavePolicyDetails to convert the quote into a live policy\n   */\n  async savePolicyDetails(request: TerracottaSavePolicyRequest): Promise<TerracottaSavePolicyResponse> {\n    try {\n      console.log('🚀 Building SOAP request for SavePolicyDetails...');\n      console.log('📦 Request object:', request);\n      console.log('👥 Travelers in request:', JSON.stringify(request.travelers, null, 2));\n      console.log('📧 Contact Details in request:', JSON.stringify(request.contactDetails, null, 2));\n      \n      const screeningAnswersXML = SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);\n      \n      // Build travelers XML if provided\n      if (request.travelers && request.travelers.length > 0) {\n        console.log(`🔨 Building XML for ${request.travelers.length} traveler(s)...`);\n        request.travelers.forEach((t, idx) => {\n          console.log(`  Traveler ${idx + 1}: ${t.Title} ${t.FirstName} ${t.LastName}, Age: ${t.Age}, DOB: ${t.DateOfBirth}`);\n        });\n      }\n      \n      const travelersXML = request.travelers && request.travelers.length > 0\n        ? request.travelers.map(traveler => SOAPBuilder.buildTravelerXML(traveler)).join('')\n        : '';\n      \n      // Build contact details XML if provided\n      const contactDetailsXML = request.contactDetails\n        ? SOAPBuilder.buildContactDetailsXML(request.contactDetails)\n        : '';\n      \n      const soapBody = `\n        <SavePolicyDetails xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <quoteID>${request.quoteID}</quoteID>\n          ${screeningAnswersXML}\n          ${request.medicalScreeningReference ? `<medicalScreeningReference>${request.medicalScreeningReference}</medicalScreeningReference>` : '<medicalScreeningReference>string</medicalScreeningReference>'}\n          ${request.useDefaultAnswers !== undefined ? `<useDefaultAnswers>${request.useDefaultAnswers}</useDefaultAnswers>` : '<useDefaultAnswers>1</useDefaultAnswers>'}\n          ${travelersXML}\n          ${contactDetailsXML}\n        </SavePolicyDetails>`;\n\n      console.log('📤 Complete SOAP Body for SavePolicyDetails:', soapBody);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/SavePolicyDetails`);\n\n      const responseText = await this.makeSOAPRequest('SavePolicyDetails', soapBody);\n      \n      console.log('📥 Raw SOAP Response from SavePolicyDetails:', responseText);\n      \n      const parsedResponse = XMLParser.parseSavePolicyResponse(responseText);\n      console.log('✅ Parsed SavePolicyDetails response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in savePolicyDetails:', error);\n      throw new Error(`Failed to save policy details: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * 4. Email Policy Documents\n   * Calls EmailPolicyDocuments to send policy documents to the policy holder's email\n   */\n  async emailPolicyDocuments(request: TerracottaEmailPolicyDocumentsRequest): Promise<TerracottaEmailPolicyDocumentsResponse> {\n    try {\n      console.log('🚀 Building SOAP request for EmailPolicyDocuments...');\n      console.log('📦 Request object:', request);\n      \n      const soapBody = `\n        <EmailPolicyDocuments xmlns=\"WS-IntegratedQuote\">\n          <userID>${parseInt(request.userID)}</userID>\n          <userCode>${parseInt(request.userCode)}</userCode>\n          <policyID>${request.policyID}</policyID>\n          <emailAddress>${request.emailAddress}</emailAddress>\n        </EmailPolicyDocuments>`;\n\n      console.log('📤 Complete SOAP Body for EmailPolicyDocuments:', soapBody);\n      console.log('📧 Sending policy documents to:', request.emailAddress);\n      console.log('🌐 Sending SOAP request to:', `${PROXY_BASE_URL}/EmailPolicyDocuments`);\n\n      const responseText = await this.makeSOAPRequest('EmailPolicyDocuments', soapBody);\n      \n      console.log('📥 Raw SOAP Response from EmailPolicyDocuments:', responseText);\n      \n      const parsedResponse = XMLParser.parseEmailPolicyDocumentsResponse(responseText);\n      console.log('✅ Parsed EmailPolicyDocuments response:', parsedResponse);\n      \n      return parsedResponse;\n    } catch (error) {\n      console.error('❌ Error in emailPolicyDocuments:', error);\n      throw new Error(`Failed to email policy documents: ${error instanceof Error ? error.message : 'Unknown error'}`);\n    }\n  }\n\n  /**\n   * Utility method to convert frontend data to Terracotta format\n   */\n  static convertToTerracottaFormat(formData: any, availablePolicyTypes?: TerracottaPolicyType[]): TerracottaQuoteRequest {\n    console.log('Converting form data to Terracotta format:', formData);\n    \n    // Use DUMMY data for travelers to get quotation\n    // Real traveler data will be collected later in the payment step\n    const travelers: TerracottaTraveler[] = Array.from({ length: formData.numberOfTravelers || 1 }, (_, index) => {\n      const dummyAge = 30; // Default dummy age\n      const dummyDateOfBirth = calculateDateOfBirth(dummyAge);\n      \n      console.log(`Traveler ${index + 1} (DUMMY): DOB=${dummyDateOfBirth}, Age=${dummyAge}`);\n      \n      return {\n        TravellerNumber: index + 1,\n        Title: 'Mr', // Dummy title\n        FirstName: 'John', // Dummy first name\n        LastName: 'Doe', // Dummy last name\n        DateOfBirth: formatDateForTerracotta(dummyDateOfBirth),\n        Age: dummyAge,\n        AgebandID: getAgebandID(dummyAge),\n        TitleID: getTitleID('Mr'),\n        minAge: dummyAge,\n        maxAge: dummyAge,\n        ScreeningInformation: null\n      };\n    });\n\n    // Use DUMMY contact details to get quotation\n    // Real contact details will be collected later in the payment step\n    const contactDetails: TerracottaContactDetails = {\n      Address: '123 Main Street', // Dummy address\n      Postcode: '12345', // Dummy postcode\n      Email: 'customer@example.com', // Dummy email\n      Telephone: '+302101234567', // Dummy telephone\n      VehicleMakeModel: formData.vehicleMakeModel,\n      VehicleLicensePlate: formData.vehicleLicensePlate,\n      VehicleYearManufacture: formData.vehicleYearManufacture\n    };\n\n           // Convert trip details using actual user data\n           const quoteDetails: TerracottaQuoteDetails = {\n             ResidenceID: getResidenceID(formData.countryOfResidence),\n             TypePolicyID: getTypePolicyID(formData.tripType, availablePolicyTypes),\n             TypePackageID: '1', // Fixed value as requested (string)\n             Destination: formData.destination || 'Europe',\n             StartDate: formatDateForTerracotta(formData.startDate),\n             EndDate: formatDateForTerracotta(formData.endDate),\n             Travellers: travelers,\n             ContactDetails: contactDetails,\n             includeAnnualQuotes: formData.tripType === 'annual' ? 1 : 0,\n             includeUpsell: 0, // Simplified for now\n             currencyID: 1, // EUR\n             schemaIDFilter: '717' // Use schema 717\n           };\n\n    console.log('Converted Terracotta request:', quoteDetails);\n    \n    // Use fixed values as requested\n    return {\n      userID: '4072',\n      userCode: '111427',\n      quoteDetails\n    };\n  }\n}\n\n/**\n * Utility functions for data conversion\n */\n\nfunction formatDateForTerracotta(dateString: string): string {\n  if (!dateString) return '';\n  \n  // Handle different date formats\n  if (dateString.includes('/')) {\n    // Handle DD/MM/YYYY format\n    const parts = dateString.split('/');\n    if (parts.length === 3) {\n      const [day, month, year] = parts;\n      return `${year}/${month}/${day}`;\n    }\n  }\n  \n  // Handle YYYY-MM-DD format\n  if (dateString.includes('-')) {\n    return dateString.replace(/-/g, '/');\n  }\n  \n  return dateString;\n}\n\nfunction calculateDateOfBirth(age: number): string {\n  const currentYear = new Date().getFullYear();\n  const birthYear = currentYear - age;\n  // Use January 1st as default date\n  return `${birthYear}/01/01`;\n}\n\nfunction calculateAgeFromDateOfBirth(dateOfBirth: string): number {\n  const birthDate = new Date(dateOfBirth);\n  const today = new Date();\n  let age = today.getFullYear() - birthDate.getFullYear();\n  const monthDiff = today.getMonth() - birthDate.getMonth();\n  \n  if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {\n    age--;\n  }\n  \n  return Math.max(0, age);\n}\n\nexport function getResidenceID(country: string): string {\n  // Map countries to Terracotta Residence IDs\n  // Based on Terracotta API - Greece is ResidenceID 24\n  const residenceMap: { [key: string]: string } = {\n    'Greece': '24',     // Correct ResidenceID for Greece\n    'Austria': '4',\n    'Belgium': '6',\n    'Bulgaria': '10',\n    'Croatia (Hrvatska)': '14',\n    'Czech Republic': '16',\n    'Denmark': '17',\n    'Estonia': '20',\n    'Finland': '21',\n    'France': '22',\n    'Germany': '23',\n    'Hungary': '27',\n    'Iceland': '28',\n    'Italy': '33',\n    'Latvia': '38',\n    'Liechtenstein': '40',\n    'Lithuania': '41',\n    'Luxembourg': '42',\n    'Malta': '93',\n    'Netherlands': '47',\n    'Norway': '49',\n    'Poland': '53',\n    'Portugal': '54',\n    'Republic of Cyprus': '283',\n    'Republic of Ireland': '19',\n    'Romania': '55',\n    'Slovak Republic': '59',\n    'Slovenia': '60',\n    'Spain': '62',\n    'Sweden': '63'\n  };\n  \n  return residenceMap[country] || '24'; // Default to Greece\n}\n\nexport function getTypePolicyID(tripType: string, availablePolicyTypes?: TerracottaPolicyType[]): string {\n  // If we have SOAP data, use it to find the correct TypePolicyID\n  if (availablePolicyTypes && availablePolicyTypes.length > 0) {\n    const policyType = availablePolicyTypes.find(pt => {\n      const name = pt.TypePolicyName.toLowerCase();\n      switch (tripType) {\n        case 'single':\n          return name.includes('single') && !name.includes('annual');\n        case 'annual':\n          return name.includes('annual') || name.includes('multi-trip');\n        case 'longstay':\n          return name.includes('longstay') || name.includes('long stay');\n        case 'comprehensive':\n          return name.includes('comprehensive');\n        default:\n          return false;\n      }\n    });\n    \n    if (policyType) {\n      console.log(`✅ Found TypePolicyID ${policyType.TypePolicyID} for trip type '${tripType}' (${policyType.TypePolicyName})`);\n      return policyType.TypePolicyID;\n    }\n  }\n  \n  // Fallback to hardcoded mappings if SOAP data not available\n  console.log(`⚠️ Using fallback mapping for trip type '${tripType}'`);\n  const policyMap: { [key: string]: string } = {\n    'single': '2',        // Single Trip TypePolicyID\n    'annual': '23',       // Annual Multi-Trip TypePolicyID\n    'longstay': '3',      // Longstay TypePolicyID\n    'comprehensive': '2'  // Use Single Trip as default\n  };\n  \n  return policyMap[tripType] || '2'; // Default to Single Trip TypePolicyID\n}\n\nfunction getTypePackageID(tripType: string): string {\n  // Use correct Package IDs (not SchemaIDs)\n  // Package IDs are typically 1, 2, 3, etc. for different coverage levels\n  const packageMap: { [key: string]: string } = {\n    'single': '1',        // Basic package for single trip\n    'annual': '1',        // Basic package for annual\n    'comprehensive': '2'  // Higher coverage package\n  };\n  \n  return packageMap[tripType] || '1'; // Default to basic package\n}\n\nexport function getAgebandID(age: number): number {\n  // Map age to Terracotta Ageband ID\n  if (age <= 17) return 1;\n  if (age <= 30) return 2;\n  if (age <= 40) return 3;\n  if (age <= 50) return 4;\n  if (age <= 60) return 5;\n  if (age <= 70) return 6;\n  return 7; // 70+\n}\n\nexport function getTitleID(title: string): number {\n  // Map title to Terracotta Title ID\n  const titleMap: { [key: string]: number } = {\n    'Mr': 1,\n    'Mrs': 2,\n    'Miss': 3,\n    'Ms': 4,\n    'Dr': 5,\n    'Prof': 6\n  };\n  \n  return titleMap[title] || 1; // Default to Mr\n}\n\nfunction getCurrencyID(currency: string): number {\n  // Map currency to Terracotta Currency ID\n  const currencyMap: { [key: string]: number } = {\n    'EUR': 1,\n    'USD': 2,\n    'GBP': 3,\n    'CHF': 4\n  };\n  \n  return currencyMap[currency] || 1; // Default to EUR\n}\n\nexport default TerracottaService;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}