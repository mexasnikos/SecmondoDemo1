{"ast":null,"code":"var _TerracottaService;/**\r\n * Terracotta Insurance Quote Integration Service\r\n * \r\n * This service handles all communication with the Terracotta Integrated Quote web service\r\n * using SOAP protocol. It provides methods for:\r\n * - Requesting quotes (ProvideQuotation)\r\n * - Updating quotes with additional covers (ProvideQuotationWithAlterations)\r\n * - Getting screening questions (ScreeningQuestions)\r\n * - Saving policy details (SavePolicyDetails)\r\n */// Terracotta API Configuration\nconst TERRACOTTA_BASE_URL='https://www.asuaonline.com/ws/integratedquote.asmx';const TERRACOTTA_USER_ID='4072';const TERRACOTTA_USER_CODE='111427';// TypeScript interfaces for Terracotta API data structures\n/**\r\n * SOAP XML Builder utility functions\r\n */class SOAPBuilder{static createEnvelope(body){return\"<?xml version=\\\"1.0\\\" encoding=\\\"utf-8\\\"?>\\n<soap:Envelope xmlns:xsi=\\\"http://www.w3.org/2001/XMLSchema-instance\\\" \\n               xmlns:xsd=\\\"http://www.w3.org/2001/XMLSchema\\\" \\n               xmlns:soap=\\\"http://schemas.xmlsoap.org/soap/envelope/\\\">\\n  <soap:Body>\\n    \".concat(body,\"\\n  </soap:Body>\\n</soap:Envelope>\");}static buildTravelerXML(traveler){return\"\\n      <Travellers>\\n        <TravellerNumber>\".concat(traveler.TravellerNumber,\"</TravellerNumber>\\n        <Title>\").concat(traveler.Title,\"</Title>\\n        <FirstName>\").concat(traveler.FirstName,\"</FirstName>\\n        <LastName>\").concat(traveler.LastName,\"</LastName>\\n        <DateOfBirth>\").concat(traveler.DateOfBirth,\"</DateOfBirth>\\n        <Age>\").concat(traveler.Age,\"</Age>\\n      </Travellers>\");}static buildContactDetailsXML(contact){return\"\\n      <ContactDetails>\\n        <Address>\".concat(contact.Address,\"</Address>\\n        <Postcode>\").concat(contact.Postcode,\"</Postcode>\\n        <Email>\").concat(contact.Email,\"</Email>\\n        <Telephone>\").concat(contact.Telephone,\"</Telephone>\\n      </ContactDetails>\");}static buildQuoteDetailsXML(details){const travelersXML=details.Travellers.map(traveler=>this.buildTravelerXML(traveler)).join('');const contactXML=this.buildContactDetailsXML(details.ContactDetails);return\"\\n      <quoteDetails>\\n        <ResidenceID>\".concat(parseInt(details.ResidenceID)||1,\"</ResidenceID>\\n        <TypePolicyID>\").concat(details.TypePolicyID,\"</TypePolicyID>\\n        <TypePackageID>\").concat(parseInt(details.TypePackageID)||1,\"</TypePackageID>\\n        <Destination>\").concat(details.Destination,\"</Destination>\\n        <StartDate>\").concat(details.StartDate,\"</StartDate>\\n        <EndDate>\").concat(details.EndDate,\"</EndDate>\\n        \").concat(travelersXML,\"\\n        \").concat(contactXML,\"\\n      </quoteDetails>\");}static buildScreeningAnswersXML(answers){return'<screeningQuestionAnswers>'+answers.map(answer=>\"\\n        <screeningQuestionAnswer>\\n          <questionNumber>\".concat(answer.questionNumber,\"</questionNumber>\\n          <answer>\").concat(answer.answer,\"</answer>\\n        </screeningQuestionAnswer>\")).join('')+'</screeningQuestionAnswers>';}}/**\r\n * XML Parser utility functions\r\n */class XMLParser{static parseQuoteResponse(xmlText){try{var _xmlDoc$querySelector;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');// Check for parsing errors\nconst parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector=xmlDoc.querySelector('Message'))===null||_xmlDoc$querySelector===void 0?void 0:_xmlDoc$querySelector.textContent)||'';const quoteResults=[];const quoteResultNodes=xmlDoc.querySelectorAll('quoteResults');quoteResultNodes.forEach(node=>{var _node$querySelector,_node$querySelector2,_node$querySelector3,_node$querySelector4,_node$querySelector5,_node$querySelector6,_node$querySelector7,_node$querySelector8;const result={QuoteID:((_node$querySelector=node.querySelector('QuoteID'))===null||_node$querySelector===void 0?void 0:_node$querySelector.textContent)||'',schemaName:((_node$querySelector2=node.querySelector('schemaName'))===null||_node$querySelector2===void 0?void 0:_node$querySelector2.textContent)||'',policyTypeName:((_node$querySelector3=node.querySelector('policyTypeName'))===null||_node$querySelector3===void 0?void 0:_node$querySelector3.textContent)||'',SI:((_node$querySelector4=node.querySelector('SI'))===null||_node$querySelector4===void 0?void 0:_node$querySelector4.textContent)||'',PW:((_node$querySelector5=node.querySelector('PW'))===null||_node$querySelector5===void 0?void 0:_node$querySelector5.textContent)||'',Currency:((_node$querySelector6=node.querySelector('Currency'))===null||_node$querySelector6===void 0?void 0:_node$querySelector6.textContent)||'',IPT:parseFloat(((_node$querySelector7=node.querySelector('IPT'))===null||_node$querySelector7===void 0?void 0:_node$querySelector7.textContent)||'0'),GrossPrice:parseFloat(((_node$querySelector8=node.querySelector('GrossPrice'))===null||_node$querySelector8===void 0?void 0:_node$querySelector8.textContent)||'0')};quoteResults.push(result);});return{Message:message,quoteResults};}catch(error){console.error('Error parsing quote response:',error);throw new Error(\"Failed to parse quote response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseScreeningQuestionsResponse(xmlText){try{var _xmlDoc$querySelector2;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector2=xmlDoc.querySelector('Message'))===null||_xmlDoc$querySelector2===void 0?void 0:_xmlDoc$querySelector2.textContent)||'';const screeningQuestions=[];const questionNodes=xmlDoc.querySelectorAll('screeningQuestion');questionNodes.forEach(node=>{var _node$querySelector9,_node$querySelector0,_node$querySelector1,_node$querySelector10,_node$querySelector11,_node$querySelector12,_node$querySelector13,_node$querySelector14;const question={questionNumber:parseInt(((_node$querySelector9=node.querySelector('questionNumber'))===null||_node$querySelector9===void 0?void 0:_node$querySelector9.textContent)||'0'),question:((_node$querySelector0=node.querySelector('question'))===null||_node$querySelector0===void 0?void 0:_node$querySelector0.textContent)||'',yesMessage:((_node$querySelector1=node.querySelector('yesMessage'))===null||_node$querySelector1===void 0?void 0:_node$querySelector1.textContent)||'',noMessage:((_node$querySelector10=node.querySelector('noMessage'))===null||_node$querySelector10===void 0?void 0:_node$querySelector10.textContent)||'',yesAction:((_node$querySelector11=node.querySelector('yesAction'))===null||_node$querySelector11===void 0?void 0:_node$querySelector11.textContent)||'',noAction:((_node$querySelector12=node.querySelector('noAction'))===null||_node$querySelector12===void 0?void 0:_node$querySelector12.textContent)||'',yesActionText:((_node$querySelector13=node.querySelector('yesActionText'))===null||_node$querySelector13===void 0?void 0:_node$querySelector13.textContent)||'',noActionText:((_node$querySelector14=node.querySelector('noActionText'))===null||_node$querySelector14===void 0?void 0:_node$querySelector14.textContent)||''};screeningQuestions.push(question);});return{Message:message,screeningQuestions};}catch(error){console.error('Error parsing screening questions response:',error);throw new Error(\"Failed to parse screening questions response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseSavePolicyResponse(xmlText){try{var _xmlDoc$querySelector3,_xmlDoc$querySelector4,_xmlDoc$querySelector5,_xmlDoc$querySelector6,_xmlDoc$querySelector7,_xmlDoc$querySelector8;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}return{Message:((_xmlDoc$querySelector3=xmlDoc.querySelector('Message'))===null||_xmlDoc$querySelector3===void 0?void 0:_xmlDoc$querySelector3.textContent)||'',policySaved:((_xmlDoc$querySelector4=xmlDoc.querySelector('policySaved'))===null||_xmlDoc$querySelector4===void 0?void 0:_xmlDoc$querySelector4.textContent)||'No',policyID:((_xmlDoc$querySelector5=xmlDoc.querySelector('policyID'))===null||_xmlDoc$querySelector5===void 0?void 0:_xmlDoc$querySelector5.textContent)||'',certificate:((_xmlDoc$querySelector6=xmlDoc.querySelector('certificate'))===null||_xmlDoc$querySelector6===void 0?void 0:_xmlDoc$querySelector6.textContent)||'',PW:((_xmlDoc$querySelector7=xmlDoc.querySelector('PW'))===null||_xmlDoc$querySelector7===void 0?void 0:_xmlDoc$querySelector7.textContent)||'',SI:((_xmlDoc$querySelector8=xmlDoc.querySelector('SI'))===null||_xmlDoc$querySelector8===void 0?void 0:_xmlDoc$querySelector8.textContent)||''};}catch(error){console.error('Error parsing save policy response:',error);throw new Error(\"Failed to parse save policy response: \".concat(error instanceof Error?error.message:'Unknown error'));}}static parseProductListResponse(xmlText){try{var _xmlDoc$querySelector9,_xmlDoc$querySelector0;const parser=new DOMParser();const xmlDoc=parser.parseFromString(xmlText,'text/xml');const parseError=xmlDoc.querySelector('parsererror');if(parseError){throw new Error(\"XML parsing error: \".concat(parseError.textContent));}const message=((_xmlDoc$querySelector9=xmlDoc.querySelector('message'))===null||_xmlDoc$querySelector9===void 0?void 0:_xmlDoc$querySelector9.textContent)||'';const resultID=parseInt(((_xmlDoc$querySelector0=xmlDoc.querySelector('errorID'))===null||_xmlDoc$querySelector0===void 0?void 0:_xmlDoc$querySelector0.textContent)||'0');const schemas=[];const schemaNodes=xmlDoc.querySelectorAll('Schema');schemaNodes.forEach(node=>{var _node$querySelector15,_node$querySelector16;const schema={SchemaID:parseInt(((_node$querySelector15=node.querySelector('SchemaID'))===null||_node$querySelector15===void 0?void 0:_node$querySelector15.textContent)||'0'),SchemaName:((_node$querySelector16=node.querySelector('SchemaName'))===null||_node$querySelector16===void 0?void 0:_node$querySelector16.textContent)||''};schemas.push(schema);});return{Message:message,ResultID:resultID,Schemas:schemas};}catch(error){console.error('Error parsing product list response:',error);throw new Error(\"Failed to parse product list response: \".concat(error instanceof Error?error.message:'Unknown error'));}}}/**\r\n * Main Terracotta Service Class\r\n */export class TerracottaService{constructor(){let userID=arguments.length>0&&arguments[0]!==undefined?arguments[0]:TERRACOTTA_USER_ID;let userCode=arguments.length>1&&arguments[1]!==undefined?arguments[1]:TERRACOTTA_USER_CODE;this.userID=void 0;this.userCode=void 0;this.userID=userID;this.userCode=userCode;}static getInstance(userID,userCode){if(!TerracottaService.instance){TerracottaService.instance=new TerracottaService(userID,userCode);}return TerracottaService.instance;}/**\r\n   * Generic SOAP request method\r\n   */async makeSOAPRequest(method,requestBody){const soapEnvelope=SOAPBuilder.createEnvelope(requestBody);console.log('Making SOAP request to:',TERRACOTTA_BASE_URL);console.log('SOAP Envelope:',soapEnvelope);const response=await fetch(TERRACOTTA_BASE_URL,{method:'POST',headers:{'Content-Type':'text/xml; charset=utf-8','SOAPAction':\"WS-IntegratedQuote/\".concat(method)},body:soapEnvelope});console.log('SOAP Response Status:',response.status,response.statusText);const responseText=await response.text();console.log('SOAP Response Body:',responseText);if(!response.ok){throw new Error(\"SOAP request failed: \".concat(response.status,\" \").concat(response.statusText));}return responseText;}/**\r\n   * Test connection with HelloWorld method\r\n   */async testConnection(){try{const soapBody=\"\\n        <HelloWorld xmlns=\\\"WS-IntegratedQuote\\\">\\n        </HelloWorld>\";const responseText=await this.makeSOAPRequest('HelloWorld',soapBody);console.log('Connection test successful:',responseText);return true;}catch(error){console.error('Connection test failed:',error);return false;}}/**\r\n   * Get available products for the user\r\n   */async getUserProductList(){try{const soapBody=\"\\n        <GetUserProductList xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(this.userID),\"</userID>\\n          <userCode>\").concat(parseInt(this.userCode),\"</userCode>\\n        </GetUserProductList>\");const responseText=await this.makeSOAPRequest('GetUserProductList',soapBody);return XMLParser.parseProductListResponse(responseText);}catch(error){console.error('Error in getUserProductList:',error);throw new Error(\"Failed to get user product list: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\r\n   * 1. Request for quotations\r\n   * Calls the ProvideQuotation method to obtain a list of possible quotes\r\n   */async provideQuotation(request){try{const quoteDetailsXML=SOAPBuilder.buildQuoteDetailsXML(request.quoteDetails);const soapBody=\"\\n        <ProvideQuotation xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          \").concat(quoteDetailsXML,\"\\n        </ProvideQuotation>\");const responseText=await this.makeSOAPRequest('ProvideQuotation',soapBody);return XMLParser.parseQuoteResponse(responseText);}catch(error){console.error('Error in provideQuotation:',error);throw new Error(\"Failed to get quotes from Terracotta: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\r\n   * 3. Obtain Screening Questions\r\n   * Calls ScreeningQuestions to get screening questions for the selected quote\r\n   */async getScreeningQuestions(quoteID){try{const soapBody=\"\\n        <ScreeningQuestions xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(this.userID),\"</userID>\\n          <userCode>\").concat(parseInt(this.userCode),\"</userCode>\\n          <quoteID>\").concat(quoteID,\"</quoteID>\\n        </ScreeningQuestions>\");const responseText=await this.makeSOAPRequest('ScreeningQuestions',soapBody);return XMLParser.parseScreeningQuestionsResponse(responseText);}catch(error){console.error('Error in getScreeningQuestions:',error);throw new Error(\"Failed to get screening questions: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\r\n   * 4. Save a quote as a Live policy\r\n   * Calls SavePolicyDetails to convert the quote into a live policy\r\n   */async savePolicyDetails(request){try{const screeningAnswersXML=SOAPBuilder.buildScreeningAnswersXML(request.screeningQuestionAnswers);const soapBody=\"\\n        <SavePolicyDetails xmlns=\\\"WS-IntegratedQuote\\\">\\n          <userID>\".concat(parseInt(request.userID),\"</userID>\\n          <userCode>\").concat(parseInt(request.userCode),\"</userCode>\\n          <quoteID>\").concat(request.quoteID,\"</quoteID>\\n          \").concat(screeningAnswersXML,\"\\n          \").concat(request.medicalScreeningReference?\"<medicalScreeningReference>\".concat(request.medicalScreeningReference,\"</medicalScreeningReference>\"):'',\"\\n        </SavePolicyDetails>\");const responseText=await this.makeSOAPRequest('SavePolicyDetails',soapBody);return XMLParser.parseSavePolicyResponse(responseText);}catch(error){console.error('Error in savePolicyDetails:',error);throw new Error(\"Failed to save policy details: \".concat(error instanceof Error?error.message:'Unknown error'));}}/**\r\n   * Utility method to convert frontend data to Terracotta format\r\n   */static convertToTerracottaFormat(formData){var _formData$billingAddr,_formData$billingAddr2,_formData$travelers$,_formData$travelers$2;// Convert travelers to Terracotta format\nconst travelers=formData.travelers.map((traveler,index)=>({TravellerNumber:index+1,Title:'Mr',// Default title, could be made configurable\nFirstName:traveler.firstName,LastName:traveler.lastName,DateOfBirth:formatDateForTerracotta(calculateDateOfBirth(traveler.age)),Age:parseInt(traveler.age)}));// Convert contact details\nconst contactDetails={Address:((_formData$billingAddr=formData.billingAddress)===null||_formData$billingAddr===void 0?void 0:_formData$billingAddr.street)||'123 Main Street',Postcode:((_formData$billingAddr2=formData.billingAddress)===null||_formData$billingAddr2===void 0?void 0:_formData$billingAddr2.postalCode)||'12345',Email:((_formData$travelers$=formData.travelers[0])===null||_formData$travelers$===void 0?void 0:_formData$travelers$.email)||'test@example.com',Telephone:((_formData$travelers$2=formData.travelers[0])===null||_formData$travelers$2===void 0?void 0:_formData$travelers$2.phone)||'+30123456789'};// Convert trip details\nconst quoteDetails={ResidenceID:getResidenceID(formData.countryOfResidence),TypePolicyID:getTypePolicyID(formData.tripType),TypePackageID:getTypePackageID(formData.tripType),Destination:formData.destination||'Europe',StartDate:formatDateForTerracotta(formData.startDate||'2024-06-01'),EndDate:formatDateForTerracotta(formData.endDate||'2024-06-15'),Travellers:travelers,ContactDetails:contactDetails};return{userID:TERRACOTTA_USER_ID,userCode:TERRACOTTA_USER_CODE,quoteDetails};}}/**\r\n * Utility functions for data conversion\r\n */_TerracottaService=TerracottaService;TerracottaService.instance=void 0;function formatDateForTerracotta(dateString){if(!dateString)return'';// Convert from YYYY-MM-DD to YYYY/MM/DD\nreturn dateString.replace(/-/g,'/');}function calculateDateOfBirth(age){const currentYear=new Date().getFullYear();const birthYear=currentYear-age;// Use January 1st as default date\nreturn\"\".concat(birthYear,\"/01/01\");}function getResidenceID(country){// Map countries to Terracotta Residence IDs\nconst residenceMap={'Greece':'GR','Germany':'DE','United Kingdom':'UK','France':'FR','Italy':'IT','Spain':'ES','Netherlands':'NL','Belgium':'BE','Austria':'AT','Switzerland':'CH','United States':'US','Canada':'CA','Australia':'AU'};return residenceMap[country]||'GR';// Default to Greece\n}function getTypePolicyID(tripType){// Map trip types to Terracotta Type Policy IDs\nconst policyMap={'single':'1',// Single trip policy\n'annual':'2',// Annual multi-trip policy\n'comprehensive':'3'// Comprehensive single trip policy\n};return policyMap[tripType]||'1';// Default to single trip\n}function getTypePackageID(tripType){// Map trip types to Terracotta Type Package IDs\nconst packageMap={'single':'1','annual':'2','comprehensive':'3'};return packageMap[tripType]||'1';}export default TerracottaService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}